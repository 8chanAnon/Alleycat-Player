<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="strict-origin">

<title>Alleycat Player</title>

<style type="text/css">

body {
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
}

.widevid {
  position: relative; overflow: hidden;
  width: 736px; height: 414px;
  border: 2px solid red; background-color: indigo;
}

.widevid img {
  top: 0; left: 0; right: 0; bottom: 0;
  position: absolute; width: 100%;
  height: auto; margin: auto; border: none;
}

.widevid:fullscreen {
  border: none;
}

.msgbox {
  position: absolute; top: 35%; left: 40%; right: 40%; display: block;
  text-align: center; border-radius: 10px;
  color: paleturquoise; background-color: slateblue;
  font-style: italic; cursor: pointer;
}

iframe {
  width: 100%; height: 100%;
  position: absolute; border: none;
  background-color: transparent;
  pointer-events: none;
}

.popbox {
  z-index: -1; width: 100%; height: 100%;
  position: absolute; pointer-events: none;
}

.popbox table {
  width: 100%; border:none; margin: 0; table-layout: fixed;
}

.popbox td {
  padding: 6px 8px 2px 8px;
}

.popbox button {
  width: 100%; height: auto;
  text-align: left; text-overflow: ellipsis;
  white-space: nowrap; overflow: hidden;
  font-size: 12px; line-height: 14px;
  font-family: 'segoe ui', serif;
  padding: 2px 5px 2px 5px; border-width: 1px;
  color: maroon; pointer-events: auto;
}

.ranger button {
  vertical-align: top; height: 22px;
  font-size: 13px; line-height: 19px;
  padding: 0px 4px 2px 4px; margin-top: 1px;
  color: darkred; background-color: lavenderblush;
}

.ranger input {
  width: 60px;
}

input {
  height: 17px; font-size: 13px; position: relative; display: inline-block;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy;
}

input[type=checkbox] {
  vertical-align: bottom;
  margin: 1px 2px 1px 2px;
  filter: contrast(1.2) brightness(1.4) opacity(85%);
}

input[type=radio] {
  vertical-align: bottom;
  margin: 0 1px 0 2px;
  filter: contrast(1.2) brightness(1.4) opacity(85%);
}

input.idspec {
  width: 100%; margin: -4px 0 -2px -8px;
  color: sienna; background-color: cornsilk;
}

input.urlspec {
  width: 65%; margin: 0 1px 0 4px; padding: 4px 6px 3px 6px;
  color: slateblue; background-color: cornsilk;
}

input.static {
  margin: 0 1px 0 2px; padding: 3px 0 3px 0;
  text-align: center; border: 1px solid sandybrown;
  color: firebrick; background-color: papayawhip;
}

.dropbox {
  width: 100%; position: relative;
  display: inline-block; white-space: nowrap;
  color: firebrick; background-color: papayawhip;
}

.dropbox input {
  vertical-align: top;
  width: calc(100% - 32px); margin: -2px 0 -2px 0;
  color: inherit; background-color: inherit;
}

.dropbox button {
  vertical-align: top; width: 24px; height: 25px;
  font-size: 16px; line-height: 17px;
  margin: -2px 0 -2px 0; padding: 0 0 4px 0;
  font-family: 'segoe ui', serif; font-weight: bold;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  color: indianred; background-color: mistyrose;
}

.dropbox0 {
  color: sienna; background-color: cornsilk;
}

.dropbox1 {
  width: calc(100% + 9px); margin-left: -8px;
}

.dropbox2 {
  max-width: 250px; width: calc(100% + 9px);
  margin-left: -8px; margin-bottom: 1px; color: red;
}

.dropbox3 {
  width: 140px; margin-left: -8px; margin-bottom: -1px;
}

.dropdown {
  z-index: 2; max-height: 50vh;
  position: absolute; display: none;
  overflow-x: hidden; overflow-y: auto;
  margin: 4px 0 0 1px; outline: 1px solid peru;
  border-top: 3px solid transparent;
  border-bottom: 3px solid transparent;
  font-size: 13.5px; font-style: normal; font-weight: normal;
  font-family: 'consolas', 'lucida console', monospace;
  color: darkgreen; background-color: ivory; cursor: default;
}

.dropdown option {
  height: 15px; min-height: 15px; max-height: 15px;
  line-height: 15px; position: relative; text-align: left;
  margin: 0 3px 0 3px; padding: 0 22px 0 6px;
}

.dropdown0 {
}

.dropdown1 {
  max-height: calc(28 * 15px);
}

.dropdown2 {
  max-height: calc(26 * 15px);
}

.dropdown3 {
}

.pickpanel {
  z-index: 0; width: 164px; height: auto;
  position: relative; display: inline-block;
  overflow: hidden; margin: -1px 0 -2px 0; padding: 2px;
  outline: 1px solid thistle; border: 2px solid skyblue;
  color: mediumvioletred; background-color: cornsilk;
}

.pickpanel option {
  text-align: center; margin: 0; padding: 0 0 0 8px;
}

span.box {
  padding: 4px 3px 2px 2px;
  outline: 1px solid lightsteelblue;
}

th {
  border: 2px solid lightsalmon;
  color:crimson; background-color: pink;
}

table {
  border: 3px solid green;
}

table.list {
  border: 2px solid olivedrab;
}

td {
  font-size: 14px; line-height: 13px;
  padding: 0 4px 0 6px; color: saddlebrown;
  text-align: left; vertical-align: top;
}

td.textbox {
  font-size: 14px; line-height: 17px;
  width: 30vw; padding: 0 17px 0 17px;
  text-align: center; white-space: nowrap;
}

td.vidbox {
  font-size: 15px; line-height: normal;
  padding: 0 0 0 2px; vertical-align: middle;
  border-left: 1px solid firebrick;
}

td.grill {
  width: 35vw; margin: 0; padding: 0;
  background: radial-gradient(darkolivegreen 15%,transparent 40%);
  background-size: 10px 5px; border-left: 1px solid firebrick;
}

button {
  width: auto; height: auto;
  font-size: 12px; line-height: 18px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  border-color: gainsboro;
}

button.is_off {
  margin: 2px 0 -1px 0;
  border-style: outset;
  background-color: pink;
}

button.is_on {
  margin: 2px 0 -1px 0;
  border-style: inset;
  background-color: lightgreen;
}

button.wrapper {
  width: 60px; height: 18px; font-size: 13px;
  margin: 0 -1px 0 -1px; padding: 0; border: 1px solid gold;
  color: red; background-color: blanchedalmond;
}

button.copy {
  font-size: 19px; line-height: 22px;
  padding: 1px 10px 2px 10px; background-color: pink;
}

h3 {
  vertical-align: top; padding-top: 5px; margin-bottom: 10px;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

.ir input {
  height: 17px; margin: 2px 5px -2px -1px;
}

.ir a {
  color: crimson; text-decoration: none;
}

::selection {
  color: yellow; background-color: orchid;
}

option:hover {
  color: yellow; background-color: orchid;
}

.mark {
  background-color: lightgray;
}

.show {
  display: block;
}

.r { color: crimson; }
.g { color: seagreen; }
.b { color: blue; }
.w { color: #A02000; }

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }
w_ { color: #A02000; }

</style></head>

<body
  onload="javascript:load_all()" onunload="javascript:dump_all()"
  onclick="javascript:MEOW(event)" onkeydown="javascript:MEOW(event)"
  onresize="javascript:resize_all()">

<h1><g_>A<r_>ll<g_>ey<r_>cat <g_>Pl<r_>ay<g_>er <r_>v3e</r_></h1>

<p><hr><p>

<div><g_>Pick a Proxy:</g_>&nbsp;
<div class="dropbox dropbox0" style="width:300px"><input type=text disabled><button>+</button>
<div id="proxy" class="dropdown dropdown0">
  <option value="http://35.210.173.135/" class="b">35.210.173.135 **
  <option value="https://xyss5.herokuapp.com/" class="b">xyss5.herokuapp.com *
  <option value="https://fathomless-cliffs-85079.herokuapp.com/" class="b">fathomless-cliffs-85079.herokuapp.com *
  <option value="LOCAL://localhost:8080/" class="r" checked>Local Proxy Server (Kraker)
  <option value="https://cors-anywhere.herokuapp.com/">cors-anywhere.herokuapp.com
  <option value="https://bypasscors.herokuapp.com/api/?url=">bypasscors.herokuapp.com
  <option value="https://api.allorigins.win/raw?url=">api.allorigins.win
  <option value="">None
</div></div>
<b>&nbsp; &nbsp; &nbsp; Go to <a href="#sites">Site list</a> or <a href="#movies">Movie sites</a>
  or <a href="#notes">Special Notes</a> or <a href="#livestream">TV & Radio</a>
  or <a target=_blank href="https://8kun.top/alleycat/catalog.html">Alleycat BBS</a></b>
</div>

<p><hr><p>
Install the Local Proxy Server app which is available
<a href="https://archive.org/details/alleycat-player" target=_blank>here</a>. The current version name is "kraker-1c".
<p>
CORS Unblocker:&nbsp;
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a> &nbsp;
<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/"
  target=_blank>Firefox only</a>
<br>
&nbsp;(<r_>As of Firefox 74.0, these extensions do not work. Explanation in the release notes for v3b.</r_>)
<p>
Alleycat Player supports playback of HLS/m3u8 and DASH/mpd videos via these two modules (whitelist accordingly):
<p><g_>
cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js<br>
reference.dashif.org/dash.js/v2.9.3/dist/dash.all.min.js
</g_><p><hr><p>

<b>Release notes for v3e (April 20, 2020):</b>
<p>
<ul><li>
Fixed the primary and secondary feeds for the US Internet TV channels. The feeds from 123tvnow.com were previously
hard-wired. It is now necessary to hit the site for the feeds. The "crypto.js" module supplied with kraker-1c is
being used for this purpose.
</li><li>
Updated XHamster. Download links removed from VidNode because they don't work.
</li><li>
Removed TV Ontario because the source is broken.
</li></ul>
<p>

<b>Release notes for v3d (April 11, 2020):</b>
<p>
Youtube fixed the bug with signed videos which was patched in v2f. The extra step 4 is no longer needed.
<p>
I am still not getting any feedback on Alleycat Player. Nobody is checking my home page on archive.org to find that I do
have a place where you can offer feedback. The address is now available at the top of this page. As I have mentioned before,
I only have a minimal Win10 system available to me for testing. No bad-ass video card. No widescreen monitor. Just a
really basic system. I have been doing my best to guess how Alleycat Player will perform on other systems but I can only
go so far without feedback.
<p>
On my list of things-to-do: keyboard video controls and ability to save m3u8 videos as mp4. The former is low
priority. I really want to get that second feature working as soon as possible. I know it can be done but I'm not
sure how yet. I am not planning to do the same for DASH videos.
<p>
It is important to use your browser's zoom feature to fit Alleycat Player to your browser window. This works pretty well
(as far as I can tell) but the faux speaker grill on the right-hand side might still be visible because you don't have
exact control over the zoom factor. I have added a feature to "snap" the grill out of view when it reaches a certain
minimum width. Hope this works as intended.
<ul><li>
Added PagalMovies. This is a source for Bollywood and Hindi movies but many English films are there too.
</li><li>
Updated MixDrop to allow for a wider range of ID lengths. I have seen IDs of length 5 and all the way to 15. The default
algorithm for separating ID numbers from a URL doesn't work for such a wide range.
</li><li>
Added a secondary feed for OAN.
</li></ul>
<p>

<b>Release notes for v3c (April 6, 2020):</b>
<p>
Previous iteration of v3c was revoked. This is the correct version.
<p>
The US Internet TV sources changed again. This fix will hopefully be stable for a while. A remote proxy will no longer
work for these channels but a CORS unblocker will (see the v3b release notes regarding Firefox 74.0). At the time of this
writing, OAN is down.
<p>
<b>Release notes for v3c (April 5, 2020):</b>
<p>
The sources for most of the Internet TV channels in the US (ustv247.tv, ustvgo.tv, watchnewslive.tv) have undergone
another update after having been down for three days. The Local Proxy Server is required to access these channels due to
the need to handle cookies and also a Referer Lock. The actual channel feed (new domain: ustv24h.live) is not restricted
in any way.
<p>
My previous comments regarding pixel misalignment in the viewers might have struck some people as odd because it is likely
that the "half-pixel error" test link did not work for you. Well, it turns out that the error factor varies depending on
screen resolution and zoom factor. The test actually works but the correct error factor for your system can be anything
from 0.1 to 0.9. At normal zoom and 1024x768 resolution, the error factor of 0.5 works perfectly for me across different
browsers but does not work if I change either the zoom or the resolution. Weird. Very weird. I have no solution to this
problem. On the bright side, I am no longer seeing any misalignment errors with the video controls. Knock on wood?
<ul><li>
Updated UniqueStream. Removed WillTV because the site now requires a login.
</li><li>
Updated the video controls to include a "flip horizontal" option.
</li></ul>
<p>

<b>Release notes for v3b (March 29, 2020):</b>
<p>
At some point, I will have to remove the old release notes. For now, I am leaving them since they contain some valuable
information.
<p>
Mozilla Firefox 74.0 has broken the CORS bypass extensions. However, this is only true if Alleycat Player is loaded from
the local drive. The extensions still work if Alleycat is loaded from "archive.org". This
<a target=_blank href="https://www.mozilla.org/en-US/security/advisories/mfsa2020-08/#CVE-2020-6809">security advisory</a>
appears to be the relevant justification (which I don't understand). Perhaps this will happen to Chrome as well or maybe
Mozilla will wise up to a better solution. The developer of "CORS Everywhere" has stated that this breakage appears to be
unfixable. That is unfortunate since I use that extension for testing Internet TV links.
<p>
I should write some words about how the Kraker Local Proxy Server deals with CORS blockage and other accessibility
issues. Let's start with this working example of an Internet TV channel blocked by CORS:
<p>
<g_>http://localhost:8080/~http://hitmusic.hu/hitmusic.m3u8</g_>
<p>
The channel will work just fine without Kraker on VLC or SMPlayer or if you use a browser extension
for m3u8 playback. The CORS issue appears ONLY if you try to run the channel in Alleycat Player. The browser will load
the file alright but it will disallow access by Alleycat because the server has not set the HTTP header
"access-control-allow-origin" to "*". Kraker will set the header to "*" so that the browser will allow access.
The tilde (~) simply informs Kraker that it should handle the request in "passthrough" mode so that the console
does not get clogged with messages. That is, a message is printed to the console only every 30 seconds rather than for
every request.
<p>
Some channels do not work quite so easily. The segment URLs contained in the m3u8 will work just fine if they
are relative URLs, meaning that the domain serving the video segments is the same as the one serving the m3u8. If absolute
URLs are used in the m3u8 (whether or not they are in a different domain) then the video player will try to load the
segments directly without going through Kraker. For this reason, Kraker has an option to "fix" the m3u8. The option is
activated in this manner:
<p>
<g_>http://localhost:8080/~*,,*http://video.blivenyc.com/broadcast/prod/2061/22/desktop-playlist.m3u8</g_>
<p>
There is more to the double-comma syntax but that is not relevant here. The asterisks delineate a "referer" URL (see the
release notes for v2d). Though this particular example is not referer-locked, the default referer string would be
"http://video.blivenyc.com/". If a different referer is needed, then the URL would look like this:
<p>
<g_>http://localhost:8080/~*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253565/NASA-NTV1-Public/master.m3u8</g_>
<p>
There is a shortcut if you want to play a channel without the need to type in the "localhost" part:
<p>
<g_>~7:*http://1music.hu/1music.m3u8</g_> or <g_>~8:*http://1music.hu/1music.m3u8</g_>
<p>
<b>Some really weird shit going on with HTML/CSS rendering</b>
<p>
You may have noticed this. Some versions of Alleycat Player or Youtube Player don't seem to have the problem but the
problem does exist with Alleycat v3a. If you click between the Info Viewer and the News Viewer, the two viewers do not
line up. The symptoms can vary. Buttons or text may appear to move up or down a pixel. The entire viewer may move. It is
bizarre and has caused me a lot of frustration. I have finally nailed it down. First of all, the CSS for the buttons had
to be revised to balance these four attributes: height, line-height, font-size and padding. There was nothing wrong with
my CSS. The browsers have some bugs. I think what is happening is that browsers create the page in multiple layers:
background, borders and text. The layers may not align exactly due to half-pixel errors so elements may be drawn out of
alignment when the layers are combined.
<p>
This caused me much grief with the updated video controls. The text was not being drawn precisely between the borders but
this error was occurring in only one or two of the viewers and never in all three. So the issue was impossible to resolve
by just tweaking the CSS. To make a long story short, the solution involved introducing a half-pixel error in between
the Info Viewer and the News Viewer. Don't believe me? Click the link below. The Javascript will revoke the half-pixel
error and bring you to the Info Viewer. Switch between the viewers to see the result. In Firefox, the "Raw/Wrapper/Sandbox"
text and the background for the "No Video" text will move. In the Chrome-based browsers, the entire viewer
will move. Come back here and click the link again to see the problem get fixed.
<p>
<g_>Reverse the half-pixel error:</g_> <a href="javascript:testit()">click here</a>
<p>
I am testing this on Windows 10 with Firefox, Waterfox, Google Chrome, Brave and Opera. The fix works for all of them
despite the fact that the symptoms are different. I do not have access to Linux or any other platform for testing so your
mileage may vary. This is the HTML code containing the half-pixel error:
<p>
<g_>&lt;div id="test" style="width: 90vw; height: 250.5px"&gt;&lt;/div&gt;</g_>
<p>
I have written several paragraphs of text here and it has not affected the viewers. This is beyond my comprehension and
it has given me a colossal headache.
<ul><li>
Added a speed control and made a few other improvements to the video control bar. Some sort of keyboard interface is on
the list of things to do.
</li><li>
"153news.net" is gone as of March 22. Someone stole the server from the data centre. For details:
<a href="http://abovetopsecret.is/153news-net-offline-raided/">article</a> and
<a href="https://invidio.us/channel/UCJd3MyWFy4f3sIOeycp4UdA">Jason's Youtube channel</a>.
</li><li>
Nancy Web TV will be offline until the coronavirus panic is over. WTF?
</li><li>
TV Ontario is back up. The same source (www.arconaitv.us) is now the primary feed for CTV News.
</li><li>
Removed the secondary feed for OAN (still searching for more sources). All of the "ustv.to" sources are currently
working with a remote proxy.
</li><li>
Updated Periscope. Some videos were found to need an m3u8 fixup. Also, the same videos were found to NOT be rotated.
Don't know yet how to differentiate between rotated and non-rotated videos.
</li><li>
I don't know what is going on with VidNode. I'm not having issues with it but sometimes Alleycat gets an mp4 and other
times it gets an m3u8. I prefer the latter because I can get the 360p resolution. My CPU is overworked at higher
resolutions unless I use SMPlayer. Whatever. I'm getting m3u8 right now. Also, the download links often (usually?)
don't work.
</li></ul>

<b>Release notes for v3a (March 19, 2020):</b>
<p>
Major update today. The new video controls are done. Slick if I do say so myself (and I do). The main feature is the seek
function with 6 presets (5s, 15s, 1m, 2m, 5m, 10m) and a freeform input which can accept either h:m:s format or just a
plain number of seconds. Fractional values work too. Precede the number with a "+" or a "-" to seek from the current
play time. For example, "+0.1" will allow you to seek ahead one tenth of a second for those times when you need to find the
perfect spot to take a snapshot (of course, you need to pause the video but I don't really have to point that out, do I?).
<p>
You'll also find your viewing experience a bit more pleasant without that spinning icon popping up in the middle
of your video every time there is a hiccup in the network feed. Instead, the control bar will show itself to signal the
status of the feed after two seconds so you don't need to put up with annoying and constant feedback. After all, you do
know that the video is not working without being told. It might help you to know that hitting the 5s seek preset will
usually get a stalled video going again.
<p>
You can also adjust the brightness and saturation but the implementation is very basic. Use the main controls unless you
are in fullscreen mode or in a window. Lastly, you can rotate the video. Watch your vids upside down for a new experience.
<p>
Quick tip: The status bar in the middle of the viewer is now clickable (where you see the "No Video" message).
It will pop up the current stack if one is active (the "Allow Multiple" option is ignored). The reason why the whole viewer space is not clickable has to do with
the nature of an <i>iframe</i>. There is, of course, some sort of solution but I haven't figured it out yet and I am fed up
of trying.
<ul><li>
Added Periscope. Not tested with live feeds. Weirdly, Periscope vids are rotated sideways. This is handled by the new video
control.
</li><li>
The main source for most of the secondary US feeds (123tvnow.com) has changed the format of the video URLs. This is fixed.
Besides that, very little has changed. A few Internet TV channels had to be replaced but nothing that anybody should care
about. That's good because I'm tired of all the churn lately.
</li></ul>
<p>

<b>Release notes for v2f (March 11, 2020):</b>
<p>
The fixes made in v2e are holding up but now Youtube has an issue. More whack-a-mole. Never before have I had to deal with
so much breakage in such rapid succession. Something changed with Youtube regarding signed videos. The signature creation
algorithm broke, meaning that some videos stopped working. They won't play in embedded mode either and this has
broken GenYoutube. For some reason, the same videos will play embedded on Hooktube. Da fuck? Invidious is not affected and
I will explain what is happening. There are up to 5 remote-access steps involved in establishing a connection to a
signed video. For example:
<p>
Step 1: <r_>https://www.youtube.com/get_video_info?video_id=kJAsn_vJyY4&el=leanback</r_><br>
Step 2: <r_>https://www.youtube.com/get_video_info?video_id=kJAsn_vJyY4&el=previewpage</r_><br>
Step 3: <r_>https://www.youtube.com/embed/kJAsn_vJyY4</r_><br>
Step 4: <r_>https://www.youtube.com/watch?v=kJAsn_vJyY4</r_><br>
Step 5: <r_>https://www.youtube.com/yts/jsbin/player_ias-vflQm4drh/en_US/base.js</r_>
<p>
Step 2 is only needed if step 1 fails. If a video is signed then step 3 is needed to determine the URL from which the
signature algorithm may be obtained. This is where it breaks. Currently, Youtube is delivering a URL that looks like this:
<p>
<r_>https://www.youtube.com/s/player/373b36d1/player_ias.vflset/en_US/base.js</r_>
<p>
The next step is to load the file pointed to by the URL and search through it to collect the bits of the signature creation
algorithm which is then executed in a Javascript <i>eval</i> statement. The above URL delivers a signature algorithm
alright but it does not work. The Google server rejects the video URL composed with this algorithm. Step 4 is the fix for
this issue. The correct signature algorithm is extracted in step 5.
<p>
Now, there is a problem with loading the URL shown in step 4. The size is over 400K while the URL in step 3 is less than
20K. That is why step 4 was not part of the original process. Invidious uses step 4, not step 3, and that is why it has not
been broken by this Youtube change. In order to avoid unnecessary Internet access, Alleycat saves the results from steps
4 and 5 so you are not likely to see these more than once. Youtube cycles the signature creation algorithm once a day though
I have seen it occassionally happen several times in a short period.
<p>
Additionally, GenYoutube has now been dropped from the list of Youtube sources and not just because of this recent change.
The method for obtaining playable video links from GenYoutube has changed. It can be hacked but I'm not gonna bother.
The site has never been a reliable source anyway. Previously, "y2meta.net" changed over to "cnclips.net" and I had that
working but the site is now pretty broken so it has been dropped. We are now left with just two Invidious instances as
backup sources for Youtube. Oh well.
<p>

<b>Release notes for v2e (March 7, 2020):</b>
<p>
A bunch of the US channels went down. That's 51 channels though 34 of those have a secondary feed. The sites which
supply the "ustv.to" links have undergone yet another rebuild. The links are obfuscated now whereas they were in the clear
before. That's fixed. Also, the sites have moved over to CloudFlare from Sucuri for the DDOS protection (bot blocker).
That's fixed too. At this point, only "ustvgo.tv" appears to be using the bot blocker but that can change at any time.
If a blocker is not in place, the sites are accessible with a remote proxy. Don't expect that to last. You should be using
the Local Proxy Server.
<p>
VidNode has fixed the problem with the m3u8 feeds. Some of the mp4 links are not working but I haven't done more than
a few spot checks.
<p>
Some of the Canadian channels have been replaced and they all require the local proxy. I don't have a replacement for
TV Ontario but TVO Kids still works.
<p>

<b>Release notes for v2d (March 3, 2020):</b>
<p>
At this point, I need to talk about what I call the "Referer lock". Yes, the word "referer" is misspelled. It is an
historical artifact. Simply put, the Referer is the domain (the URL) from which a page or a component was loaded. Elements
of a page loaded from different servers are in different domains. This is only important in the case of <i>iframe</i> or 
<i>script</i> tags because these are active elements while images and text are passive. There are visibility rules which
the browser enforces between elements or components in different domains. For example, a video embedded in one of the
Alleycat viewers is invisible to Alleycat while the embedded video is blocked from opening windows (popup ads)
outside of its "sandbox". 
<p>
There are security protocols which govern communication between web browsers and web servers but it really consists of
little more than a "gentleman's agreement" on the part of the browser that it will implement certain restrictions at the
request of the server. Special HTTP headers are used to control this. While the visibility rules enforced by the browser
within itself are difficult to overcome without exploiting security weaknesses, it is trivial to break security outside of
the browser. This is accomplished with a proxy server. A proxy server sits between the browser and the destination server
for the purpose of disguising one from the other and it can manipulate the messages passing back and forth. There are
certain advantages to using a remote proxy over a local proxy and vice versa but those details are not important here.
<p>
Getting back to the main point, the HTTP Referer header is not accessible to any script running inside of the browser
(though access is possible with an extension or add-on). Thus, Alleycat Player cannot pretend to be from "twitter.com" or
any other domain in order to bypass security checks on the server. The Referer lock is actually a pretty powerful check on
unauthorized access to server content. Though it is a trivial thing to change an HTTP header, it can only be done with a
specialized tool. A video which is Referer-locked won't play on SMPlayer though I think there is a way to do this on VLC.
Forget about Windows Media Player or any other player which does not specifically support a user-specified Referer. In some
cases, the server will accept its own domain as Referer but video players do not take advantage of this. Without the user
being able to control the Referer header, such videos are unplayable.
<p>
Up to this time, the only videos that I have found to be Referer-locked are some m3u8 live streams and the videos from
VidNode (also m3u8). No mp4 videos have been found like this until XHamster went for it. I don't know if this was
deliberate. Perhaps somebody flicked a switch at the server without intending to. Or maybe the management decided that
too many people were downloading (you can easily find the mp4 links in the HTML source). In any case, if this sort of
thing is gonna keep happening, I figure that it's time to give my users a better understanding of what this proxy thing
is all about. This is a war that I'm waging with content providers. Hee hee.
<p>
<ul><li>
Updated: Fox News occassionally delivers m3u8 instead of mp4.
</li><li>
Updated: Twitter very rarely gives mp4 instead of m3u8. Strange.
</li><li>
Updated: GoUnlimited, UniqueStream (reverted to v2a code), XHamster (now requires Local Proxy Server).
</li><li>
Added MixDrop and StreamVid. Removed ProStream. Interesting thing about MixDrop is that I tried to hack it before but didn't
find a way around the link obfuscation. MixDrop has changed its page format so now Alleycat can get the links. There is
still an obfuscation in place but I've seen the exact same method before so I know how to hack it.
</li><li>
Forgot to mention that iHeartRadio was added in v2c. Only podcasts are supported for now. The big names like Rush Limbaugh,
Sean Hannity and Dan Bongino are all there.
</li><li>
I have added active links (shown in red) for all of the Talk Radio stations. These links go to a web site where you
can find the station broadcast schedule (though some are less informative than others). Talk Radio is not terribly
interesting if you don't know who in hell is talking.
</li><li>
Some Internet TV channels are down. Not fixing them at this time because they've all been down before. They are:
MiX Music, You Too America, CFTO, City TV, TV Ontario, TV Mar, A Spor HD.
</li><li>
There is an issue with VidNode as I write this. Recently, the site was delivering invalid links for the m3u8
videos but now the links are not found anymore. That's fine as long as there is at least one mp4 link available on the
download page (hit DLoad to get the links). Additionally, there is usually a link to an XStream video as well on the
VidNode main page so Alleycat will link to this if present. Note that the XStream links are often broken (video removed for
DMCA violation). Anyway, that's how it's going to work until VidNode fixes their problem. If the site goes down, there are
others waiting to be hacked.
</li></ul>

<b>Release notes for v2c (February 18, 2020):</b>
<p>
This is a major interface upgrade. In the past, I was (grudgingly) satisfied with the user interface despite the obvious
shortcomings. This is and was always a technical endeavour (hacking websites) and not an exercise in web page
design. However, I have reached a point where I am pretty pleased with the standing of this project technically
so it makes sense to pay closer attention to the user interface.
<p>
Two things warranted my attention: compatibility with both standard and wide-screen monitors and the generally inadequate
look of the default select boxes, especially in Firefox with its long-standing issue with the double-spacing in dropdown
lists. These issues have been fixed for good. The select boxes have been totally replaced using some tricky CSS and some
Javascript. The video viewports, which were not zoomable before, will now zoom correctly along with the other interface
elements. My original mistake was taking seriously some "expert" design advice. I am not so naive anymore.
<p>
For those who might be looking to this project for potential lessons in HTML/CSS and Javascript, I recommend that you
study the minimal version of this application (alleycat-player.htm). The current complexity of the code is daunting for
beginners. I apologize for the state of the HTML/CSS code but that's not my fault. I'm not the only developer who
struggles mightily with this stuff. The specs have grown in complexity over the years and often work against the original
intent of the World Wide Web as being primarily text-oriented. In other words, Alleycat Player is pushing the limits. This
stuff would actually be better done as a desktop application and not a browser-based one. That said, I can't say that the
end result is in any way disappointing (knock on wood).
<ul><li>
CBC News is geo-locked so I added a secondary link which is not. However, the Local Proxy Server is required.
</li><li>
There has been some churn in the TV channel selection due to the usual problem of links suddenly biting the dust. I hate
it but that is life in the fast lane. The sources for many of the US channels are still behind a bot blocker and it looks
to be a permanent condition. You are out of luck for those channels without the Local Proxy Server. Most of the
secondary channels are, unfortunately, also inaccessible without the proxy.
</li><li>
The Internet Radio has been expanded to support up to 100 stations. However, if you are expecting me to populate this with
new links then you are seriously barking up the wrong tree. I only did this in order to finalize the design. The anonymous
user of this anonymous application created by an anonymous developer can very well learn how to add his/her own radio
stations (hur hur).
</li></ul>

<b>Release notes for v2b (February 3, 2020):</b>
<p>
Found two issues with YouTube. First, the signature creation algorithm was failing on some versions of "base.js". This may
just be YouTube developers messing around (it has happened before). The second issue is the DASH player failing on some
videos. This was fixed by changing the DASH player version from "3.0.1" to "2.9.3". I had to do the same thing previously
for the HLS player (reverting from the latest version to version "0.12.0") because the player was failing on some videos
sourced from Akamai. This game of whack-a-mole never ends.
<p>
I have noticed the occassional livestream YouTube video which does not work because the expected video information is
absent. Instead, the YouTube file contains the URLs for both an mpd and an m3u8 file. This issue is fixable but I
won't be addressing it until I see indications that it is more common than it currently appears. If you encounter such a
video, it may be viewable via an Invidious instance.
<p>
A new video resolution indicator has been added to the viewers. This info comes from the video playback element (the
<i>video</i> tag). For HLS/DASH playback, the indicator will update when the player switches the quality level.
An important fact here is that the resolution info in the video element is never updated. For that reason, updates must
be pulled directly from the HLS/DASH video player. In the case of HLS, the resolution info comes from the actual video
stream (though I have noticed that it is sometimes wrong). In the case of DASH, the info comes from the manifest (the mpd
file), not from the video stream. For this reason, it may not necessarily reflect the true resolution.
<p>
<ul><li>
Updated ABC, VidNode, UniqueStream
</li><li>
StreamLord still does not have a working search feature. It has been replaced with WillTV.
</li><li>
The sources for many US channels (ustv247.tv, ustvgo.tv, watchnewslive.tv) now have a bot blocker in place. This was true
already for the main page links but did not apply to the secondary links which Alleycat is using for the video URL. The
code has been updated to bypass the bot blocker but that requires the Local Proxy Server to work.
</li><li>
The new remote proxy added in v2a (35.210.173.135) is marked with a double asterisk because it can be used to break
the region locking on PBS. If this proxy turns out to be stable, I will be looking into it further.
</li></ul>

<b>Release notes for v2a (January 12, 2020):</b>
<p>
Big update for YouTube. Additional video formats are now available with the DASH player and the Kraker Local Proxy Server
(version 1c is required). Now, Kraker is indispensable in this process since there are a number of issues involving not
just the usual CORS limitations but also the behaviour of the Google video server. In order to access the video file, DASH
needs to employ byte ranges. That would normally be fine BUT when the web browser sends an OPTIONS request to test whether
byte ranges are permissible, Google answers NO. Bad Google. Byte ranges work fine but you just don't want to allow it.
Alrighty then...Kraker will auto-complete the OPTIONS request and green light it.
<p>
The role of the Kraker server goes further than that. It also is responsible for creating the mpd file for the DASH player.
It retrieves a blank template from the local disk, merges that with data from Alleycat and then makes the file accessible
as a remote resource. The point here is that the video is playable with any video player that supports DASH/mpd playback
(like SMPlayer or VLC). The video data is held only in the Kraker memory so it goes away if the proxy is shut down. Also,
there is a limit of 16 videos available at one time. Note that VLC displays an incorrect progress bar for live streams while
SMPlayer only plays the first few seconds. VOD works fine on both. This has to do with the fact that the DASH specs are a
mess and nobody really knows how it is supposed to work. It cost me three days of trial and error to get the native DASH
player to work correctly.
<p>
For most videos, all of these formats are available: 360/480/720p in both mp4 and webm. The thing here is that the audio
and the video are separate files (which is why the DASH player is needed). For mp4, these are the YouTube tag numbers:
#140 (audio), #134 (360p), #135 (480p), #136 (720p). For webm: #251 (audio), #243 (360p), #244 (480p); #247 (720p).
Higher resolutions may be available for some videos but Alleycat does not access them (at least, not at this point in time).
If the DASH formats are not available (rare), Alleycat will revert to the normal formats. Also, the audio and video are
both available for download via the DLoad button.
<p>
At this point, there is hardly any need for the additional YouTube sources, which are decidedly unreliable at best. Still,
they are sometimes useful for bypassing geo-blocks though that doesn't always work. Oh well.
<ul><li>
New brightness controls with a finer adjustment gradient. Also, ability to clear and restore the settings using the
Reset button.
</li><li>
New source for free movies and TV shows: UniqueStream. Note that the site is in a state of flux since I already have had to
update the code before this release. I expect additional changes to occur so be prepared for this site to become
inaccessible at some point (will fix in the next Alleycat update).
</li><li>
VidNode updated because the domain name changed to "vidcloud9.com". Still called VidNode though and the site is still
accessible as "vidnode.net".
</li></ul>
<p><hr><p>
<b>Tips on using Alleycat Player</b> -- these instructions are not meant to be complete. Alleycat Player is
primarily designed as a hacking tool. Please experiment to determine the limits and capabilities of the tool.
<p>
The original purpose of this tool was to support backdoor access to videos on YouTube for the purpose of downloading or for
transferring the URL of a video file to an external viewer for playback. The tool has expanded considerably since
the first version and it now supports backdoor access to videos on almost 50 different sites.
<p>
There are two ways to play videos embedded in web sites. The first method is to get the ID number of the video if
such is available. Enter the ID number in the line below the "Play ID" button and press. The second method is to
use the DIG option. In this case, you would copy and paste the URL of a web page in the line beside the "DIG" button
and press. For some sites, Alleycat will search the indicated page for the ID number of a video and then apply
the ID lookup function. Some sites do not employ video ID numbers so the DIG option is the only way to get the video.
Many web sites can be problematic due to small or major differences in page design so this may not always work. Also,
sites may sometimes change the page format so that Alleycat can no longer find the video. For this reason, the code
is continuously being tested and will be updated accordingly.
<p>
A complete URL may be entered as the ID number with the caveat that the ID must be the last part of the URL. If a
slash (/) or a dot (.) appears within the last 5 characters (like ".html") then the string will be truncated. A character
count is used to separate the ID from the rest of the URL. For YouTube, an ID is always exactly 11 characters. For some
sites, there is a small range like from 6 to 8 characters. In the event that a known good ID number is rejected, you can
force the ID to be accepted by preceding it with an asterisk (*). This is seldom necessary but might be needed for very
old videos.
<p>
In many cases, you have the option of choosing the resolution of the video. The format/resolution selection box has an odd
appearance due to Alleycat's original purpose of extracting YouTube videos. YouTube, unlike every other video
storage site, uses its own special coding system for resolutions and formats (because it has so many). For example,
#22 refers to mp4-720p and #43 refers to webm-360p. Note that the webm format is only available on YouTube.
The checkbox called "Format" applies to m3u8 playback (not mp4 or mpd). If checked, the video track for the desired
resolution will be extracted from the master m3u8. Note that this cannot be done if the master file contains an audio
track separate from the video.
<p>
The button called DLoad is for m3u8 sites. Both the "No Play" and the "Format" options must be checked. The m3u8 format
(similar to m3u used for mp3) consists of multiple segments, each about 10 seconds long. In order to convert to another
format like mp4, each of these segments must be downloaded. The DLoad button will open a new window with the list
of segments. This has limited functionality. You can change the list format to text by changing the value of the variable
called "plain_text" inside the Alleycat Player code. At some point, I'll figure out what more I can do with this.
<p>
<b>Viewer modes: Raw / Wrapper / Sandbox</b>
<p>
Sandboxing (implemented via the HTML <i>iframe</i> tag) is employed by Alleycat Player to prevent Javascript embeds from
opening windows or popups for advertising. Some pirate video download sites are unsafe when used without a good popup
blocker. However, if you play the URL inside Alleycat Player, these popups are very effectively blocked. Any URL may be
inserted, not just videos. The native viewers are sandboxed by default. However, if you employ
a window option to open the URL, you need to indicate that you want the window to be sandboxed. Just check the Sandbox
option. If you don't want a sandbox but you want to run a non-video URL then check the Raw option. In the default Wrapper
mode, there are three selectable options: <i>Wrapper</i> for playing mp4/ogv/webm videos (or whatever video format your
web browser supports), <i>M3U8</i> for HLS/m3u8 files and <i>DASH</i> for DASH/mpd files.
<p>
<b>Web browser compatibility notes</b>
<p>
Microsoft Edge has native support for m3u8 and mpd. This does not conflict with Alleycat Player. Videos have a strong
tendency to pixelate badly. Google Chrome and Brave also have issues with pixelation but to a much lesser extent.
Firefox has no such issue. Opera, Maxthon and Vivaldi were briefly tested. They work but pop-up windows do not size
correctly.
<p>
If the "Allow Multiple" option is not checked, windows are supposed to get re-used or closed as needed. However, I
have found two cases where the web browser incorrectly blocks the window close function in Alleycat Player. Edge
does not allow a window opened in Raw mode to be closed. Firefox (on Win10 but not on WinXP) blocks in Raw mode
if the window is controlled by an extension (such as for m3u8/mpd playback).
<p>
Always keep in mind that browsers contain various "security" features that may interfere with Alleycat Player. Consider
that Alleycat is able to extract video links from numerous different sites. Your browser has no idea what is trustworthy
and what is not (even though the content is just a video). You may need to battle with the site blockers in the browser
itself and in whatever add-ons or extensions you may have. Don't blame Alleycat. Your browser is just trying to "protect"
you. Normally, a notice of some sort should appear to warn you about blockage. Sometimes not. If a video does not play,
check the settings in your web browser or pop-up blocker. 'Nuff said. It isn't too bad overall.
<p>
<b>Addendum:</b> Microsoft Edge is hopelessly broken. Videos play with only sound because Edge does not support the CSS
filters used for the brightness control. Also, Edge is not allowing connections to the local host (might be an option
somewhere but I can't be bothered to find it). To repair the no-video problem, find and comment out this line of code:
<p>
vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
<p>
<b>Update:</b> CSS filters are now being used for the radio buttons and checkboxes to get rid of the ugly gray background on
Chrome-based browsers. This breaks on Edge as well. The offending two lines of code read as follows:
<p>
filter: contrast(1.2) brightness(1.4) opacity(85%);
<p>
<b>Caveat:</b> My version of Microsoft Edge is out of date since I have Windows 10 updates disabled.

<p><hr><p><h3 id="notes">Special Notes</h3>
<ul><li>
Alleycat Player must be saved to your local drive. If you run Alleycat from its download site, it can fail in mysterious
ways. For one thing, your web browser may block access to HTTP sites (which includes the Local Proxy Server and many
Internet TV channels). The other problem is the HTTP header called "Referer" (set by the web browser) which can cause
videos on some sites to not play. These sites are affected: BitChute, DailyMotion.
</li><li>
Internet TV (IPTV) channels are subject to downtime of a few hours or a day or a week or even forever. Many of the channel
links offered here can be found via the associated website. If a channel goes down and you want to recover it then search
for the website and extract a fresh link from there. Pirate links are, of course, not easily replaced.
</li><li>
Internet TV channels marked with a double asterisk (**) are only accessible with the Local Proxy Server. Those marked with
a single asterisk (*) are playable with a CORS unblocker. The secondary channels (where available) may or may not need a
CORS unblocker or the Local Proxy Server.
</li><li>
Internet TV channels which are streamed via "ustv.to" (formerly "savitar.tv") are only accessible with the Local Proxy
Server. This is only for channels within the United States.
</li><li>
Only two Invidious sites support live streaming: "invidio.us" and "invidious.snopyta.org".
</li><li>
Vimeo live streaming (m3u8) is supported. Requires the Local Proxy Server or a CORS unblocker.
</li><li>
Brighteon videos will play with the Local Proxy Server and also with the remote proxies marked with an asterisk.
</li><li>
InfoWars videos play as m3u8 but the mp4 version is available via the DLoad button.
</li><li>
The above is also true for VidNode but you need the Local Proxy Server to play m3u8. If you are not using the proxy then
Alleycat will play an mp4 if it is available but you still need a CORS unblocker.
</li><li>
For Twitter short links (like "https://t.co/..."), use DIG to get the tweet.
</ul><p>
Sites accessible with a Brightcove DIG:<br>
&nbsp;- https://www.stuff.co.nz<br>
&nbsp;- https://www.nzherald.co.nz<br>
&nbsp;- https://www.miamiherald.com<br>
&nbsp;- https://time.com<br>
&nbsp;- https://www.itv.com/goodmorningbritain<br>
&nbsp;- https://www.thesun.co.uk<br>
&nbsp;- https://www.channel4.com/news<br>
&nbsp;- http://webtv.un.org<br>
&nbsp;- https://www.express.co.uk
<p>
Sites accessible with a Podcasts DIG:<br>
&nbsp;- https://podcasts.apple.com<br>
&nbsp;- https://itunes.apple.com<br>
&nbsp;- https://www.stitcher.com<br>
&nbsp;- https://radiopublic.com<br>
&nbsp;- https://overcast.fm<br>
&nbsp;- https://www.podbean.com<br>
&nbsp;- https://www.spreaker.com
<p>
<!--
Sites accessible with a JWPlayer DIG:<br>
&nbsp;- STILL nothing here yet because I lost track of the two sites where this worked.
//-->
<p><hr><p>
There are three symbols used to indicate the options available for a particular site. [#]&nbsp;means no DIG option because
the video ID is always exposed. [?]&nbsp;means that video ID numbers are not available (you have to DIG). [+]&nbsp;means
that both ID numbers and the DIG option are supported.
<p>
Here is a rundown of each site, the available video formats and the site URL (link will open a new tab or window):
<p>
<h3 id="sites"><r_>Site List</r_>
  <small> -- Go to <a href="#info">Info viewer</a> or <a href="#news">News viewer</a>
    or <a href="#free">Movie viewer</a></small></h3>

<table class="list">

<tr><td>YouTube		</td><td>mp4/webm	</td><td>*</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://www.youtube.com">www.youtube.com</a></td></tr>

<tr><td>&nbsp; ---	</td><td>		</td><td> </td><td>[#] No Proxy</td>
<td><a target=_blank href="https://invidio.us">invidio.us</a></td>
<td><a target=_blank href="https://invidious.snopyta.org">invidious.snopyta.org</a></td></tr>

<tr><td>BitChute	</td><td>mp4		</td><td>varies</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.bitchute.com">www.bitchute.com</a></td></tr>

<tr><td>Vimeo		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://vimeo.com">vimeo.com</a></td></tr>

<tr><td>InfoWars	</td><td>m3u8/mp4	</td><td>?</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.infowars.com">www.infowars.com</a></td>
<td><a target=_blank href="https://summit.news">summit.news</a></td></tr>

<tr><td>LiveLeak	</td><td>mp4		</td><td>*</td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.liveleak.com">www.liveleak.com</a></td></tr>

<tr><td>Brighteon	</td><td>m3u8		</td><td>*</td><td>[+] CORS!</td>
<td><a target=_blank href="https://www.brighteon.com">www.brighteon.com</a></td>
<td><a target=_blank href="https://www.naturalnews.com">www.naturalnews.com</a></td></tr>

<tr><td>DailyMotion	</td><td>m3u8		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://www.dailymotion.com">www.dailymotion.com</a></td></tr>

<tr><td>PragerU		</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.prageru.com">www.prageru.com</a></td></tr>

<tr><td>TEDTalks	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.ted.com">www.ted.com</a></td></tr>

<tr><td>Nat. Film Board	</td><td>m3u8		</td><td>*</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.nfb.ca">www.nfb.ca</a></td></tr>

<tr><td>Twitter		</td><td>m3u8		</td><td>varies</td><td>[+] KRAK</td>
<td><a target=_blank href="https://twitter.com">twitter.com</a></td>
<td><a target=_blank href="https://threadreaderapp.com">threadreaderapp.com</a></td></tr>

<tr><td>Facebook	</td><td>mp4		</td><td>varies</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.facebook.com">www.facebook.com</a></td>
<td><a target=_blank href="https://www.instagram.com">www.instagram.com</a></td></tr>

<tr><td>Periscope	</td><td>m3u8		</td><td>?</td><td>[#] KRAK</td>
<td><a target=_blank href="https://www.pscp.tv/">www.pscp.tv</a></td></tr>

<tr><td>SoundCloud	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="https://soundcloud.com">soundcloud.com</a></td></tr>

<tr><td>iHeartRadio	</td><td>mp3		</td><td></td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.iheart.com/podcast">www.iheart.com/podcast</a></td></tr>

<tr><td>Fox		</td><td>mp4/m3u8	</td><td>432p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.foxnews.com">www.foxnews.com</a></td>
<td><a target=_blank href="https://www.foxbusiness.com">www.foxbusiness.com</a></td></tr>

<tr><td>ABC		</td><td>mp4		</td><td>360p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://abcnews.go.com">abcnews.go.com</a></td></tr>

<tr><td>CBS		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.cbsnews.com">www.cbsnews.com</a></td></tr>

<tr><td>CNBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cnbc.com">www.cnbc.com</a></td></tr>

<tr><td>CNN		</td><td>mp4/m3u8	</td><td>*</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cnn.com">www.cnn.com</a></td>
<td><a target=_blank href="https://edition.cnn.com">edition.cnn.com</a></td></tr>

<tr><td>C-SPAN		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.c-span.org">www.c-span.org</a></td></tr>

<tr><td>MS/NBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.msnbc.com">www.msnbc.com</a></td>
<td><a target=_blank href="https://www.nbcnews.com">www.nbcnews.com</a></td></tr>

<tr><td>PBS		</td><td>m3u8		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.pbs.org">www.pbs.org</a></td></tr>

<tr><td>CBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cbc.ca">www.cbc.ca</a></td></tr>

<tr><td>CTV		</td><td>mpd		</td><td>?</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.ctvnews.ca">www.ctvnews.ca</a></td></tr>

<tr><td>Global		</td><td>mp4		</td><td>540p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://globalnews.ca">globalnews.ca</a></td></tr>

<tr><td>TVO		</td><td>mp4		</td><td>360p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.tvo.org">www.tvo.org</a></td></tr>

<tr><td>BBC		</td><td>mpd		</td><td>?</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.bbc.com">www.bbc.com</a></td>
<td><a target=_blank href="https://www.bbc.co.uk/sounds">www.bbc.co.uk/sounds</a></td></tr>

<tr><td>Press TV	</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.presstv.com">www.presstv.com</a></td>
<td><a target=_blank href="http://presstvdoc.com">presstvdoc.com</a> (mp4)</td></tr>

<tr><td>Al Jazeera	</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.aljazeera.com">www.aljazeera.com</a></td></tr>

<tr><td>Bloomberg	</td><td>mp4		</td><td>*</td><td>[+] KRAK</td>
<td><a target=_blank href="https://www.bloomberg.com">www.bloomberg.com</a></td></tr>

</table>
<p>

? = unknown or auto-select (m3u8/mpd)<br>
* = user selectable (via format box)<br>
! = use the Sandbox option to embed the video.<br>
KRAK = only accessible with the Local Proxy Server (Kraker)<br>
CORS = only accessible with a CORS unblocker (or Kraker)

<p><hr><p><h3 id="movies"><r_>Movie Sites</r_>
  <small> -- Go to <a href="#free">Movie viewer</a> or <a href="#sites">Info/News</a></small></h3>

<table class="list">

<tr><td>TubiTV		</td><td>m3u8		</td><td>*</td><td>[+] CORS</td>
<td><a target=_blank href="https://tubitv.com">tubitv.com</a></td></tr>

<tr><td>VidNode		</td><td>m3u8/mp4	</td><td>*</td><td>[+] KRAK!</td>
<td><a target=_blank href="https://vidcloud9.com">vidcloud9.com</a> !</td>
<td><a target=_blank href="https://vidnode.net">vidnode.net</a> !</td><tr>

<tr><td>123Movies	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://w2.d123movies.com">w2.d123movies.com</a> !</td>
<td><a target=_blank href="https://0123moviesback.com">0123moviesback.com</a> !</td></tr>

<tr><td>UniqueStream	</td><td>mp4		</td><td>*</td><td>[?] KRAK</td>
<td><a target=_blank href="https://uniquestream.net">uniquestream.net</a></td><tr>

<tr><td>PagalMovies	</td><td>mp4		</td><td>?</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.pagalmovies.monster">www.pagalmovies.monster</a></td><tr>

<tr><td>XHamster	</td><td>mp4		</td><td>*</td><td>[#] KRAK!</td>
<td><a target=_blank href="https://xhamster.com">xhamster.com</a></td></tr>

<tr><td>ClipWatching	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://clipwatching.com">clipwatching.com</a> !</td></tr>

<tr><td>CloudVideo	</td><td>m3u8		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://cloudvideo.tv">cloudvideo.tv</a> !</td></tr>

<tr><td>GoUnlimited	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://gounlimited.to">gounlimited.to</a> !</td></tr>

<tr><td>MixDrop		</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://mixdrop.co/">mixdrop.co</a> !</td><tr>

<tr><td>StreamVid	</td><td>m3u8		</td><td>?</td><td>[#] KRAK!</td>
<td><a target=_blank href="https://streamvid.co">streamvid.co</a> !</td><tr>

<tr><td>UpStream	</td><td>m3u8/mp4	</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://upstream.to">upstream.to</a> !</td><tr>

<tr><td>VideoBin	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://videobin.co">videobin.co</a> !</td><tr>

<tr><td>VidLox		</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://vidlox.me">vidlox.me</a> !</td><tr>

<tr><td>Vidoza		</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://vidoza.net">vidoza.net</a> !</td></tr>

<tr><td>XStream		</td><td>mp4		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://xstreamcdn.com">xstreamcdn.com</a> !</td>
<td><a target=_blank href="https://www.fembed.com">www.fembed.com</a> !</td></tr>

<tr><td>AudioRealm	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="http://audiorealm.com">audiorealm.com</a></td></tr>

</table>
<p>
! on a site url = use caution on these sites due to popup ads<br>
! on Proxy or CORS or KRAK = use the Sandbox option to embed the video.
<p>
Note that quality level (example: [720]) may not be the same as resolution.
<p><hr><p>
These sites are supported under XStream:
<p>
<a target=_blank href="https://www.fembed.com">www.fembed.com</a><br>
<a target=_blank href="https://streamhoe.online">streamhoe.online</a><br>
<a target=_blank href="https://myvidis.top">myvidis.top</a><br>
<p>
These sites are supported under "General DIG":
<p>
<a target=_blank href="https://www.lunchflix.com">www.lunchflix.com</a> (GoUnlimited)<br>
<a target=_blank href="https://watchmoviesfree.org">watchmoviesfree.org</a> (XStream)<br>
<a target=_blank href="https://www.criticbay.com">www.criticbay.com</a> (MixDrop)<br>
<p>
Some search sites to get video links from:
<p>
<a target=_blank href="https://ololo.to/">ololo.to</a><br>
<a target=_blank href="https://crocovid.com/">crocovid.com</a><br>
<a target=_blank href="https://www1.swatchseries.to">www1.swatchseries.to</a><br>
<a target=_blank href="https://www.downloads-anymovies.com">www.downloads-anymovies.com</a><br>
<a target=_blank href="http://www2.project-free-tv.ag">www2.project-free-tv.ag</a><br>
<a target=_blank href="https://www.watchepisodes4.com">www.watchepisodes4.com</a><br>
<a target=_blank href="https://streamdreams.org">streamdreams.org</a><br>
<a target=_blank href="https://www.primewire.li">www.primewire.li</a><br>
<p>
If you want to play embedded videos, make sure that you use the proper embed URL.
<p>
For example:
<table class="list">
<tr><td>Page: https://openload.co/f/{vid-id}</td><td>Embed: https://openload.co/embed/{vid-id}</td></tr>
<tr><td>Page: https://streamango.com/f/{vid-id}</td><td>Embed: https://streamango.com/embed/{vid-id}</td></tr>
<tr><td>Page: https://xstreamcdn.com/f/{vid-id}</td><td>Embed: https://xstreamcdn.com/v/{vid-id}</td></tr>
</table>

<h3 id="livestream"><r_>Internet TV</r_><small> &nbsp;--&nbsp; TV Guide:&nbsp;
  <a target=_blank href="https://ustv247.tv/tv-guide/">ustv247.tv</a>&nbsp;
  <a target=_blank href="https://ustvgo.tv/tv-guide/">ustvgo.tv</a>&nbsp;
  <a target=_blank href="https://watchnewslive.tv/tv-guide/">watchnewslive.tv</a>
</small></h3>

Go to the <a href="#free">Movie viewer</a>, pick a TV stack and a channel and then press "Play ID". That's it.
All channels are m3u8 live streams and most are not region locked. Some channels require an initial
lookup (thus requiring a CORS proxy or unblocker) to find the direct stream URL. Such URLs are temporary and will
time out (anywhere from a few hours to two days). Alleycat Player will refresh the link after two hours.
<p>
In order to facilitate channel surfing, a new feature has been added. Check the option "Allow Multiple" to activate.
This will present the stack as buttons displayed on top of the viewer. Along with that are 12 buttons for previously
selected channels. The "Copy" button will show and hide the popup. Also, pausing the video (not in full-screen) will
show the popup. You can click a blank entry to hide. All viewers have this feature.
<p>
Some channels have two stream sources. This is indicated with a plus sign (+) after the channel name. A double plus
indicates that the streams are from different local stations. Select "webm" in the format panel to access the
secondary channel.

<p>&nbsp;<r_>Bibliography</r_>

<table class="list"><tr><td>
http://ustv247.tv<br>
http://ustvgo.tv<br>
http://watchnewslive.tv<br>
http://www.giniko.com<br>
http://tvtolive.com<br>
https://github.com/exodiver/IPTV<br>
https://publicdomainradio.blogspot.com/p/blog-page.html<br>
</td><td>
https://www.rt.com/on-air<br>
https://www.presstv.com<br>
https://www.aljazeera.com/live<br>
https://www.trtworld.com<br>
https://www.france24.com<br>
https://www3.nhk.or.jp<br>
http://ntv.ca/web-tv<br>
</td><td>
https://yournewsnet.com<br>
https://www.newsmaxtv.com<br>
https://freespeech.org<br>
https://www.redbull.com<br>
http://tbd.com<br>
http://tvart.info<br>
</td><td>
https://www.nasa.gov/nasalive<br>
https://www.c-span.org<br>
http://www.cpac.ca<br>
http://webtv.un.org<br>
</td></tr></table>

<h3><r_>Internet Radio</r_></h3>

Simply go to the bottom of the page and press a radio button to play the Internet Radio. That's it.
For your convenience, the radio will pause when you play a video. Press the Clear button to unpause.
You can also open a radio station in a popup window.
<p>
You can input your own URL for either an mp4 or an mp3 or whatever your
browser supports. To play a YouTube video in audio-only mode, just enter the 11-character video id.
<p>
To find some radio station URLs, you can use the AudioRealm DIG tool supplied with the <a href="#free">Movie viewer</a>.
Also supplied is a stack with links to iHeartRadio and Virtual DJ. These will pop up a window with an embedded web site.
</p>

<div style="width: 90vw; height: 250px"></div>

<!--
////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////
//-->

<h3 id="info"><r_>Info + Entertainment</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#news">News viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#info">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr5z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr5x" class="static" disabled>
<button onclick="javascript:brightness(5,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr5y" class="static" disabled>
<button onclick="javascript:brightness(5,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadid(5,0)">Play ID</button>
<button onclick="javascript:reset_frame(5)">Clear</button>
<p></p>

<input type=text id="id5" maxlength=256 class="idspec" onfocus="javascript:hidelist(5)"
  onclick="javascript:input_onclick('id5')" onblur="javascript:input_onblur('id5')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk5" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src5" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 ># mp4 - BitChute
  <option value= 2 ># mp4 - Vimeo
  <option value= 3 >+ m3u - InfoWars
  <option value= 13># mp4 - LiveLeak
  <option value= 4 >+ m3u - Brighteon
  <option value= 5 ># m3u - DailyMotion
  <option value= 8 >? mp4 - PragerU
  <option value= 6 >? mp4 - TEDTalks
  <option value= 7 >+ m3u - NatFilmBrd
  <option value= 21>+ m3u - Twitter
  <option value= 22>? mp4 - Facebook
  <option value= 26># m3u - Periscope
  <option value= 20 class="r">+ mp4 - BrightCove
  <option value= 24 class="b">+ mp3 - SoundCloud
  <option value= 25 class="b"># mp3 - iHeartRadio
  <option value= 23 class="b">? mp3 - Podcasts
  <option value= 10 class="r">? ----- URL Test
</div></div>

<p><span class="box">
<input type=checkbox id="mov5f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov5p" checked> Use Proxy
</span></p>

<div><div id="fmt5" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win5" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn5a" class="is_off" onclick="javascript:buttonpress(5,0)">New Window</button> &nbsp;&nbsp;
<button id="btn5b" class="is_off" onclick="javascript:buttonpress(5,1)">Popup Window</button>
<p style="margin-top:-2px"></p>

<input type=checkbox id="mov5m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov5n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov5a" name="chk5"> Raw&nbsp;
<input type=radio id="mov5b" name="chk5" checked><button onclick="javascript:toggle_hls(5,0)"
  class="wrapper" id="hls5">Wrapper</button><input type=radio id="mov5c" name="chk5"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop5"></div>
<h2 id="vid5" class="msgbox" onclick="javascript:popper(5,1)">No Video</h2>
<iframe id="mov5" name="mov5" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadid(5,1)">Play URL</button>
<button onclick="javascript:urlcopy(5)">Copy</button>
<button onclick="javascript:digid(5)"><b_>DIG</b_></button>

<input type=text id="line5" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line5')" onblur="javascript:input_onblur('line5')">

<input type=text id="meta5" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="copy" id="stk5-1" onclick="javascript:copylist(5,1)">Stack 1</button>
<button class="copy" id="stk5-2" onclick="javascript:copylist(5,2)">Stack 2</button>
<button class="copy" id="stk5-3" onclick="javascript:copylist(5,3)">Stack 3</button>
&nbsp;
<button class="copy" id="stk5-4" onclick="javascript:copylist(5,4)">BitChute</button>
<button class="copy" id="stk5-5" onclick="javascript:copylist(5,5)">Vimeo</button>
<button class="copy" id="stk5-6" onclick="javascript:copylist(5,6)">InfoWars</button>
</p>

<div id="test" style="width: 90vw; height: 250.5px"></div>

<!--
/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////
//-->

<h3 id="news" style="margin-bottom:10px"><r_>News & Propaganda</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#info">Info viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#news">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr6z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr6x" class="static" disabled>
<button onclick="javascript:brightness(6,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr6y" class="static" disabled>
<button onclick="javascript:brightness(6,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadnews(6,0)">Play ID</button>
<button onclick="javascript:reset_frame(6)">Clear</button>
<p></p>

<input type=text id="id6" maxlength=256 class="idspec" onfocus="javascript:hidelist(6)"
  onclick="javascript:input_onclick('id6')" onblur="javascript:input_onblur('id6')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk6" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src6" class="dropdown dropdown2">
  <option value=0  class="w">YouTube / Invidious
  <option value= 1  >+ mp4 - Fox
  <option value= 2  >+ mp4 - ABC
  <option value= 3  >? m3u - CBS
  <option value= 4  >+ mp4 - CNBC
  <option value= 5  >? mp4 - CNN
  <option value= 6  >? m3u - C-SPAN
  <option value= 7  >+ mp4 - MS/NBC
  <option value= 8  >+ m3u - PBS
  <option value= 11 >+ mp4 - CBC
  <option value= 12 >+ mpd - CTV
  <option value= 13 >+ mp4 - Global
  <option value= 14 >+ mp4 - TVO
  <option value= 21 >+ mpd - BBC
  <option value= 24 >? m3u - Press TV
  <option value= 22 >+ mp4 - Al Jazeera
  <option value= 25 >+ mp4 - Bloomberg
</div></div>

<p><span class="box">
<input type=checkbox id="mov6f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov6p" checked> Use Proxy
</span></p>

<div><div id="fmt6" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win6" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn6a" class="is_off" onclick="javascript:buttonpress(6,0)">New Window</button> &nbsp;&nbsp;
<button id="btn6b" class="is_off" onclick="javascript:buttonpress(6,1)">Popup Window</button>
<p style="margin-top:-2px"></p>

<input type=checkbox id="mov6m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov6n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov6a" name="chk6"> Raw&nbsp;
<input type=radio id="mov6b" name="chk6" checked><button onclick="javascript:toggle_hls(6,0)"
  class="wrapper" id="hls6">Wrapper</button><input type=radio id="mov6c" name="chk6"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop6"></div>
<h2 id="vid6" class="msgbox" onclick="javascript:popper(6,1)">No Video</h2>
<iframe id="mov6" name="mov6" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadnews(6,1)">Play URL</button>
<button onclick="javascript:urlcopy(6)">Copy</button>
<button onclick="javascript:dignews(6)"><b_>DIG</b_></button>

<input type=text id="line6" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line6')" onblur="javascript:input_onblur('line6')">

<input type=text id="meta6" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="copy" id="stk6-1" onclick="javascript:copylist(6,11)">Stack 1</button>
<button class="copy" id="stk6-2" onclick="javascript:copylist(6,12)">Stack 2</button>
<button class="copy" id="stk6-3" onclick="javascript:copylist(6,13)">Stack 3</button>
&nbsp;
<button class="copy" id="stk6-4" onclick="javascript:copylist(6,14)">Fox</button>
<button class="copy" id="stk6-5" onclick="javascript:copylist(6,15)">PBS</button>
<button class="copy" id="stk6-6" onclick="javascript:copylist(6,16)">BBC</button>
</p>

<div style="width: 90vw; height: 250px"></div>

<!--
////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////
//-->

<h3 id="free"><r_>FREE Movies & TV</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#movies">Movie Sites</a> or <a href="#sites">Info/News</a>
  &nbsp; | &nbsp; <a href="#free">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr7z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr7x" class="static" disabled>
<button onclick="javascript:brightness(7,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr7y" class="static" disabled>
<button onclick="javascript:brightness(7,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadmovie(7,0)">Play ID</button>
<button onclick="javascript:reset_frame(7)">Clear</button>
<p></p>

<input type=text id="id7" maxlength=256 class="idspec" onfocus="javascript:hidelist(7)"
  onclick="javascript:input_onclick('id7')" onblur="javascript:input_onblur('id7')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk7" class="dropdown dropdown1">
  <option value="" class="w">Select a radio/TV stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src7" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 >+ m3u - TubiTV
  <option value= 2 >+ m3u - VidNode
  <option value= 3 >? mp4 - 123Movies
  <option value= 5 >? m3u - UniqueStream
  <option value= 4 >? mp4 - PagalMovies
  <option value= 8 ># mp4 - XHamster
  <option value= 10 class="b">? mp4 - General DIG
  <option value= 16 class="r"># mp4 - ClipWatching
  <option value= 15 class="r"># m3u - CloudVideo
  <option value= 12 class="r"># mp4 - GoUnlimited
  <option value= 19 class="r"># mp4 - MixDrop
  <option value= 20 class="r"># m3u - StreamVid
  <option value= 17 class="r"># m3u - UpStream
  <option value= 14 class="r"># mp4 - VideoBin
  <option value= 13 class="r"># mp4 - VidLox
  <option value= 18 class="r"># mp4 - Vidoza
  <option value= 11 class="r"># mp4 - XStream
  <option value= 31 class="b">+ mp3 - AudioRealm
</div></div>

<p><span class="box">
<input type=checkbox id="mov7f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov7p" checked> Use Proxy
</span></p>

<div><div id="fmt7" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win7" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn7a" class="is_off" onclick="javascript:buttonpress(7,0)">New Window</button> &nbsp;&nbsp;
<button id="btn7b" class="is_off" onclick="javascript:buttonpress(7,1)">Popup Window</button>
<p style="margin-top:-2px"></p>

<input type=checkbox id="mov7m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov7n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov7a" name="chk7"> Raw&nbsp;
<input type=radio id="mov7b" name="chk7" checked><button onclick="javascript:toggle_hls(7,0)"
  class="wrapper" id="hls7">Wrapper</button><input type=radio id="mov7c" name="chk7"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop7"></div>
<h2 id="vid7" class="msgbox" onclick="javascript:popper(7,1)">No Video</h2>
<iframe id="mov7" name="mov7" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadmovie(7,1)">Play URL</button>
<button onclick="javascript:urlcopy(7)">Copy</button>
<button onclick="javascript:digmovie(7)"><b_>DIG</b_></button>

<input type=text id="line7" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line7')" onblur="javascript:input_onblur('line7')">

<input type=text id="meta7" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="copy" id="stk7-1" onclick="javascript:copylist(7,-21)">Radio</button>
<button class="copy" id="stk7-2" onclick="javascript:copylist(7,-22)">Dance</button>
&nbsp;
<button class="copy" id="stk7-3" onclick="javascript:copylist(7,-23)">TV US1</button>
<button class="copy" id="stk7-4" onclick="javascript:copylist(7,-24)">TV US2</button>
<button class="copy" id="stk7-5" onclick="javascript:copylist(7,-25)">TV US3</button>
&nbsp;
<button class="copy" id="stk7-6" onclick="javascript:copylist(7,-26)">TV UK+</button>
<button class="copy" id="stk7-7" onclick="javascript:copylist(7,-27)">TV Alt</button>
&nbsp;
<button class="copy" id="stk7-8" onclick="javascript:copylist(7,-28)">Int'l 1</button>
<button class="copy" id="stk7-9" onclick="javascript:copylist(7,-29)">Int'l 2</button>
</p>

<div style="width: 90vw; height: 250px"></div>

<!--
//////////////////////////
///// INTERNET RADIO /////
//////////////////////////
//-->

<h1 style="text-align:center"><r_>Internet Radio</r_></h1>

<div align=center>
<button onclick="javascript:ir_action(0)">Stop</button>
<button onclick="javascript:ir_action(1)">Pause</button>
<button onclick="javascript:ir_action(2)">Play</button>&nbsp;
<input type=text value="Stopped" size=9 class="static" id="ir_status" disabled>&nbsp;
<button onclick="javascript:ir_action(3)" class="is_off" id="ir_popup">Popup</button>
&nbsp; <r_>Volume</r_> :&nbsp;
<button onclick="javascript:ir_action(4)" style="font-size:13px;padding-top:0">&lt;</button>
<input type=text value="50" size=3 class="static" id="ir_volume" disabled>
<button onclick="javascript:ir_action(5)" style="font-size:13px;padding-top:0">&gt;</button>
</div>
<p>
<table class="list ir" style="width:100%;margin-top:-2px;padding-bottom:2px">

 <tr><th>Talk Radio
</th><th>Cool Music
</th><th>Funky Music
</th><th>Just Garbage
</th><th>More Garbage
</th></tr><tr>

<td><input type=radio name="ir" onclick="javascript:radio
  ('https://streaming-ent.shoutcast.com/foxnews')"><a target=_blank
    href='https://radio.foxnews.com/'>Fox News Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://radio.talkradio.co.uk/stream')"><a target=_blank
    href='https://radio2you.co.uk/talkradio/schedule'>Talk Radio UK</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://17813.live.streamtheworld.com/KTIEAM_SC')"><a target=_blank
    href='https://am590theanswer.com/'>Conservative Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://216.240.133.178:3005/;')"><a target=_blank
    href='http://republicbroadcasting.org/program-schedule/'>Republic Broadcasting</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://mediaserver3.afa.net:8443/talk.mp3')"><a target=_blank
    href='https://afr.net/podcasts/afr-program-lineup/'>American Family Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://edge2-b.exa.live365.net/a81754')"><a target=_blank
    href='https://www.goodtalkradio.com/radio-program-schedule/'>Good Talk Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.infowars.com/;')"><a target=_blank
    href='https://www.infowars.com/watch-alex-jones-show/'>InfoWars Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://18593.live.streamtheworld.com/BLZE_1AAC.aac')"><a target=_blank
    href='https://www.theblaze.com/st/radio'>The Blaze Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://s2.radio.co/s572ad25f7/listen')"><a target=_blank
    href='http://redstatetalkradio.com/radio-schedule/'>Red State Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamer.radio.co/s43edd6852/listen')"><a target=_blank
    href='https://thefringe.fm/schedule/'>The Fringe FM</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://tfrlive.net:8000/stream')"><a target=_blank
    href='https://tfrlive.com/listen-live/'>Truth Frequency Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://live1.darkmatterdigitalnetwork.com:8303/stream')"><a target=_blank
    href='http://darkmatterdigitalnetwork.com/'>Dark Matter Digital</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://darnwi.com:8000/stream')"><a target=_blank
    href='http://darnwi.com/live-stream-2/'>Devil's Advocates Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://ice8.securenetsystems.net/VARIETY')"><a target=_blank
    href='https://www.voiceamerica.com/#home-schedule'>Voice America</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://cast.bbstalkradio.com/proxy/bbsradio?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 1</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://cast.bbstalkradio.com/proxy/bbsradio2?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 2</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://85.25.43.55/rock_classics.mp3')">Star FM Rock Classics
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://91.121.222.81:8416/listen.mp3')">Rock Radio Beograd
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://shoutcastunlimited.com:8890/;')">Lynx Classic Rock
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://jamfm.hoerradar.de/jamfm-mp3-128')">Jam FM Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://62.210.10.4:8928/stream/1/')">Gem Radio New Wave
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://149.56.183.178:8090/;')">Retro Hits
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.dancewave.online:8080/dance.mp3')">Dance Wave
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://192.99.18.107:8106/;')">Salsa Mexico
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamingp.shoutcast.com/hotmixradio-dance-128.mp3')">Hot Mix Dance
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://nl1.lounge-radio.com:8010/;')">Lounge Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://fr3.1mix.co.uk:8000/stats/;')">1Mix Radio Trance
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://centova.radioservers.biz:8021/;')">Starlite Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel1.mp3')">Virtual DJ: ClubZone
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel2.mp3')">Virtual DJ: TheGrind
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel3.mp3')">Virtual DJ: Hypnotica
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel4.mp3')">Virtual DJ: PowerBase
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://janus.cdnstream.com:5140/live')">Radio Free Americana
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://sc01.warpradio.com:8212/;')">Smooth Jazz Expressions
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://109.123.116.202:8016/;')">Venice Classic Radio Italia
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://tropicalisima.org:9002/;')">Tropicalisma FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://lin3.ash.fastserv.com:6026/stream_96')">Rockabilly Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://91.121.91.172:9414/;stream/1')">Dandelion Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi.entranced.fm:80/;')">Entranced FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://46.105.118.14:17500/;')">Spexx FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1_mf_q')">BBC Radio 1
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1xtra_mf_q')">BBC Radio 1-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio2_mf_q')">BBC Radio 2
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio3_mf_q')">BBC Radio 3
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4fm_mf_q')">BBC Radio 4
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4extra_mf_q')">BBC Radio 4-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio5live_mf_q')">BBC Radio 5-Live
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_6music_mf_p')">BBC Radio 6-Music
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://server-14.stream-server.nl:8300/;')">Nashville FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://shoutcast.countrypowerstation.net:8000/;')">Country Power Station
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamingp.shoutcast.com/hotmixradio-hiphop-128.mp3')">Hot Mix Hip-hop
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://s10.voscast.com:8872/;')">Wu World Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('8tilKaOINmE')"><g_>Danheim: <i>Mannavegr</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('RM_J5cFy70M')"><g_>Audiomachine: <i>Decimus</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('w6MiJUTZ6n8')"><g_>Classic Rock - Greatest Hits</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('https://el-dorado.stream.laut.fm/el-dorado')">Radio El Dorado
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://111.223.51.7:8000/;stream/1/')">COOL fahrenheit
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bluford.torontocast.com:8519/;')">Asia Dream Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi5.streamingsoundtracks.com:80/;')">Streaming Sound Tracks
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://136.0.17.26:8000/;')">Radio Africa Online
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://195.154.217.103:8123/;')">Radio Mi Amigo Int'l
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://jakarta.nagaswarafm.com:8088/stream')">Nagaswara FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://46.105.118.14:7550/;')">BeMyRadio Schlager
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://174.37.159.206:8118/;')">iRie Rockers
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://162.244.80.106:8108/;')">Tune Disney Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://94.23.148.11:8130/;')">SRC FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://217.146.71.146:8000/live2')">Rahva Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('I-opRM8v0p8')"><g_>Johnny Cash</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('JMmpmHdnXK4')"><g_>Creedence Clearwater Revival</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('kW0Fy88ilEs')"><g_>Beatles: <i>White Album</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

</table>

<div align=center style="font-size:8px">
<p><audio id="internet_radio" controls style="width:85vw;height:45px"
  onerror="javascript:ir_action(-2)"></audio>

<p><input type=text class="urlspec" id="ir_url"
  onclick="javascript:input_onclick('ir_url')" onblur="javascript:input_onblur('ir_url')">

<p style="font-size:initial">
<a href="#info">Info</a>&nbsp; | &nbsp;<a href="#news">News</a>&nbsp; | &nbsp;<a href="#free">Movies</a>

</div><div style="width:90vw;height:calc((100vh - 640px) * 0.55)"></div>

</body>

<!--
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="https://reference.dashif.org/dash.js/v2.5.0/dist/dash.all.min.js"></script>
<script src="https://players.akamai.com/hls/dist/hls.min.js"></script>

HLS version downgraded because latest version does not play Akamai videos
DASH version upgraded to latest version (3.0.1) as of December 2019
January 26: DASH downgraded to 2.9.3 because failing on some videos (3.0.0 has an issue with webm).
<script src="http://localhost:8080/hls.min.js"></script>
<script src="http://localhost:8080/dash.all.min.js"></script>
//-->

<script src="https://cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js"></script>
<script src="https://reference.dashif.org/dash.js/v2.9.3/dist/dash.all.min.js"></script>
<script id="cryptojs"></script>  <!-- dynamically loaded script -->
<script>

/////////////////////////
///// User Settings /////
/////////////////////////

var invidious_site = [
  "https://invidio.us",			// default
  "https://invidio.us",
  "https://invidious.snopyta.org"
];

var invidious_url = invidious_site [0];

//  "https://invidiou.sh",		// no livestream + bot blocker
//  "https://yewtu.be",			// api blocked
//  "https://invidious.ggc-project.de", // no livestream
//  "https://viraltube.my"		// broken

// these are non-functional
//  "https://invidious.mastodon.host",
//  "https://invidious.kabi.tk",
//  "https://invidious.enkirton.net",
//  "https://watch.nettohikari.com",
//  "https://invidious.drycat.fr",
//  "https://invidious.13ad.de",
//  "https://invidious.nixnet.xyz",
//  "https://tube.poal.co",
//  "https://vid.wxzm.sx",
//  "https://yt.elukerio.org"

var list_1 = [
    ":NOZKLtIIUZE" , "Hitler Rant"
  , ":m_MaJDK3VNE" , "Herding Cats"
  , ":hTa1t_9HfFQ" , "Mike Hammer"
  , ":uaPKEbVypRQ" , "Typing Lesson"
  , ":0fDOdzY18XE" , "V - The Miniseries"
  , ":kJAsn_vJyY4" , "Starship Enterprise"
];

var list_2 = [
    ":We-HMZDSWFU" , "Me and You and a Dog Named Boo"
  , ":8Pa9x9fZBtY" , "Sultans of Swing"
  , ":6Ath-3JGk8M" , "Flashdance: What A Feeling"
  , ":onJspmvJr0E" , "Flashdance: Love's Theme"
  , ":FnV0LqHd3h8" , "Make America Great Again"
  , ":xB4iFysPm9Q" , "Karolina Protsenko"
];

var list_3 = [
    ":8sPWIrF0oSY" , "Jack Benny meets Perry Mason"
  , ":CGq8Ee2gOe4" , "DooM at QuakeCon"
  , ":5iV_hB08Uns" , "Boston Dynamics Robot"
  , ":0pKfxbCHLoU" , "AKB48: Sustainable"
  , ":rqU_gsBYdr0" , "Ajisai Al Ai Monogatani"
];

var list_4 = [
    "b:fmOZPrv27xs"  , "Dil Jaaniye"
  , "b:6wNFJIbTxNk"  , "Batla House"
  , "b:sSKnCoWAbDos" , "Brother Nathaniel"
  , "b:A7jZJfaEJK2p" , "Malice in the Palace"
  , "b:Ol2plIF2otcI" , "QAnon Proofs"
];

var list_5 = [
    "v:129463420" , "Miniatur Wunderland"
  , "v:166403522" , "Some Kind of Quest"
  , "v:31883614"  , "Star Trek: Aurora"
  , "v:322694559" , "Great Martian War"
  , "v:175806163" , "Martian American"
];

var list_6 = [
    "i:5d4c9fd22ec69a001858eb60" , "Alex Jones"
  , "i:5d4a339571d8e00017f8afaf" , "Owen Shroyer"
  , "i:5d4c54aae936660017aee3c0" , "Kaitlin Bennett"
];

var list_7 = [
];

var list_8 = [
];

var list_9 = [
];

var news_1 = [
];

var news_2 = [
];

var news_3 = [
];

var news_4 = [
    "fox:6041387345001" , "Steve Hilton"
  , "fox:6035600008001" , "Judge Jeanine Pirro"
];

var news_5= [
    "pbs:3007398789" , "Nova: Bird Brain (2018) [region lock]"
  , "pbs:2365338020" , "Austin City Limits: 40 Years (2014)"
  , "pbs:1946795242" , "Frontline: WikiSecrets (2011)"
];

var news_6 = [
    "bbc:p035dt58" , "Dragonfly"
  , "bbc:p076m7sh" , "Desert Art"
  , "bbc:p07bj7pv" , "Follow the Food"
];

var news_7 = [
];

var news_8 = [
];

var news_9 = [
];

var free_1 = [
    "a:" , "majic-100-7483"
  , "a:" , "chum-1045-6270"
  , "a:" , "iheartradio-top-20-7556"
  , "a:" , "the-hit-mix-7553"
  , "a:" , "z1035-7757"
  , "a:" , "canadian-rock-7552"
  , "a:" , "971-the-eagle-2241"
  , "a:" , "heavy-rock-7554"
  , "a:" , "z100-1469"
  , "a:" , "1027-kiis-fm-los-angeles-185"
  , "a:" , "y100-561"
  , "a:" , "1017-the-bull-6586"
  , "a:" , "1035-kiss-fm-849"
  , "a:" , "alt-987-los-angeles-201"
  , "a:" , "1035-ktu-1473"
  , "a:" , "1067-lite-fm-1477"
  , "a:" , "smooth-jazz-4242"
  , "a:" , "the-vinyl-experience-6878"
  , "a:" , "iheart80s-radio-5060"
  , "a:" , "lone-star-925-3379"
  , "a:" , "q1043-1465"
  , "b:clubzone"  , "Virtual DJ: ClubZone"
  , "b:thegrind"  , "Virtual DJ: TheGrind"
  , "b:hypnotica" , "Virtual DJ: Hypnotica"
  , "b:powerbase" , "Virtual DJ: PowerBase"
];

var free_2 = [
    "8:http://akaram.zecast.net/akaram-live/akarammix1/playlist.m3u8"		, "Akaram Mix (India)"
  , "0:ygUZlr8hvu8"								, "BN Music (Bosnia-Herzegovina, YT)"
  , "/1/504.1/1 8:http://vcndstv.teleosmedia.com/stream/dstv/dstv/playlist.m3u8" , "DanceStar TV (US)"
  , "8:http://azroe0x-lh.akamaihd.net/i/test_1@775856/master.m3u8"		, "Ditty TV (US)"
  , "/1/540.1/0 8:https://www.djing.com/tv/animation.m3u8"			, "DJing: Animation (UK)"
  , "/1/540.1/1 8:https://www.djing.com/tv/session_electro-rock.m3u8"		, "DJing: Electro Rock (UK)"
  , "/1/540.1/0 8:https://www.djing.com/tv/underground.m3u8"			, "DJing: Underground (UK)"
  , "/1/504.1/1 8:http://vcnindiewave.teleosmedia.com/stream/indiewave/indiewave/playlist.m3u8" , "Indie Wave (US)"
  , "8:http://bitcdn-kronehit.bitmovin.com/v2/hls/index.m3u8"			, "KroneHit TV (Austria)"
  , "8:http://186.155.200.118:1935/live/MelodyChannel/playlist.m3u8"		, "Melody Channel (Colombia)"
  , "8:http://live-edge01.telecentro.net.ar/live/smil:musictop.smil/index.m3u8" , "Music Top (Argentina)"
  , "0:HS7ulzLL034"								, "Nature TV (YouTube)"
  , "8:http://live.streams.ovh:1935/NGradio/NGradio/playlist.m3u8"		, "NG Radio (Greece)"
  , "8:https://5be019f0d8c6e.streamlock.net/ngroup/ngrp:NRJHitsTV_all/playlist.m3u8" , "NRJ Hits (France)"
  , "8:http://ocko-live.ssl.cdn.cra.cz/channels/ocko_expres/playlist.m3u8"	, "Ocko Expres (Czech Republic)"
  , "8:http://vcp1.myplaytv.com:1935/oxigenotv/oxigenotv/playlist.m3u8"		, "Oxigeno TV (US)"
  , "8:https://593b04c4c5670.streamlock.net/portalfoxmix/portalfoxmix/playlist.m3u8" , "Portal Fox Mix (Chile)"
  , "8:http://livetv.powerapp.com.tr/powertv/powerhd.smil/chunklist.sltur.m3u8"	, "Power HD (Turkey)"
  , "8:http://capital_tv-lh.akamaihd.net/i/CapitalTv_1@183098/master.m3u8"	, "Radio Capital (Italy)"
  , "8:http://wms.shared.streamshow.it/carinatv/mp4:carinatv/playlist.m3u8"	, "Radio Carina (Italy)"
  , "8:http://web.onair-radio.eu:1935/video/video/index.m3u8"			, "Reload TV (Greece)"
  , "8:http://stream.mediawork.cz/retrotv/retrotvHQ1/playlist.m3u8"		, "Retro Music (Czech Republic)"
  , "8:https://rutv.gcdn.co/streams/1410_1272/playlist.m3u8"			, "RU TV (Russia)"
  , "0:8Nm_MfbGSOQ"								, "Shuffle Dance Music (YouTube)"
  , "8:http://web.onair-radio.eu:1935/Alpha-Host/Alpha-Host/playlist.m3u8"	, "Siganos Music (Greece)"
  , "/0/576.1/0 7:https://stream-33.mazana.tv:443/slagr2.m3u"			, "Slagr 2 (Czech Republic)"
  , "8:http://cdn25.live247stream.com/steelbirdmusic/tv/playlist.m3u8"		, "Steelbird Music (India)"
  , "8:http://live.stranafm.cdnvideo.ru/stranafm/smil:stranafm.smil/playlist.m3u8" , "Strana FM (Russia)"
  , "/1/504.1/1 8:http://vcndstv.teleosmedia.com/stream/dstv/sunburn/playlist.m3u8" , "Sunburn TV (US)"
  , "8:http://186.155.200.118:1935/live/telemusica_web/index.m3u8"		, "TeleMusica (US)"
  , "8:http://online.radiodifusion.net:1935/livetv/latinoSD.stream/index.m3u8"	, "Top Latino TV (Colombia)"
  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_africa/5/prog_index.m3u8"   , "Trace Africa (France)"
  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_tropical/5/prog_index.m3u8" , "Trace Tropical (France)"
  , "8:https://content.uplynk.com/channel/36953f5b6546464590d2fcd954bc89cf.m3u8" , "VH-1 (Europe-UK)"
  , "8:http://wms.shared.streamshow.it/visualradio/mp4:visualradio/playlist.m3u8" , "Visual Radio (Turkey)"
];

var free_3 = [
    "/1/0/0/0/2/2 1a:stream=ABC 8:https://d2nt5wxzqbe1ad.cloudfront.net/out/raycom-wwsb1-hls/live.m3u8" , "ABC *++"
  , "8:https://content.uplynk.com/channel/3324f2467c414329b3b0cc5cd987b6be.m3u8" , "ABC News"
  , "/1/0/0/2/0/0 1a:stream=AMC 6a:watch/amc"					, "AMC *+*"
  , "8:http://liveproduseast.global.ssl.fastly.net/btv/desktop/us_live.m3u8"	, "Bloomberg"
  , "/1/0/0/0/2/0 1a:stream=CBS 8:http://190.80.3.28/CBS/CBS.isml/index.m3u8"	, "CBS *++"
  , "8:http://cbsn-us-cedexis.cbsnstream.cbsnews.com/out/v1/55a8648e8f134e82a470f83d562deeca/master.m3u8" , "CBS News"
  , "/1/0/0/2/0/0 1a:stream=CNBC 6a:watch/cnbc-2"				, "CNBC *+*"
  , "/1/0/0/2/0/0 1a:stream=CNN 6a:watch/cnn-2"					, "CNN *+*"
  , "8:http://etlive-mediapackage-fastly.cbsaavideo.com/live/manifest.m3u8"	, "ET Live"
  , "/1/0/0/0/2/2 1a:stream=FOX 8:http://190.80.3.28/FOX/FOX.isml/index.m3u8"	, "Fox *++"
  , "/1/0/0/2/0/0 1a:stream=FoxBusiness 6a:watch/fox-business"			, "Fox Business *+*"
  , "/1/0/0/0/540.2/0 1a:stream=FoxNews 6a:watch/fox-news-hd"			, "Fox News *+*"
  , "1a:stream=Freeform"							, "Freeform *"
  , "/1/0/0/2/0/0 1a:stream=FX 6a:watch/fx-live"				, "FX *+*"
  , "1b:stream=FXMovie"								, "FXM *"
  , "1b:stream=FXX"								, "FXX *"
  , "8:http://mgm-ssai.akamaized.net/amagi_hls_data_mgmAAAAAA-theworks/CDN/master.m3u8" , "MGM Sci-Fi"
  , "/1/0/0/2/0/0 1a:stream=MSNBC 6a:watch/msnbc"				, "MSNBC *+*"
  , "/1/0/0/0/2/2 1a:stream=NBC 8:http://190.80.3.28/NBC/NBC.isml/index.m3u8"	, "NBC *++"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumo-nbcnewsnow/CDN/master.m3u8" , "NBC News"
  , "/1/0/0/0/0/2 1a:stream=OAN 7a:one-america-news"				, "OAN *+*"
  , "/1/0/0/2/0/0 1a:stream=PBS 8:http://190.80.3.28/PBS/PBS.isml/index.m3u8"	, "PBS *++"
  , "/0.1/0.1/0.1 7:http://live-poptv-fastly-prod.global.ssl.fastly.net/pop/master.m3u8" , "Pop TV"
  , "8:https://dotstudio.vo.llnwd.net/v1/livestreams/popstar/master/ec9207ed6819582289cfdc7569d8065cc8aca126/Popstar_-_Frequency/playlist.m3u8"
    , "PopStar!"
  , "1b:stream=SundanceTV"							, "Sundance *"
  , "/1/0/0/2/0/0 1a:stream=SYFY 6a:watch/syfy"					, "Syfy *+*"
  , "/1/0/0/2/0/0 1a:stream=TBS 6a:watch/tbs"					, "TBS *+*"
  , "/1/0/0/2/0/0 1a:stream=CW 6a:watch/the-cw"					, "The CW *++*"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-tmz/CDN/master.m3u8" , "TMZ"
  , "/1/0/0/2/0/0 1a:stream=TNT 6a:watch/tnt"					, "TNT *+*"
  , "/1/0/0/2/0/0 1a:stream=USANetwork 6a:watch/usa-network"			, "USA Network *+*"
  , "8:http://voa-lh.akamaihd.net/i/voa_mpls_tvmc6@320298/master.m3u8"		, "Voice of America"
  , "1b:stream=WETV"								, "We TV *"
  , "8:http://weather-lh.akamaihd.net/i/twc_1@92006/master.m3u8"		, "Weather Channel"
  , "8:http://cdnapi.kaltura.com/p/931702/sp/93170200/playManifest/entryId/1_oorxcge2/format/applehttp/protocol/http/uiConfId/28428751/a.m3u8"
    , "WeatherNation TV"
];

var free_4 = [
    "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-adventuresportsnetwork/CDN/master.m3u8"
    , "Adventure Sports"
  , "/1/0/0/2/0/0 1b:stream=DIY 6a:watch/diy-network"				, "DIY Network *+*"
  , "8:https://imgedge.akamaized.net/amagi_hls_data_imgAAA2AA-edgesports/CDN/playlist.m3u8" , "EDGE Sport"
  , "8:http://bozztv.com/36bay2/gin/giniko_fashionone_800kb_36bay2/index.m3u8" , "Fashion One"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-food52/CDN/master.m3u8" , "Food 52"
  , "/1/0/0/2/0/0 1c:stream=HGTV 6a:watch/hgtv"					, "HGTV *+*"
  , "8:http://1111296894.rsc.cdn77.org/LS-ATL-56868-1/index.m3u8"		, "Hunt Channel"
  , "8:http://23.137.224.180:1935/roku/_definst_/myStream/playlist.m3u8"	, "Kool TV"
  , "8:http://ott.mobcrush.com/hls/0/ott.m3u8"					, "Mobcrush"
  , "1b:stream=MotorTrend"							, "Motor Trend *"
  , "8:http://edge1.tikilive.com:1935/unrestricted_tikilive/25947/amlst:NWKlw6jwyXpz/index.m3u8" , "Outdoor Cooking"
  , "8:http://rbmn-live.akamaized.net/hls/live/590964/BoRB-AT/master.m3u8"	, "Red Bull TV"
  , "8:https://d2klx6wjx7p5vm.cloudfront.net/Rooster-teeth/ngrp:Rooster-teeth_all/playlist.m3u8" , "Rooster Teeth"
  , "8:http://tastemadessai.akamaized.net/amagi_hls_data_tastemade-tastemade/CDN/master.m3u8" , "Tastemade"
  , "8:http://trinity-lh.akamaihd.net/i/ttmain_d@82127/master.m3u8"		, "Tastytrade"
  , "8:http://content.uplynk.com/channel/1831163f97674328ad9f4b4814ed39c5.m3u8" , "TBD (Sinclair)"
  , "8:http://83.222.173.94:1935/tvart/tvart/playlist.m3u8"			, "TVArt Live (Bulgaria)"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/1524/streams/live/iphone/playlist.m3u8" , "TWiT"
  , "8:http://web.onair-radio.eu:1935/wixlar/wixlar/playlist.m3u8"		, "Wixlar TV"
  , "8:https://wfcint.mediacdn.ru/cdn/wfcint/playlist.m3u8"			, "World Fashion Channel"
  , "8:http://vcnxcorps.teleosmedia.com/stream/xcorps/xcorps/playlist.m3u8"	, "Xcorps TV"
  , "8:http://gideommd.mmdlive.lldns.net/gideommd/d5b6a753f86e4e51b8e15c7d23887a4f/manifest.m3u8" , "You Too America"
  , "1b:stream=ESPN"								, "ESPN 1 *"
  , "1b:stream=ESPN2"								, "ESPN 2 *"
  , "/1/0/0/2/0/0 1b:stream=FS1 6a:watch/fox-sports-1"				, "Fox Sports 1 *+*"
  , "/1/0/0/2/0/0 1b:stream=FS2 6a:watch/fox-sports-2-fs2-live"			, "Fox Sports 2 *+*"
  , "1c:stream=GOLF"								, "Golf Channel *"
  , "/1/0/0/2/0/0 1b:stream=NBA 6a:watch/nba-tv"				, "NBA TV *+*"
  , "/1/0/0/2/0/0 1b:stream=NBCSN 6a:watch/nbc-sports-network-nbcsn"		, "NBC Sports *+*"
  , "/1/0/0/2/0/0 1c:stream=NFL 6a:watch/nfl-network"				, "NFL Network *+*"
  , "/1/0/0 6a:watch/nhl-network"						, "NHL Network **"
  , "/0/432.1/0 7:http://ott-live.olympicchannel.com/out/u/OC1_3.m3u8"		, "Olympic Channel"
  , "8:http://bcovlive-a.akamaihd.net/6b4f1a5aed2b46d6a139e3cb83f8dc42/us-east-1/5994000126001/8036529875f74c81b5f50851bffbc421/playlist_ssaiM.m3u8"
    , "Stadium TV"
  , "8:https://playoutengine.sinclairstoryline.com/playout/9f87522c-5a0e-4ff4-b82c-d5564216132f.m3u8" , "Tennis Channel"
  , "/1/0/0/2/0/0 1b:stream=WWE 6a:watch/wwe-network"				, "WWE Network *+*"
];

var free_5 = [
    "8:http://hlsdpi-cdn-chqtx02.totalstream.net/dpilive/247retro/ret/dai/playlist.m3u8" , "24/7 Retro TV"
  , "/1/0/0 6a:watch/ahc-american-heroes-channel"				, "American Heroes **"
  , "8:http://170.178.189.66:1935/live/Stream1/playlist.m3u8"			, "American Horrors"
  , "8:*,,*http://video.blivenyc.com/broadcast/prod/2061/22/desktop-playlist.m3u8" , "American Kennel Club *"
  , "/1/0/0/2/0/0 1c:stream=Animal 6a:watch/animal-planet"			, "Animal Planet *+*"
  , "8:http://livecdnh3.tvanywhere.ae/hls/boomerang/index.m3u8"			, "Boomerang (UK)"
  , "/1/0/0/2/0/0 1c:stream=CN 6a:watch/cartoon-network-2"			, "Cartoon Network *+*"
  , "8:http://classicarts.global.ssl.fastly.net/live/cas/master.m3u8"		, "Classic Arts Showcase"
  , "1c:stream=Comedy"								, "Comedy Central *"
  , "8:http://content.uplynk.com/channel/87c82188ea944bcb961c34236b9648b0.m3u8" , "Court TV"
  , "8:https://cbsta49f-dabl68fc.global.ssl.fastly.net/out/v1/dfecb53fbf434b6bbbfd91d8a2549381/manifest.m3u8"
    , "Dabl Lifestyle"
  , "/1/0/0/2/0/0 1c:stream=Discovery 6a:watch/discovery-channel"		, "Discovery Channel *+*"
  , "1c:stream=Disney"								, "Disney Channel *"
  , "8:http://livecdnh3.tvanywhere.ae/hls/docubox/index.m3u8"			, "Docubox Live"
  , "8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-docuramaA/CDN/master.m3u8" , "Docurama Channel"
  , "8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-dovenow/CDN/master.m3u8" , "Dove Channel"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmriseclassictv/CDN/master.m3u8"
    , "FilmRise Classic TV"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmrisefreemovies/CDN/master.m3u8"
    , "FilmRise Free Movies"
  , "1c:stream=HMM"								, "Hallmark Movies & Mysteries *"
  , "/1/0/0/2/0/0 1c:stream=HBO 6a:watch/hbo"					, "HBO - Home Box Office *+*"
  , "/1/0/0/2/0/0 1c:stream=History 6a:watch/history-channel"			, "History Channel *+*"
  , "1b:stream=HLN"								, "HLN - Headline News *"
  , "/1/0/0/2/0/0 1c:stream=ID 6a:watch/investigation-discovery"		, "Investigation Discovery *+*"
  , "8:http://dai2.xumo.com/amagi_hls_data_xumo1234A-lawcrime/CDN/master.m3u8"	, "Law & Crime"
  , "1b:stream=LifetimeM"							, "Lifetime Movies *"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo_people/index.m3u8"		, "Nat Geo People (UK)"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo_wild/index.m3u8"		, "Nat Geo Wild (UK)"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo/index.m3u8"			, "National Geographic (UK)"
  , "/1/0/0/2/0/0 1c:stream=Nickelodeon 6a:watch/nickelodeon"			, "Nickelodeon *+*"
  , "/1/0/0/2/0/0 1b:stream=Science 6a:watch/science-channel"			, "Science Channel *+*"
  , "/1/504.1/1 8:http://vcnleomarkstudios.teleosmedia.com/stream/leomarkstudios/screamfest/playlist.m3u8" , "Scream Fest"
  , "/1/0/0/2/0/0 1c:stream=Showtime 6a:watch/showtime"				, "Showtime *+*"
  , "1c:stream=TCM"								, "TCM - Turner Classic Movies *"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-theasylum/CDN/master.m3u8" , "The Asylum"
  , "8:http://184.173.179.163:1935/victorytelevisionnetwork/victorytelevisionnetwork/playlist.m3u8" , "Victory TV"
];

var free_6 = [
    "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=14"		, "BBC 1"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=25"		, "BBC 2"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=27"		, "BBC News"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=2"		, "Channel 4"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=22"		, "Channel 5"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=1817"	, "ITV 1+1"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=1820"	, "ITV 2+1"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=1823"	, "ITV 3+1"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=1826"	, "ITV 4+1"
  , "0:9Auq9mYxFEE"								, "Sky News UK (YT)"
  , "8:https://stream.skynewsarabia.com/hls/sna.m3u8"				, "Sky News Arabia"
  , "8:http://securecontributions.sechls01.visionip.tv/live/securecontributions-securecontributions-spotlighttv-hsslive-25f-SD/master.m3u8"
    , "Spotlight TV"
  , "8:http://csm-e.cds1.yospace.com/csm/live/74246610.m3u8"			, "TG 4 (Ireland)"
  , "8:http://live.alsace20.fr/live/alsace20/ngrp:alsace20_all/playlist.m3u8"	, "Alsace 20 (France)"
  , "/0/0/1 7:https://tv5pacifiqueen-i.akamaihd.net/hls/live/630175-b/tv5pacifiqueen/tv5pacifique_eng_1200.m3u8"
    , "TV 5 Pacifique (France)"
  , "8:http://mv2.tvfrancophonie.org/live/Stream1/index.m3u8"			, "TV Francophonie (France)"
  , "8:http://streamcast.oc3n.net:1935/TVPI/myStream700.sdp/live.m3u8"		, "TVPI (France)"
  , "8:http://static.france24.com:80/live/F24_EN_HI_HLS/live_tv.m3u8"		, "France 24 - English"
  , "8:http://static.france24.com:80/live/F24_FR_HI_HLS/live_tv.m3u8"		, "France 24 - French"
  , "8:http://static.france24.com:80/live/F24_AR_HI_HLS/live_tv.m3u8"		, "France 24 - Arabic"
  , "8:https://abc-iview-mediapackagestreams-2.akamaized.net/out/v1/6e1cc6d25ec0480ea099a5399d73bc4b/index.m3u8"
    , "ABC News (Australia)"
  , "/0/540.1/0/2/0/0 7:http://livecbcdai-i.akamaihd.net/hls/live/567245/event2/CBCNN/master1.m3u8" +
      " 7:**https://gnome.cdn.livenewschat.eu/hls/cbc_live/index.m3u8"		, "CBC News (Canada) +*"
  , "/0/540.1/0 7:http://cbclivedai5-i.akamaihd.net/hls/live/567235/event2/CBOT/master1.m3u8" , "CBOT (Ottawa)"
  , "8:**https://www.streamaway.net/us/ctvnews/index.m3u8"			, "CTV News **"
  , "8:**https://www.streamaway.net/us/space/index.m3u8"			, "CTV Sci-Fi (Space) **"
  , "8:**https://www.streamaway.net/us/ctv/index.m3u8"				, "CTV 1 **"
  , "8:**https://www.streamaway.net/us/ctv2/index.m3u8"				, "CTV 2 **"
  , "8:**https://www.streamaway.net/us/city/index.m3u8"				, "City TV **"
  , "8:**https://www.streamaway.net/us/global/index.m3u8"			, "Global TV **"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/623607/15364602001/tvokids/master.m3u8" , "TVO Kids"
  , "8:http://teleqmmd.mmdlive.lldns.net/teleqmmd/f386e3b206814e1f8c8c1c71c0f8e748/master.m3u8" , "Tele-Quebec"
  , "8:https://2-fss-2.streamhoster.com/pl_138/201748-1282640-1/playlist.m3u8"	, "Newfoundland TV"
  , "8:http://knstream1.azureedge.net/knlive/knlive.m3u8"			, "Knowledge Network (BC)"
];

var free_7 = [
    "8:https://live-hls-web-aje.getaj.net/AJE/index.m3u8" , "Al Jazeera"
  , "/0/576.1/0 7:https://live.cgtn.com/500/prog_index.m3u8"			, "CGTN News"
  , "/0/576.1/0 7:https://livedoc.cgtn.com/500d/prog_index.m3u8"		, "CGTN Documentary"
  , "8:https://nhkworld.webcdn.stream.ne.jp/www11/nhkworld-tv/global/2003458/live.m3u8" , "NHK World Japan"
  , "8:https://live2.presstv.com/liveprs/smil:liveprs.smil/playlist.m3u8"	, "Press TV"
  , "8:http://rt-news-gd.secure2.footprint.net/1103.m3u8"			, "RT News"
  , "8:http://rt-doc-gd.secure2.footprint.net/1101.m3u8"			, "RT Documentary"
  , "8:http://d7g1ebft2592.cloudfront.net/mblivev3/480p/playlist.m3u8"		, "TeleSUR"
  , "8:http://tv-trtworld.live.trt.com.tr/master.m3u8"				, "TRT World"
  , "0:rVH3vmpoOVA"								, "Channels TV (Nigeria, YT)"
  , "8:http://live.chdrstatic.com/cbn/primary/index.m3u8"			, "Cheddar News"
  , "8:http://live.chdrstatic.com/cheddar/index.m3u8"				, "Cheddar Business"
  , "8:http://edge.free-speech-tv-live.top.comcast.net/out/u/fstv.m3u8"		, "Free Speech TV"
  , "8:http://nmxlive.akamaized.net/hls/live/529965/Live_1/index.m3u8"		, "NewsMax TV"
  , "8:http://broadcastny.yournewsnet.com:8081/master/newsnetweb/playlist.m3u8" , "NewsNet Live"
  , "8:http://tyt-ssai.akamaized.net/amagi_hls_data_tytnetwor-tytxumo/CDN/master.m3u8" , "TYT - The Young Turks"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream-infostream/_definst_/live.m3u8" , "InfoWars Live"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream2-infostream2/_definst_/live.m3u8" , "InfoWars 2"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream3-infostream3/_definst_/live.m3u8" , "InfoWars 3"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream5-infostream5/_definst_/live.m3u8" , "InfoWars 5"
  , "8:https://w1.013.gostreaming.tv/Knesset/myStream/playlist.m3u8" , "Knesset Channel"
  , "8:http://bcliveunivsecure-lh.akamaihd.net/i/un150_A1_1@575439/master.m3u8" , "UN Web TV"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC1_1@500806/master.m3u8" , "C-SPAN 1"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC2_1@500807/master.m3u8" , "C-SPAN 2"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC3_1@500808/master.m3u8" , "C-SPAN 3"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680602/1242843915001_1/master.m3u8" , "CPAC - English"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680604/1242843915001_3/master.m3u8" , "CPAC - French"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680603/1242843915001_2/master.m3u8" , "CPAC - Bilingual"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253565/NASA-NTV1-Public/master.m3u8" , "NASA Official **"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253566/NASA-NTV2-Media/master.m3u8" , "NASA Media **"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/6540154/streams/live/iphone/playlist.m3u8" , "NASA Official"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/10414700/streams/live/iphone/playlist.m3u8" , "NASA Media"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/17074538/streams/live/iphone/playlist.m3u8" , "NASA ISS"
];

var free_8 = [
    "8:http://ebsonair.ebs.co.kr:1935/ebs2familypc/familypc1m/index.m3u8"	, "EBS-2 (South Korea)"
  , "8:http://rthklive2-lh.akamaihd.net/i/rthk32_1@168450/master.m3u8"		, "RTHK-32 (Hong Kong)"
  , "0:gIB2egm7tL8" 								, "Kompas TV (Indonesia, YT)"
  , "8:https://1345225764.rsc.cdn77.org/LS-50041-SIN-2/index.m3u8"		, "PNN (Cambodia)"
  , "0:vCDDYb_M2B4" 								, "CCTV-4 (China, YT)"
  , "/0/576.1/0 7:*,,*http://zhibo.hkstv.tv/livestream/mutfysrq/playlist.m3u8"	, "HKS TV (China) *"
  , "/0/1/0 7:http://live.ntdimg.com/live400/playlist.m3u8"			, "NTD (US-China)"
  , "8:http://103.14.38.107:1935/live/mnb.stream/playlist.m3u8"			, "MNB (Mongolia)"
  , "8:http://kazakhtvru.ultraiptv.com/live_ru/playlist.m3u8"			, "Kazakh TV (Kazakhstan)"
  , "8:http://iptv.tapesh.tv/tapesh/playlist.m3u8"				, "PBC Tapesh (US-Iran)"
  , "8:http://dmisxthvll.cdn.mangomolo.com/dubaitv/smil:dubaitv.stream.smil/playlist.m3u8" , "Dubai TV (UAE)"
  , "8:https://tv-trtturk.live.trt.com.tr/master.m3u8"				, "TRT Turk (Turkey)"
  , "8:http://bozztv.com/36bay2/gin/giniko_armenia1tv_800kb_36bay2/index.m3u8"	, "Public TV Armenia"
  , "8:http://live-echotv.cdnvideo.ru/echotv/echotv.sdp/playlist.m3u8"		, "Echo TV (Russia)"
  , "8:http://hls.mirtv.cdnvideo.ru/mirtv-parampublish/mirtv3_2500/playlist.m3u8" , "Mir TV (Russia)"
  , "8:http://tvchannelstream1.tvzvezda.ru/cdn/tvzvezda/playlist.m3u8"		, "Zvezda TV (Russia)"
  , "0:knwFB2fiNrQ" 								, "Lubelska TV (Poland, YT)"
  , "8:https://slagrtv-live-hls.ssl.cdn.cra.cz/channels/slagrtv/playlist.m3u8"	, "Slagr TV (Czech Republic)"
  , "8:https://nn.geo.joj.sk/live/jojplus-index.m3u8"				, "JOJ Plus (Slovakia)"
  , "/0/0/1 7:http://stream.fs1.tv:8080/hls/webstream.m3u8"			, "FS1 Salzburg (Austria)"
  , "8:http://rfo.iptv-playoutcenter.de:1935/rfo/rfo.stream_2/playlist.m3u8"	, "RFO (Germany)"
  , "8:http://livestartover.atresmedia.com/antena3/master.m3u8"			, "Antena-3 (Spain)"
  , "8:http://b2everyrai-lh.akamaihd.net/i/rai5_1@182695/master.m3u8"		, "Rai-5 (Italy)"
  , "8:http://b2everyrai-lh.akamaihd.net/i/raigulp_1@66350/master.m3u8"		, "Rai-Gulp (Italy)"
  , "8:http://live.streams.ovh:1935/tvfilopoli/tvfilopoli/playlist.m3u8"	, "TV Filopoli (Greece)"
  , "8:http://cdnamd-hls-globecast.akamaized.net/live/ramdisk/al_aoula_inter/hls_snrt/al_aoula_inter.m3u8"
    , "Al Aoula (Morocco)"
  , "8:http://ss6.domint.net:2082/202_str/orbittv/playlist.m3u8"		, "Orbit TV (Dominican Republic)"
  , "8:http://558bd16067b67.streamlock.net/nos_pais_24_7/smil:livestream.stream.smil/playlist.m3u8"
    , "Nos Pais (Curacao)"
  , "8:http://d2ajt1gpdtnw25.cloudfront.net/mbliveMain/480p/playlist.m3u8"	, "TeleSUR (Venezuela)"
  , "8:http://mdstrm.com/live-stream-playlist/5a7b1e63a8da282c34d65445.m3u8"	, "Multimedios Costa Rica"
  , "8:http://cdn.elsalvadordigital.com:1935/wowtv/wowtv/playlist.m3u8"		, "Wow! TV (El Salvador)"
  , "/0/0/1 8:http://live.canaloncelive.tv:1935/livepkgr2/smil:internacional.smil/playlist.m3u8" , "Canal Once (Mexico)"
  , "8:http://streamingcws20.com:1935/lobodurango/videolobodurango/playlist.m3u8" , "TV Lobo (Mexico)"
  , "1b:stream=Telemundo"							, "Telemundo (US) *"
  , "1b:stream=Univision"							, "Univision (US) *"
];

var free_9 = [
    "8:http://unlimited1-us.dps.live/atv/atv.smil/playlist.m3u8"		, "Antofagasta TV (Chile)"
  , "/1/0/0 7:http://cdnh4.iblups.com/hls/OVJNKV4pSr.m3u8"			, "Chicos iPe (Peru)"
  , "8:http://tv02.logicahost.com.br:1935/itutv/itutv/live.m3u8"		, "Canal ITV (Brazil)"
  , "8:https://v7.ciclano.io:1443/tvmar/tvmar/playlist.m3u8"			, "TV Mar (Brazil)"
  , "8:http://wse5.player.tv.br:1935/tvmcj/tvmcj/playlist.m3u8" , "TV MCJ (Brazil)"
  , "/0/0/1 8:https://wowzaprod133-i.akamaihd.net/hls/live/577385/a1e0ad3f/playlist.m3u8" , "Mello TV (Jamaica)"
  , "8:http://bozztv.com/36bay2/gin/giniko_rts1_900kb_36bay2/index.m3u8"	, "RTS-1 (Senegal)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti1.smil/playlist.m3u8" , "RTI-1 (Ivory Coast)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti2.smil/playlist.m3u8" , "RTI-2 (Ivory Coast)"
  , "8:http://bozztv.com/36bay2/gin/giniko_jordan_900kb_36bay2/index.m3u8"	, "Jordan TV"
  , "/0/1/0 7:http://roya-live.ercdn.net/roya/roya_480p.m3u8"			, "Roya TV (Jordan)"
  , "8:http://mn-nl.mncdn.com/fanatik_livestream/smil:fanatik.smil/playlist.m3u8" , "Fanatik Sports (Turkey)"
  , "8:http://wms.shared.streamshow.it:1935/supertv/supertv/live.m3u8"		, "Super TV (Italy)"
  , "8:http://cld03wz.tv2000.it/tv2000_main.m3u8"				, "TV 2000 (Italy)"
  , "8:https://rmtv24hweblive-lh.akamaihd.net/i/rmtv24hweben_1@300662/master.m3u8" , "Real Madrid TV (Spain)"
  , "8:https://tvo.vedge.infomaniak.com/livecast/tvo/playlist.m3u8"		, "TV Ostschweiz (Switzerland)"
  , "8:https://5857499ee635b.streamlock.net/radiowesertv-live/_definst_/mp4:livestreamTV/playlist.m3u8"
    , "Radio Weser TV (Germany)"
  , "8:http://unilivemtveu-lh.akamaihd.net/i/mtvno_1@346424/master.m3u8"	, "MTV (Norway)"
  , "/0/540.1/0 7:http://mrlive.1tvcrimea.ru:8080/1tvcrimea.m3u8"		, "Crimea TV (Russia)"
  , "8:http://tnv.bonus-tv.ru/cdn/tnvplanet/index.m3u8"				, "Planeta TNV (Russia)"
  , "8:http://live.ugratv.cdnvideo.ru/ugratv/smil:ugrastream1.smil/playlist.m3u8" , "Ugra TV (Russia)"
  , "8:http://stream1.rtkit.com:1935/rtk4stream/rtk4.stream/playlist.m3u8"	, "RTK-4 (Kosovo)"
  , "/0/540.1/0 7:http://85.132.81.184:8080/arbkepez/live/index.m3u8"		, "Kepez TV (Azerbaijan)"
  , "/0/576.1/0 7:http://stream.tvkujawy.pl:8080/live/broadcast.m3u8"		, "TV Kujawy (Poland)"
  , "8:http://livecdnh3.tvanywhere.ae/hls/duck/index.m3u8"			, "Duck TV (Slovakia)"
  , "8:https://nn.geo.joj.sk/live/joj-index.m3u8"				, "JOJ (Slovakia)"
  , "/406.1/0/0 7:http://alpha.tv.online.tm/hls/ch007_720/index.m3u8"		, "Turkmenistan TV"
  , "8:http://akaram.zecast.net/akaram-live/akaramnew2/playlist.m3u8"		, "Akaram TV (India)"
  , "8:http://akaram.zecast.net/akaram-live/akaramkidz/playlist.m3u8"		, "Akaram Kidz (India)"
  , "8:http://bozztv.com/36bay2/gin/giniko_angeltv_900kb_36bay2/index.m3u8"	, "Angel TV (India)"
  , "/0/1/1 8:http://thaipbs-live.cdn.byteark.com/live/playlist.m3u8"		, "Thai PBS (Thailand)"
  , "8:https://rtb-channel.glue.live/smil:rtb1/chunklist.m3u8"			, "RTB Sukmaindera (Brunei)"
  , "8:http://rthklive1-lh.akamaihd.net/i/rthk31_1@167495/master.m3u8"		, "RTHK-31 (Hong Kong)"
  , "8:http://ebsonair.ebs.co.kr/groundwavefamilypc/familypc1m/master.m3u8"	, "EBS-1 (South Korea)"
  , "8:http://ebsonair.ebs.co.kr:1935/ebsutablet500k/tablet500k/playlist.m3u8"	, "EBS Kids (South Korea)"
];

/*

  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_naija/5/prog_index.m3u8"    , "Trace Naija (France)"
  , "/1/540.1/0 8:https://www.djing.com/tv/classics.m3u8"			, "DJing: Classics (UK)"  
  , "/1/540.1/0 8:https://www.djing.com/tv/dancefloor.m3u8"			, "DJing: Dance Floor (UK)"
  , "/0/1/0 7:http://jiocgehub.jio.ril.com/Dsports_HD/Dsports_HD_800.m3u8"	, "Discovery Sport"
  , "8:http://147.174.13.196/live/live.m3u8"					, "Southeastern Channel"
  , "8:http://wgntribune-lh.akamaihd.net/i/WGNPrimary_1@304622/master.m3u8"	, "WGN Tribune"
  , "8:http://runway-hls.secdn.net/runway-live/play/runway/playlist.m3u8"	, "Runway TV"
  , "8:http://flash8.streaming.xdevel.com/taorminatv/taorminatv/playlist.m3u8"	, "Radio Taormina (Italy)"
  , "/0/540.1/0 7:http://weblive.hebtv.com/live/hbws_bq/index.m3u8"		, "Hebei TV (China)"

  , "8:http://45.126.83.51/dr9445/h/h16/index.m3u8"				, "Blue Ant Entertainment"
  , "8:http://nancy-webtv.vedge.infomaniak.com/livecast/nancy-webtv/playlist.m3u8" , "Nancy Web TV (France)"
  , "/0/1/0 7:https://live-edge-sxb-1.cdn.enetres.net/9E9557EFCEBB43A89CEC8FBD3C500247022/llive-500/index.m3u8"
    , "TeleValencia (Spain) ??"
    "8:http://aljazeera-eng-hd-live.hls.adaptive.level3.net/aljazeera/english2/index.m3u8" , "Al Jazeera"
  , "8:http://streamengine.wosn.tv:1935/live/WOSNLive_1/playlist.m3u8"		, "West Ohio Sports Network"
  , "8:http://mn-nl.mncdn.com/blutv_aspor/smil:aspor_hd.smil/playlist.m3u8"	, "A Spor HD (Turkey)"

  , "/404.1/0/0 3a:id=205" , "CFTO (Toronto) *"
  , "/404.1/0/0 3a:id=207" , "City TV (Toronto) *"
  , "/404.1/0/0 3a:id=205" , "CTV News *"
  , "/404.1/0/0 3a:id=208" , "TV Ontario *"

https://d2nt5wxzqbe1ad.cloudfront.net/out/raycom-wwsb1-hls/live.m3u8  abc
https://d28avce4cnwu2y.cloudfront.net/v1/manifest/61a556f78e4547c8ab5c6297ea291d6350767ca2/Mux/37f5dd6d-5713-4998-8354-8c6675612b42/0.m3u8 stadium tv
*http://cbsnewshd-lh.akamaihd.net/i/CBSNHD_7@199302/master.m3u8
*http://skydvn-nowtv-atv-prod.skydvn.com/atv/skynews/1404/live/index.m3u8
http://ebsonair.ebs.co.kr/plus3familypc/familypc1m/playlist.m3u8
https://content.uplynk.com/channel/92c7be9fb47143a58683d202e321e571.m3u8 court tv

https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=1019 Cheer Channel
http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo123-contv/CDN/master.m3u8

*/

////////////////////////////////
///// End of User Settings /////
////////////////////////////////

var head = "<!DOCTYPE html><html><head><meta charset='utf-8'>" +
           "<title>Downloader</title></head><body><h2>Downloader</h2>";

var tail = "</body></html>", download_doc = head + tail;

var last_h = last_w = last_raw = last_time = the_time = busy = 0;
var cors_bypass = cors_kraker = error = "", vidwin = null;
var freetv = new Object (), cookies = new Object ();
var response, textData, jsonData;
var event_time, dropdown;

var dump_all = function ()
{
  // shut down streams
  clear_video (5); clear_video (6); clear_video (7); ir_action (0);
  // destroy iframes so browser won't try to reload them on page refresh
  clear_frame (5); clear_frame (6); clear_frame (7);
}
////////////////////

var testit = function ()
{
  var win = document.getElementById ("test"); var txt = win.style.height;
  if (txt == "250px") txt = "250.5px"; else txt = "250px";
  win.style.height = txt; window.location = "#info";
}

var clear_frame = function (frame)
{
  var win = document.getElementById ("mov" + frame); win.parentNode.removeChild (win);
}
////////////////////

var load_all = function ()
{ 
  init_box ("proxy"); load_boxes (5); load_boxes (6); load_boxes (7); resize_all ();
}
////////////////////

var load_boxes = function (frame)
{
  init_box ("ctr" + frame + "z"); init_box ("fmt" + frame);
  init_box ("stk" + frame); init_box ("src" + frame); init_box ("win" + frame);
}
////////////////////

var resize_all = function()
{
  resize_frame ("info"); resize_frame ("news"); resize_frame ("free");
}
////////////////////

var resize_frame = function (name)
{
  var win = document.getElementById (name).nextElementSibling;
  win = win.firstElementChild.firstElementChild.children;
  var a = win [0].clientWidth, b = win [2].clientWidth;
  win [2].style.width = (a < 290 && b < 30) ? "0" : "35vw";
}
////////////////////

var init_box = function (name)
{
  var win = document.getElementById (name), list = win.children;
  var panel = win.parentNode.firstElementChild.nodeName == "DIV";
  win.onclick = function(event) { listpick (event.target, panel); }

  var m = 0, val = "", txt = list[0].innerText;

  for (var n = 0; n < list.length; n++) if (list[n].hasAttribute ("checked")) m = n;

  val = list[m].value; txt = list[m].innerText; list[m].classList.add ("mark");

  win.value = val; if (panel) return;

  var doc = win.parentNode.firstElementChild; doc.value = txt;
  doc.nextElementSibling.addEventListener ("click", function(){ listbox (this); });
}
////////////////////

var listbox = function (item)
{
  var box = item.nextElementSibling, doc = box.classList; doc.toggle ("show");
  if (dropdown && box != dropdown) dropdown.classList.remove ("show");
  event_time = 0; dropdown = doc.contains ("show") ? box : null;

  var w = item.clientWidth + item.parentNode.firstElementChild.clientWidth + 4;
  box.style.minWidth = w + "px";
}
////////////////////

var listpick = function (item, panel)
{
  var list = item.parentNode.children; if (item.nodeName == "DIV") return;

  for (var n = 0; n < list.length; n++) if (list[n].classList.contains ("mark"))
  {
    list[n].classList.remove ("mark"); break;
  }

  item.classList.add ("mark"); item.parentNode.value = item.value;
  if (!panel) item.parentNode.parentNode.firstElementChild.value = item.innerText;
}
////////////////////

var MEOW = function (event)
{
  if (event.type != "click" && event.type != "keydown") return;

  if (dropdown && event_time > 0 && event_time != event.timeStamp)
  {
    dropdown.classList.remove ("show"); dropdown = null;
  }
  event_time = event.timeStamp;
} 
////////////////////

var copylist = function (frame, num)
{
  var name, list, box, item, val, txt, i, j;

  var iptv = num < 0; if (iptv) num = -num; if (!num) return;

  if (num < 10)
  {
    name = "video";
    if (num == 1) list = list_1; else
    if (num == 2) list = list_2; else
    if (num == 3) list = list_3; else
    if (num == 4) list = list_4; else
    if (num == 5) list = list_5; else
    if (num == 6) list = list_6; else
    if (num == 7) list = list_7; else
    if (num == 8) list = list_8; else
    if (num == 9) list = list_9; else return;
  }
  else if (num < 20)
  {
    name = "video"; num -= 10;
    if (num == 1) list = news_1; else
    if (num == 2) list = news_2; else
    if (num == 3) list = news_3; else
    if (num == 4) list = news_4; else
    if (num == 5) list = news_5; else
    if (num == 6) list = news_6; else
    if (num == 7) list = news_7; else
    if (num == 8) list = news_8; else
    if (num == 9) list = news_9; else return;
  }
  else if (num < 30)
  {
    name = "station"; num -= 20;
    if (num == 1) list = free_1; else
    if (num == 2) list = free_2; else
    if (num == 3) list = free_3; else
    if (num == 4) list = free_4; else
    if (num == 5) list = free_5; else
    if (num == 6) list = free_6; else
    if (num == 7) list = free_7; else
    if (num == 8) list = free_8; else
    if (num == 9) list = free_9; else return;
  }
  else return;

  box = document.getElementById ("stk" + frame); item = box.children;

  for (i = item.length - 1; i > 0; i--) box.removeChild (item [i]);

  for (i = 0, j = 1; i < list.length; i += 2, j++)
  {
    txt = list [i+1];
    if (!(val = list [i])) val = txt; 
    if (val [0] != "~") if (iptv) val = "~" + val;
    if (val [val.length - 1] == ":") val = val + txt;
    box.appendChild (new Option ("[" + (j < 10 ? "0" : "") + j + "] " + txt, val));
  }

  list = document.getElementById ("stk" + frame + "-" + num).innerText;
  name = "Select a " + name + " (" + list + ")";

  item[0].innerText = box.parentNode.firstElementChild.value = name;
  box.value = 0; popper (frame, 0);
}
////////////////////

var select_site = function (frame, value)
{
  var doc = document.getElementById ("src" + frame);
  var box = doc.parentNode.firstElementChild;
  doc.value = value; doc = doc.children;

  for (var n = 0; n < doc.length; n++)
    if (doc [n].value == value) box.value = doc [n].innerText;
}
////////////////////

var hidelist = function (frame)
{
  var doc = document.getElementById ("stk" + frame);
  var box = doc.children[0]; doc.value = box.value;
  doc.parentNode.firstElementChild.value = box.innerText;
}
////////////////////

var toggle_hls = function (frame, state)
{
  if (state < 0) return;

  var doc = document.getElementById ("hls" + frame);
  var hls = doc.checked; if (hls == undefined) hls = 0;

  var txt = "Wrapper"; if (++hls > 2) hls = 0; if (state > 0) hls = state - 1;
  if (hls == 1) txt = "M3U8"; else if (hls == 2) txt = "DASH";

  doc.checked = hls; doc.innerHTML = txt;

  if (!state) document.getElementById ("mov" + frame + "b").checked = true;
}
////////////////////

var buttonpress = function (frame, num)
{
  var id1, id2, doc1, doc2, chk, txt;

  id1 = "btn" + frame + "a"; id2 = "btn" + frame + "b";

  doc1 = document.getElementById (num ? id2 : id1);
  doc2 = document.getElementById (num ? id1 : id2);

  chk = doc1.checked; doc1.checked = !chk;
  doc1.className = (chk ? "is_off" : "is_on");
  doc2.checked = false; doc2.className = "is_off";
}
////////////////////

var brightness = function (frame, mode)
{
  var LVL = document.getElementById ("ctr" + frame + "x");
  var SAT = document.getElementById ("ctr" + frame + "y");
  var win = document.getElementById ("mov" + frame);
  var vid = win.contentDocument;

  var lvl = LVL.value.substr (5) * 1;
  var sat = SAT.value.substr (5) * 1;
  var con, lo = -9, hi = 9;

  if (mode == 1) if ((lvl -= 1) < lo) lvl = lo;
  if (mode == 2) if ((lvl += 1) > hi) lvl = hi;
  if (mode == 3) if ((sat -= 1) < lo) sat = lo;
  if (mode == 4) if ((sat += 1) > hi) sat = hi;
  if (mode == 5)
  {
    var x = LVL.step, y = SAT.step, z = lvl || sat;
    if (z) { LVL.step = lvl; lvl = 0; } else lvl = x ? x : 0;
    if (z) { SAT.step = sat; sat = 0; } else sat = y ? y : 0;
  }

  LVL.value = "Brt:  " + (lvl > 0 ? "+" : "") + lvl;
  SAT.value = "Sat:  " + (sat > 0 ? "+" : "") + sat;

  lvl = lvl * 0.075; lvl = (2 + lvl) * lvl * 0.555 + 1.0;
  sat = sat * 0.075; sat = (2 + sat) * sat * 0.778 + 1.0;

  con = (8 - lvl * (5 - lvl)) * (3 + sat) / 16; sat = sat * (3 - lvl) / 2;

  lvl = lvl.toFixed (2); sat = sat.toFixed (2); con = con.toFixed (2);
  lvl = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
  if (!vid || !(vid = vid.getElementById ("video"))) vid = win;
  vid.style.filter = win.value = lvl;
}
////////////////////

var urlcopy = function (frame)
{
  if (!document.getElementById ("mov" + frame + "m").checked)
  {
    document.getElementById ("line" + frame).select();
    document.execCommand ("copy"); return;
  }
  popper (frame, 2);
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var is_busy = function (frame)
{
  if (busy) return 1;
  document.getElementById ("vid" + frame).innerHTML = "Busy";
  busy = 1; error = ""; return 0;
}
////////////////////

var no_fail = function (frame)
{
  if (busy) toggle_hls (frame, busy); else
  {
    document.getElementById ("vid" + frame).innerHTML = "Error";
    if (error != "") document.getElementById ("id" + frame).value = "err: " + error;
    no_format (frame);
  }
  var Busy = busy; busy = 0; return (Busy);
}
////////////////////

var stream_all = function (frame, type)
{
  if (busy) busy = type + 1;
  if (type < 2) return (!document.getElementById ("mov" + frame + "f").checked);
  return 1;
}
////////////////////

var reset_frame = function (frame)
{
  clear_video (frame); ir_action (-1); busy = 0;
}
////////////////////

var clear_video = function (frame)
{
  loadwindow ("", frame, ""); popper (frame, 3);
  brightness (frame, 0); vid_info (frame, 0, 0, 1);
  document.getElementById ("meta" + frame).step = 0;
}
////////////////////

var setup_cors = function (frame)
{
  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);
}
////////////////////

var get_time = function ()
{
  the_time = Date.now() / 500; return (the_time);
}

////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////

var loadid = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "b") src = 1;
      if (doc == "v") src = 2;
      if (doc == "i") src = 3;
      if (doc == "e") src = 4;
      if (doc == "d") src = 5;
      if (doc == "n") src = 7;

      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url,-12))) req_bitchute (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -9))) req_vimeo (url, frame, fmt); else
  if (src == 3  && (url = getid (url, 24))) req_infowars (url, frame, fmt); else
  if (src == 13 && (url = getid (url,-16))) req_liveleak (url, frame, fmt); else
  if (src == 4  && (url = getid (url,  0))) req_brighteon (url, frame, fmt); else
  if (src == 5  && (url = getid (url, -7))) req_dailymotion (url, frame, fmt); else
  if (src == 7  && (url = getid (url, 10))) req_natfilmbrd (url, frame, fmt); else
  if (src == 26 && (url = getid (url, 13))) req_periscope (url, frame, fmt); else
  if (src == 30 && (url = getid (url,  8))) req_jwplayer (url, frame, fmt); else
  if (src == 24 && (url = getid (url, -9))) req_soundcloud (url, frame, fmt); else
  if (src == 25 && (url = getid (url,  8))) req_iheartradio (url, frame, fmt); else
  if (src == 21 && (url = getid (url,-19))) req_twitter (url, frame, fmt); else

  if (src == 20) load_brightcove ("", url, "", frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

var getid = function (url, len)
{
  if (!len) return (url);

  tst = url.substr (url.length - 5, 5);
  var n = tst.search ("\\."); if (n < 0) n = tst.search ("/");
  if (n >= 0) url = url.substr (0, url.length + n - 5);

  if ((tst = url.search ("\\*")) >= 0) return (url.substr (tst+1));
  if (!len) return (url);

  if (len < 0)
  {
    len = -len;
    if (url.length < len - 2) return "";
    if (url.length == len - 2) return url;
    if (url.length == len - 1) return url;
    if (url.length == len) return url;

    url = url.substr (url.length - len, len);
    if ((len = url.search ("/")) > 1) url = "";
    if (len < 0 && (len = url.search ("=")) > 1) url = "";
    if (len < 0 && (len = url.search ("-")) > 1) url = "";

    if (len >= 0) url = url.substr (len + 1);
    return url;
  }

  if (url.length < len) return "";
  if (url.length == len) return url;

  url = url.substr (url.length - len, len);
  if (url.search ("/") >= 0) url = "";
  if (url.search ("=") >= 0) url = "";
  return url;
}
////////////////////

var request = function (id, frame, fmt)
{
  if (document.getElementById ("mov" + frame + "c").checked)
  {
    var url = "https://www.youtube.com/embed/" + id;
    if (!busy) loadwindow (url, frame, "youtube: " + id);
    return;
  }

  var src = document.getElementById ("ctr" + frame + "z").value;

  if (src == 10) if (fmt < 0) src = 0; else { request_youtube (id, frame, -fmt); return; }
  if (src == 11) if (fmt < 0) src = 0; else { request_youtube (id, frame, fmt); return; }

  if (!src && cors_kraker) { request_youtube (id, frame, fmt); return; }

  invidious_url = invidious_site [src]; request_invidious (id, frame, (fmt < 0 ? -fmt : fmt));
}
////////////////////

const request_invidious = async (id, frame, fmt) =>
{
  var i, j, n, f = [0,0,0,0,0,0,0,0];

  var tag = "invidious"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = invidious_url + "/api/v1/videos/" + id + "?fields=formatStreams,hlsUrl";

try
{
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var sub = jsonData.formatStreams; if (!sub) throw ("!!!"); n = sub.length;

  for (i = 0; i < n; i++)
  {
    if ((j = argformat (sub[i].itag)) >= 0) f[j] = i + 1;
  }
    
  if ((n = getformat (f, fmt)))
  {
    fmt = n; fixformat (f, frame); n = f[argformat(n)] - 1;
    url = (sub[n].url.search ("&gcr=") > 0) ? "local=true&" : "";  // geo-restricted?
    url = invidious_url + "/latest_version?" + url + "itag=" + fmt + "&id=" + id;
  }
  else   // live stream
  {
    url = jsonData.hlsUrl; if (!url) throw ("!!!");
    if (url.substr (0,1) == "/") url = invidious_url + url;
    sub = url = url + "?local=true";

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const request_youtube = async (id, frame, fmt) =>
{
  var i, j, n, s, sub, dat, key, sig;
  var f = [0,0,0,0,0,0,0,0,0,0], d = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_bypass + "https://www.youtube.com/get_video_info?video_id=" + id + "&el=";

try
{
  response = await fetch (url + "leanback");
  textData = await response.text();

  s = "%22itag%22"; sub = textData.split (s);

  if (sub.length < 2)
  {
    response = await fetch (url + "previewpage");
    textData = await response.text();

    sub = textData.split (s); if (sub.length < 2) throw ("!!!");
  }

  for (i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.search ("%3A") != 0) continue;
    s = url.substr (3, url.search ("%2C") - 3);
    if ((j = argformat (s)) >= 0) f[j] = i;
    if ((j = isdashfmt (s)) >= 0)
      if (url.search ("index") > 0 || url.search ("_live_") > 0) d[j] = i;
  }

  if (fmt < 0)
  {
    if (!d[8]) d[0] = d[1] = d[2] = 0;
    if (!d[9]) d[4] = d[5] = d[6] = 0;
    fmt = -fmt; n = getformat (d, fmt);
    if (cors_kraker) if (n) { f = d; tag = ""; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0 || !(n = f[n])) throw ("!!!");

  s = yt_split (sub[n]); dat = s.split ("|"); url = dat[0]; sig = dat[1];

  if (sig.length > 99)  // some videos require a signature; usually 105 or 109 bytes long
  {
    response = await fetch (cors_bypass + "https://www.youtube.com/embed/" + id);
    textData = await response.text();

    url = textData.substr (textData.search ("base\\.js") - 100, 107);
    url = url.substr (url.search ('src=') + 5);
/*
    if (url.search ("/s/player/") == 0 && !(url = cookies [(s = url)]))
    {
      response = await fetch (cors_bypass + "https://www.youtube.com/watch?v=" + id);
      textData = await response.text();
      url = textData.substr (textData.search ("en_US/base\\.js") - 100, 113);
      url = cookies [s] = url.substr (url.search ('src=') + 5);
    }
*/
    if (!(key = cookies [url]))
    {
      response = await fetch (cors_kraker + "https://www.youtube.com" + url);
      textData = await response.text();

      key = yt_algo (textData); cookies [url] = key;
    }
    eval (key); url = dat[0] + "&sig=" + sig;
  }

  if (!tag)
  {
    if ((i = argformat (fmt)) < 4) j = 8; else j = 9;
    s = yt_split (sub [f[j]]) + "|" + dat[2];
    var dat = s.split ("|"); j = j & 1;

    sig = dat[1];
    if (sig) { eval (key); sig = "&sig=" + sig; }
    sig = dat[0] + sig;

    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
      "<a href='" + sig + "'>Audio</a> &nbsp;" +
      "<a href='" + url + "'>Video</a>" + tail;

    s = url.substr (url.search ("&dur=") + 5); s = s.substr (0, s.search ("&")) * 1;
    var v = dat[2] + "," + dat[3]; var w = "wanna_boot_dash";

    if (!s)
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url, { method: 'GET' } );
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";

    s = s + "|" + (j ? "audio/webm" : "audio/mp4") + "|" + (j ? "opus" : "mp4a.40.2");
    s = s + "|" + (j ? "video/webm" : "video/mp4") + "|" + (j ? "vp9" : "avc1.4d401e");
    s = s + "|" + v + "|" + tag + "|" + sig + "|" + url + "|";

    await fetch (cors_kraker + w, { method: 'POST', body: s } );
    url = cors_kraker + "_" + w + "_" + tag;
    tag = "yt-dash"; stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var yt_split = function (t)
{
  var n, p, q, s;

  n = t.search ("%7D%5D");
  s = t.substr (0, (n < 0 ? t.length : n));
  s = s.replace (/%5Cu0026/g, "&");
  s = s.replace (/%25/g, "%");
  s = s.replace (/%25/g, "%");
  s = decodeURIComponent (s);

  n = s.search ("&s="); if (n < 0) n = s.search ('"s=');

  if (n < 0) p = ""; else
  {
    p = s.substr (n + 3, 300);
    n = p.search ("&"); if (n > 0) p = p.substr (0, n);
    n = p.search ('"'); if (n > 0) p = p.substr (0, n);
  }

  q = s.replace (/\\/g, "");
  n = q.search ("\\]");  if (n > 0) q = q.substr (0, n);
  q = q.split ('"start":"');

  if (q.length < 3) q = ""; else
  {
    q[1] = q[1].substr (0, q[1].search ('"\\}'));
    q[2] = q[2].substr (0, q[2].search ('"\\}'));
    q[1] = q[1].replace ('","end":"', "-");
    q[2] = q[2].replace ('","end":"', "-");
    q = q[1] + "," + q[2];
  }

  s = s.substr (s.search ("http")); s = s.substr (0, s.search ('"'));
  n = s.search ("&sp="); if (n > 0) s = s.substr (0, n);
  n = s.search ("&s=");  if (n > 0) s = s.substr (0, n);

  return (s + "|" + p + "|" + q);
}

var yt_algo = function (data)
{
  var i, j, n, s, v;

  for (i = 0; i < 3; i++)
  {
    j = data.search ('a=a\\.split\\(""\\)'); if (j < 0) return "";
    s = data.substr (j + 14, 300); if ((n = s.search ("a\\.join")) > 0) break;
    if (i > 1) return ""; data = data.substr (j + 1);
  }
  s = s.substr (0, n - 7);
  v = "var " + s.substr (0, 2) + "=\\{";
  if ((n = data.search (v)) < 0) return "";

  v = data.substr (n, 300); v = v.substr (0, v.search ("\\};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

const req_bitchute = async (id, frame, fmt) =>
{
  var tag = "bitchute"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.bitchute.com/embed/" + id + "/";

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vimeo = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "vimeo"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.vimeo.com/video/" + id + "/config";

try
{
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  if (jsonData.request == undefined)   // privacy lock, go long way around
  {
    response = await fetch (cors_bypass + "https://vimeo.com/" + id);
    textData = await response.text();

    var s = '"config_url":"';
    var n = textData.search (s); if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    url = url.replace (/\\/g, "");

    response = await fetch (cors_bypass + url);
    jsonData = await response.json();
  }

  if (!(url = jsonData.request.files.progressive))  // https://vimeo.com/378870053 live stream
  {
    if (!(url = jsonData.request.files.hls)) throw ("!!!");
    if (!(url = jsonData.request.files.hls.cdns)) throw ("!!!");
    if (!(s = url.fastly_live)) s = url.akamai_live; url = s.url;
    if (cors_kraker) url = cors_kraker + "~" + url;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();
      url = response.url;

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }
  else
  {
    for (i = 0; i < url.length; i++)
    {
      k = url[i].quality; k = k.substr (0, k.search ("p"));
      if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
    }
    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = url[j].height; if ((url = url[j].url) == undefined) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_infowars = async (id, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vod-api.infowars.com/embed/" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'downloadUrl="';
  var n = textData.search (s);

  if (n < 0) url = ""; else
  {
    url = textData.substr (n + s.length, 100);
    url = url.substr (0, url.search ('"'));
  }

  download_doc = head + "InfoWars download link: ";

  if (url.search ("http") == 0)
    download_doc = download_doc + "<a href='" + url + "'>" + url + "</a>" + tail; else
    download_doc = download_doc + "Not available" + tail;

  s = '<source src="';
  n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_liveleak = async (id, frame, fmt) =>
{
  var tag = "liveleak"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.liveleak.com/e/" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.search ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 1000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.search ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_brighteon = async (id, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  var url = getid (id, 36); if (!url) url = getid (id, 13);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  id = url; url = "https://www.brighteon.com/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/&#x3D;/g, "=");

  if (url.search ("m3u8") < 0) throw ("!!!");
  url = (cors_kraker ? cors_kraker + "~" : cors_bypass) + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_dailymotion = async (id, frame, fmt) =>
{
  var tag = "dailymotion"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.dailymotion.com/embed/video/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://www.dailymotion.com/player/metadata/video/" + id;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var n; url = jsonData.qualities.auto[0].url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + url);
    textData = await response.text();

    url = response.url.substr (cors_kraker.length);
    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

  n = url.search ("#"); if (n > 0) url = url.substr (0, n);  // for SMPlayer
  if (cors_kraker) url = cors_kraker + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_natfilmbrd = async (id, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdnapisec.kaltura.com/p/2081491/sp/208149100/playManifest/entryId/" + id +
    "/flavorIds/1_z997vpzn/format/applehttp/protocol/https/a.m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_twitter = async (id, frame, fmt) =>
{
  var tag = "twit"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_kraker + "*https://twitter.com*https://api.twitter.com/1.1/"; 

try
{
  if (!cors_kraker) throw ("???");

  var b = "Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h" +
    "%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw";

  var u = url + "guest/activate.json";
  response = await fetch (u, { method: 'POST', headers: { 'Authorization': b } });
  jsonData = await response.json();

  var g = jsonData.guest_token; if (!g) throw ("!!!");

  u = url + "videos/tweet/config/" + id + ".json";
  response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
  jsonData = await response.json();

  url = jsonData.track.playbackUrl; if (!url) throw ("!!!");

  if (url.search ("m3u8") > 0) if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_periscope = async (id, frame, fmt) =>
{
  var tag = "periscope"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://proxsee.pscp.tv/api/v2/accessVideoPublic?broadcast_id=" + id;

try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  if ((url = jsonData.broadcast))
  {
    var w = url.width, h = url.height;
    if (w && h && w < h) document.getElementById ("meta" + frame).step = 2;
  }

  url = jsonData.replay_url; if (!url) throw ("!!!");
  
  stream_all (frame, 1); url = cors_kraker + "~*https://www.pscp.tv,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_jwplayer = async (id, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdn.jwplayer.com/manifests/" + id + ".m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_soundcloud = async (id, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://w.soundcloud.com/player/?url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "/progressive";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  var sub = textData.substr (n - 200, 200 + s.length);
  sub = sub.substr (sub.search ('"url":"') + 7);

  n = textData.search ("/widget-"); if (n < 0) throw ("!!!");

  url = textData.substr (n - 40, 100);
  url = url.substr (url.search ('"') + 1);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("client_id"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 200);
  url = url.substr (url.search ('":"') + 3);
  url = url.substr (0, url.search ('"'));
  url = sub + "?client_id=" + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.url; if (url == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_iheartradio = async (id, frame, fmt) =>
{
  var tag = "iheartradio"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://ca.api.iheart.com/api/v2/playback/streams";

try
{
  var header = { 'Content-Type': 'application/json', 'X-User-Id': '2473436724', 'X-Session-Id': '9jhqgkoyUST8iPLzLiFtDK' };
  var data = JSON.stringify ({'contentIds':[id],'hostName':'webapp','playedFrom':0,'stationId':'','stationType':'PODCAST'});

  response = await fetch (cors_kraker + url, { method: 'POST', headers: header, body: data } );
  jsonData = await response.json();

  url = jsonData.items[0].streamUrl; if (!url) throw ("!!!");
  var n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digid = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 10) dig_test (doc, frame, fmt); else
  if (src == 3 ) dig_infowars (doc, frame, fmt); else
  if (src == 4 ) dig_brighteon (doc, frame, fmt); else
  if (src == 8 ) dig_prageru (doc, frame, fmt); else
  if (src == 6 ) dig_tedtalks (doc, frame, fmt); else
  if (src == 7 ) dig_natfilmbrd (doc, frame, fmt); else
  if (src == 21) dig_twitter (doc, frame, fmt); else
  if (src == 22) dig_facebook (doc, frame, fmt); else
  if (src == 30) dig_jwplayer (doc, frame, fmt); else
  if (src == 24) dig_soundcloud (doc, frame, fmt); else
  if (src == 23) dig_podcast (doc, frame, fmt); else

  if (src == 20) find_brightcove (doc, "", frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_test = async (doc, frame, fmt) =>
{
  var tag = "test"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
  if (doc.substr (0,4) != "http") console.log (window.atob (doc)); else
  {
    response = await fetch (url);
    textData = await response.text();
    console.log ('(' + textData + ')');
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow ("", frame, tag + ": okay");
}
////////////////////

const dig_infowars = async (doc, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; if (url.search ("infowars") < 0) url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);
  
  if (n > 0) url = textData.substr (n + s.length, 200); else
  {
    n = textData.search ('<iframe src="'); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200);

    n = url.search ("/embed/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7);
  }

  url = url.substr (0, url.search ('"'));
  if ((n = url.search ("\\?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_infowars (url, frame, fmt);
}
////////////////////

const dig_brighteon = async (doc, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/embed/"; var n = textData.search (s);
  if (n < 0) { s = '"videoKey":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_brighteon (url, frame, fmt);
}
////////////////////

const dig_prageru = async (doc, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "prageru"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:image" content="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ("poster") - 1);

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.playlist[0].sources; if (url == undefined) throw ("!!!");
 
  for (i = 0; i < url.length; i++)
  {
    if (url[i].type != "video/mp4") continue;

    k = url[i].height;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");

  fmt = url[j].height; if ((url = url[j].file) == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_tedtalks = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "tedtalks"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"nativeDownloads"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);

  s = '"medium":"http'; if ((n = url.search (s)) > 0) f[0] = n + s.length - 4;
  s = '"high":"http'; if ((n = url.search (s)) > 0) f[1] = n + s.length - 4;

  if (!f[0] && !f[1])
  {
    s = '"bitrate":180,"file":"'; if ((n = textData.search (s)) < 0) throw ("!!!");
    url = textData.substr (n, 300); f[0] = s.length;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 288;
  if (n == 1) fmt = 480;

  url = url.substr (f[n]); url = url.substr (0, url.search ('"'));

  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_natfilmbrd = async (doc, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

  var n = url.search ("\\?");
  if (n > 0) url = url.substr (0, n);
  if (doc.substr (-1) != "/") url = url + "/";
  url = url + "embed/player/";

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"entry_id": "';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ('"'));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_natfilmbrd (url, frame, fmt);
}
////////////////////

const dig_twitter = async (doc, frame, fmt) =>
{
  var tag = "twitter"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/status/";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 19);
  n = url.search ("/"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_twitter (url, frame, fmt);
}
////////////////////

const dig_facebook = async (doc, frame, fmt) =>
{
  var tag = "facebook"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:video" content="'; var n = textData.search (s);
  if (n < 0) { s = '"sd_src_no_ratelimit":"'; n = textData.search (s); }
  if (n < 0) { s = '"video_url":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_jwplayer = async (doc, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"video_id":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ('"'));
  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_jwplayer (url, frame, fmt);
}
////////////////////

const dig_soundcloud = async (doc, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "soundcloud.com/tracks/";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 12);
  if ((n = url.search ('"')) < 0) n = url.search ("/");
  if (n < 0) throw ("!!!"); url = url.substr (0, n);

  if (url.length < 6 || url.length > 9) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_soundcloud (url, frame, fmt);
}
////////////////////

const dig_podcast = async (doc, frame, fmt) =>
{
  var tag = "podcast"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"assetUrl":"'; var n = textData.search (s);         		// Apple Podcast
  if (n < 0) n = textData.search (s = 'enclosureUrl":"');		// Radio Public
  if (n < 0) n = textData.search (s = 'episodeURL: "');			// Stitcher
  if (n < 0) n = textData.search (s = '<source src="');			// Overcast
  if (n < 0) n = textData.search (s = 'data-uri="');	   		// Podbean
  if (n < 0) n = textData.search (s = 'download" href="');		// Spreaker
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  n = url.search ('"'); if (n > 0) url = url.substr (0, n);
  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixlist = function (item, doc, state)
{
  var txt = doc.children[item].text.slice (0,-1);
  if (state < 0) txt = txt + '*'; else if (state > 0) txt = txt + '+'; else txt = txt + '-';
  doc.children[item].text = txt;
}
////////////////////

var fixformat = function (f, frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]); fixlist (2, doc, f[2]);
  fixlist (3, doc, f[4]); fixlist (4, doc, f[5]); fixlist (5, doc, f[6]);

/*
  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]);
  fixlist (2, doc, f[2]); fixlist (3, doc, f[3]);
  fixlist (4, doc, f[4]); fixlist (5, doc, f[5]);
  fixlist (6, doc, f[6]); fixlist (7, doc, f[7]);
*/
}
////////////////////

var no_format = function (frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, -1); fixlist (1, doc, -1);
  fixlist (2, doc, -1); fixlist (3, doc, -1);
  fixlist (4, doc, -1); fixlist (5, doc, -1);
}
////////////////////

/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////

var loadnews = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "fox") src = 1;
      if (doc == "abc") src = 2;
      if (doc == "cnb") src = 4;
      if (doc == "msn") src = 7;
      if (doc == "pbs") src = 8;
      if (doc == "cbc") src = 11;
      if (doc == "ctv") src = 12;
      if (doc == "glo") src = 13;
      if (doc == "tvo") src = 14;
      if (doc == "bbc") src = 21;
      if (doc == "alj") src = 22;

      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, 13))) req_fox (url, frame, fmt); else
  if (src == 2  && (url = getid (url,  8))) req_abc (url, frame, fmt); else
  if (src == 4  && (url = getid (url, 10))) req_cnbc (url, frame, fmt); else
  if (src == 7  && (url = getid (url,-13))) req_msnbc (url, frame, fmt); else
  if (src == 8  && (url = getid (url, 10))) req_pbs (url, frame, fmt); else
  if (src == 11 && (url = getid (url,-13))) req_cbc (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  7))) req_ctv (url, frame, fmt); else
  if (src == 13 && (url = getid (url,  7))) req_global (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 13))) req_tvo (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  8))) req_bbc (url, frame, fmt); else
  if (src == 22 && (url = getid (url, 13))) req_aljazeera (url, frame, fmt); else
  if (src == 25 && (url = getid (url, 22))) req_bloomberg (url, frame, fmt); else

  if (src == 0 && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////
/*
https://www.foxnews.com/science/descendants-extinct-tortoise-species-galapagos
https://api.foxnews.com/v3/video-player/6025576909001
json.channel.item.media-group.media-content[0].@attributes.url
*/
const req_fox = async (id, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://video.foxnews.com/v/feed/video/" + id + ".js";

try
{
  response = await fetch (cors_kraker + src);
  jsonData = await response.json();

  if (jsonData.error != undefined)
  {
    src = "https://video.foxbusiness.com/v/feed/video/" + id + ".js";
    response = await fetch (cors_kraker + src);
    jsonData = await response.json();
  }

  if (jsonData.error != undefined) throw ("!!!");
  url = jsonData.channel.item["media-content"]["@attributes"].url;

  if (!url)
  {
    src = src.substr (src.search ("\\."));
    src = src.substr (0, src.search ("/"));
    src = "https://api" + src + "/v3/video-player/" + id;
    response = await fetch (cors_kraker + src);
    jsonData = await response.json();
    url = jsonData.channel.item["media-group"]["media-content"][0]["@attributes"].url;
    stream_all (frame, 1); if (url.search ("m3u8") < 0) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_abc = async (id, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://abcnews.go.com/video/itemfeed?id=" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  url = jsonData.channel.item["media-group"]["media-content"][2]["@attributes"].url; 

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cnbc = async (id, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/gZWlPC/media/guid/2408950221/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_msnbc = async (id, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//var url = "https://www.msnbc.com/msnbc/embedded-video/mmvo" + id;
  var url = "https://www.nbcnews.com/news/embedded-video/mmvo" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '},"videoType":'; var n = textData.search (s);
  if (n < 0) { s = '"videoType":'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n, 2000);
  var sub = url.split ('"publicUrl":"'); if (sub.length < 2) throw ("!!!");
  url = sub [sub.length - 1]; url = url.substr ('"');

  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);
  if (url == "") throw ("!!!");

  url = url.replace (/\\u002F/g, "/");
  url = url + "?mbr=true&format=smil";
	
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_pbs = async (id, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.pbs.org/portalplayer/" + id + "/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '"encodings": \\["';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 1, 200);
  url = url.substr (0, url.search ('"'));

  url = url + "?format=jsonp&callback=__jp1";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  s = '"url": "'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length);
  url = url.substr (0, url.search ('"'));

  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cbc = async (id, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/ExhSPC/media/guid/2655402169/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");

  var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_ctv = async (id, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://capi.9c9media.com/destinations/ctvnews_web/platforms/desktop/contents/" + id;
  var sub = "?%24include=%5BContentPackages%5D";

try
{ 
  response = await fetch (cors_kraker + url + sub);
  jsonData = await response.json();

  sub = jsonData.ContentPackages[0].Id;
  url = url + "/contentpackages/" + sub + "/manifest.mpd";

  stream_all (frame, 2);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_global = async (id, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://globalnews.ca/video/embed/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = 'sources":\\[\\{"file":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 200);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_tvo = async (id, frame, fmt) =>
{
  load_brightcove ("18140038001", id, "tvo", frame, fmt);
}
////////////////////

const req_bbc = async (id, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/" + id + "/format/xml/atk/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var sub = textData.split ('href="'); if (sub.length < 2) throw ("!!!");

  for (var i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.search ("https") < 0) continue;
    if (url.search ("mpd") > 0 && url.search ("gda") < 0) break;
  }

  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");

  if (url.search ("mp4") < 0) stream_all (frame, 2);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_aljazeera = async (id, frame, fmt) =>
{
  load_brightcove ("665003303001", id, "aljazeera", frame, fmt);
}
////////////////////

const req_bloomberg = async (id, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], u = [], n;

  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://www.bloomberg.com/multimedia/api/embed?id=" + id;

try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + "*" + url);
  jsonData = await response.json();
  var sub = jsonData.downloadURLs;

  if ((url = sub["600"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["700"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["800"])  != undefined) { f[1] = 540; u[1] = url; }
  if ((url = sub["1200"]) != undefined) { f[2] = 720; u[2] = url; }

  if ((n = getformat (f, fmt)))
  {
    fixformat (f, frame); n = argformat (n); fmt = f[n]; url = u[n];
  }
  else
  {
    url = jsonData.streams[0].url; if (!url) throw ("!!!");

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var dignews = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_fox (doc, frame, fmt); else
  if (src == 2 ) dig_abc (doc, frame, fmt); else
  if (src == 3 ) dig_cbs (doc, frame, fmt); else
  if (src == 4 ) dig_cnbc (doc, frame, fmt); else
  if (src == 5 ) dig_cnn (doc, frame, fmt); else
  if (src == 6 ) dig_cspan (doc, frame, fmt); else
  if (src == 7 ) dig_msnbc (doc, frame, fmt); else
  if (src == 8 ) dig_pbs (doc, frame, fmt); else
  if (src == 11) dig_cbc (doc, frame, fmt); else
  if (src == 12) dig_ctv (doc, frame, fmt); else
  if (src == 13) dig_global (doc, frame, fmt); else
  if (src == 14) dig_tvo (doc, frame, fmt); else
  if (src == 21) dig_bbc (doc, frame, fmt); else
  if (src == 24) dig_presstv (doc, frame, fmt); else
  if (src == 22) dig_aljazeera (doc, frame, fmt); else
  if (src == 25) dig_bloomberg (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_fox = async (doc, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="'; var n = textData.search (s);
  if (n < 0) { s = "video_id="; n = textData.search (s); }

  if (n > 0) url = textData.substr (n + s.length, 13); else
  {
    s = 'data-url="'; n = textData.search (s);
    if (n > 0)
    {
      url = textData.substr (n + s.length, 200);
      url = url.substr (url.search ("/v/") + 3, 13);
    }
    else
    {
      s = "redirect.mp3"; n = textData.search (s); if (n < 0) throw ("!!!");
      url = textData.substr (n + s.length + 2, 200);
      url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");
      url = "https://" + url.replace (/\\/g, "");
      busy = -busy;
    }
  }
  busy = -busy;

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    no_fail (frame); loadwindow (url, frame, tag + ": id-none");
  }
  else if (no_fail (frame)) req_fox (url, frame, fmt);
}
////////////////////

const dig_abc = async (doc, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video="'; var x = 0;
  var n = textData.search (s);

  if (n < 0) { s = 'null/video/itemfeed\\?id='; n = textData.search (s); x = 1; }
  if (n < 0) { s = s.substr (4); n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - x, 100);
  url = url.substr (0, url.search ('"'));

  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_abc (url, frame, fmt);
}
////////////////////

const dig_cbs = async (doc, frame, fmt) =>
{
  var tag = "cbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"embedUrl":"'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 300);
    url = url.substr (0, url.search ('"'));
    url = url.replace (/\\/g, "");

    if (url != doc)
    {
      if (url.search ("/live/") > 0) throw ("!!!");
      response = await fetch (cors_bypass + url);
      textData = await response.text();
    }
  }

  n = textData.search ("defaultPayload");
  if (n > 0) textData = textData.substr (n);

  s = '"video":"';
  n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  
  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cnbc = async (doc, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = "'"; var s = "'content_id' : '";
  var n = textData.search (s);

  if (n < 0)
  {
    r = '"'; s = 'data-vilynx-id="';
    n = textData.search (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search (r));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cnbc (url, frame, fmt);
}
////////////////////

const dig_cnn = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0];

  var tag = "cnn"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  s = 'data-video-id="'; n = textData.search (s);
  if (n < 0) { s = 'videoid="'; n = textData.search (s); }
  if (n < 0) { s = 'videoId":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));

  url = "https://ht.cdn.turner.com/cnn/big/" + url + ".smil";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  url = "http://ht.cdn.turner.com/" + url;

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cspan = async (doc, frame, fmt) =>
{
  var tag = "cspan"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "sources: \\[\\{file: '";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 100);
  url = url.substr (0, url.search ("'"));

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_msnbc = async (doc, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'video":{"id":"mmvo';
  var n = textData.search (s);

  if (n > 0) url = textData.substr (n + s.length, 20); else
  {
    n = textData.search ('"embedURL":');
    if (n < 0) n = textData.search ('"embedUrl":');
    if (n < 0) throw ("!!!");

    url = textData.substr (n, 200); n = url.search ("/mmvo");   // today.com
    if (n > 0) url = url.substr (n + 5);
  }

  if (n > 0)
  {
    url = url.substr (0, url.search ('"'));
    busy = -busy; if (url.length < 11 || url.length > 13) throw ("!!!");
  }
  else
  {
    s = url.substr (url.search ("/p/") + 3);
    s = s.substr (0, s.search ("/")); n = url.search ("/guid/");

    if (n < 0) { busy = -busy; n = url.search ("media/"); }
    if (n < 0) throw ("!!!");

    url = url.substr (n + 6); url = url.substr (0, url.search ("\\?"));
    if (s == "" || url == "") throw ("!!!");

    s = "https://link.theplatform.com/s/" + s + "/media/";

    if (busy < 0)
    {
  // www.nbcsports.com
      busy = -busy; url = s + url + "?format=smil";

      response = await fetch (cors_kraker + url);
      textData = await response.text();

      url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
    else
    {
  // www.nbc.com/dateline
      url = s + "guid/" + url + "/meta.smil?manifest=m3u";  // mp4 does not work

      if (stream_all (frame, 1)) fmt = 0; else
      {
        response = await fetch (url);
        textData = await response.text();

        url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
        n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
      }
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    if (!fmt) no_format (frame); no_fail (frame);
    loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
  }
  else if (no_fail (frame)) req_msnbc (url, frame, fmt);
}
////////////////////

const dig_pbs = async (doc, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<iframe src="https://player'; var n = textData.search (s);

  if (n < 0)
  {
    var r = "'"; s = "'VideoTPMediaId': '"; n = textData.search (s);
    if (n < 0) { r = '"'; s = 'data-coveid="'; n = textData.search (s); }
    if (n < 0) { r = '"'; s = 'data-coveId="'; n = textData.search (s); }
    if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search (r));
  }
  else
  {
    url = textData.substr (n, 100);
    n = url.search ("player/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7); url = url.substr (0, url.search ('"'));
    n = url.search ("/"); if (n > 0) url = url.substr (0, n);
  }

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_pbs (url, frame, fmt);
}
////////////////////

const dig_cbc = async (doc, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = '"'; var s = '"guid":"'; var n = textData.search (s);

  if (n < 0)
  {
    r = "'"; s = "'mediaId': '";
    n = textData.search (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search (r));

  if (url.length < 10 || url.length > 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cbc (url, frame, fmt);
}
////////////////////

const dig_ctv = async (doc, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search ('"'));
  }

  if (n < 0)
  {
    s = "\\); initPlayer\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length - 2, 100);
      url = url.substr (0, url.search ("\\)"));
    }
  }

  if (n < 0)
  {
    s = "getAuthStates\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 300);
      url = url.substr (0, url.search ('"'));
      sub = url.split (","); if (sub.length == 0) throw ("!!!");
      url = sub [sub.length - 1];
    }
  }

  if (n < 0)
  {
    s = "contentId: ";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.search (','));
    }
  }

  if (n < 0)
  {
    s = "currentId=";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.search ('&'));
    }
  }

  if (n < 0 || url.length != 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_ctv (url, frame, fmt);
}
////////////////////

const dig_global = async (doc, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-displayinline="';
  var n = textData.search (s);

  if (n < 0)
  {
    s = 'data-miniplayer-video="'; n = textData.search (s);
    if (n < 0) { s = '<iframe src="'; n = textData.search (s); }
    if (n < 0) throw ("!!!");
  }
  url = textData.substr (n, 100);

  s = "/playlist/"; n = url.search (s);
  if (n < 0) { s = "/embed/"; n = url.search (s); }
  if (n < 0) throw ("!!!");

  url = url.substr (n + s.length, 7);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_global (url, frame, fmt);
}
////////////////////

const dig_tvo = async (doc, frame, fmt) =>
{
  find_brightcove (doc, "tvo", frame, fmt);
}
////////////////////

const dig_bbc = async (doc, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "embed\\\\";
  var n = textData.search (s);

  if (n < 0) { s = "versionID&quot;:&quot;"; n = textData.search (s); }
  if (n < 0) { s = 'data-vpid="'; n = textData.search (s); }
  if (n < 0) { s = 'data-id="'; n = textData.search (s); }
  if (n < 0) { s = '"vpid":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 20);

  n = url.search ("\\\\"); if (n < 0) n = url.search ("&");
  if (n < 0) n = url.search ('"'); if (n != 8) throw ("!!!");

  url = url.substr (0, 8);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bbc (url, frame, fmt);
}
////////////////////

const dig_presstv = async (doc, frame, fmt) =>
{
  var tag = "presstv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<source src="'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 200);
    url = url.substr (0, url.search ('"'));
    fmt = 0; if (url == "") throw ("!!!");
  }
  else
  {
    n = textData.search ("og:video:url'"); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200); url = url.substr (url.search ("http"));
    url = url.substr (0, url.search ("'")); if (url == "") throw ("!!!");

    if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_aljazeera = async (doc, frame, fmt) =>
{
  var tag = "aljazeera"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "RenderPagesVideo\\('";
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search ("'"));
  }

  if (n < 0)
  {
    s = "RenderGeneralBCVideo\\(";
    n = textData.search (s); if (n < 0) throw ("!!!");
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search (","));
  }

  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_aljazeera (url, frame, fmt);
}
////////////////////

const dig_bloomberg = async (doc, frame, fmt) =>
{
  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + "*" + doc;

try
{ 
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  var s = 'data-url="'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    
    response = await fetch (cors_kraker + "*" + url);
    textData = await response.text();
  }

  s = '"resourceId":"'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 50);
  url = url.substr (0, url.search ('"'));
  if (url.length != 22) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bloomberg (url, frame, fmt);
}
////////////////////

////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////

var loadmovie = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, -7))) req_tubitv (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -8))) req_vidnode (url, frame, fmt); else
  if (src == 8  && (url = getid (url, -8))) req_xhamster (url, frame, fmt); else
  if (src == 16 && (url = getid (url, 12))) req_clipwatching (url, frame, fmt); else
  if (src == 15 && (url = getid (url, 12))) req_cloudvideo (url, frame, fmt); else
  if (src == 12 && (url = getid (url, 12))) req_gounlimited (url, frame, fmt); else
  if (src == 19 && (url = getid (url,  0))) req_mixdrop (url, frame, fmt); else
  if (src == 20 && (url = getid (url, 15))) req_streamvid (url, frame, fmt); else
  if (src == 17 && (url = getid (url, 12))) req_upstream (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 12))) req_videobin (url, frame, fmt); else
  if (src == 13 && (url = getid (url, 12))) req_vidlox (url, frame, fmt); else
  if (src == 18 && (url = getid (url, 12))) req_vidoza (url, frame, fmt); else
  if (src == 11 && (url = getid (url,  0))) req_xstream (url, frame, fmt); else
  if (src == 31 && (url = getid (url, -6))) req_audiorealm (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_tubitv = async (id, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://tubitv.com/oz/videos/" + id + "/content";

try
{ 
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();
  url = jsonData.url; if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_vidnode = async (id, frame, fmt) =>
{
  var n, s, doc = "";

  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://vidcloud9.com"; var url = src + "/ajax.php?id=" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + "x-requested-with=XMLHttpRequest|*" + url);
  jsonData = await response.json();

  url = jsonData.source_bk[0].file; n = url.search ("\\.m3u8");

  if (n < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + "~*" + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }
  
  url = cors_kraker + "~*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_xhamster = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0,0,0,0,0];

  var tag = "xhamster"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://xhamster.com/embed/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '"standard":';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  var sub = textData.substr (n + s.length);
  sub = sub.substr (0, sub.search ("\\}\\]\\}") + 3);
  sub = JSON.parse (sub); sub = sub.mp4;

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].quality; k = k.substr (0, k.search ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");

  fmt = r[j]; url = sub[n].url;
  if (url.search ("\\.xhcdn\\.") < 0) url = sub[n].fallback;
  if (url.search ("\\.xhcdn\\.") < 0) throw ("!!!");
  url = cors_kraker + "~*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_clipwatching = async (id, frame, fmt) =>
{
  var tag = "clipwatch"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://clipwatching.com/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:"; var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 500); url = url.substr (url.search ("http"));
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cloudvideo = async (id, frame, fmt) =>
{
  var tag = "cloudvideo"; if (is_busy (frame)) return;
  var url = "https://cloudvideo.tv/embed-" + id + ".html";
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_gounlimited = async (id, frame, fmt) =>
{
  var tag = "gounlimited"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://gounlimited.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 2000);
  sub = sub.substr (0, sub.search ("script") - 4);
  eval ("sub=" + sub); url = sub.substr (sub.search ("http"));
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_mixdrop = async (id, frame, fmt) =>
{
  var tag = "mixdrop"; if (is_busy (frame)) return;
  var n = id.lastIndexOf ("/"); if (n >= 0) id = id.substr (n + 1);
  
  if (id.length < 5) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://mixdrop.co/e/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  n = textData.search ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 1000);
  sub = sub.substr (0, sub.search ("script") - 4); if (sub == "") throw ("!!!");
  eval ("sub=" + sub); url = sub.substr (sub.search ("wurl=") + 6);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");
  url = "https:" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_streamvid = async (id, frame, fmt) =>
{
  var tag = "streamvid"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://streamvid.co"; var url = src + "/player/" + id + "/";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '">JuicyCodes.Run';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var sub = textData.substr (n + s.length, 3000);
  sub = sub.substr (0, sub.search (';<'));

  eval ("sub=" + sub); sub = window.atob (sub);
  eval ("sub=" + sub.substr (5, sub.length - 7));

  url = sub.substr (sub.search ('file":"') + 7);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");
  
  if (url.search ("m3u8") > 0) stream_all (frame, 1);

  url = cors_kraker + "~*" + src + ",,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_upstream = async (id, frame, fmt) =>
{
  var tag = "upstream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://upstream.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("file:"); if (n < 0) throw ("!!!");

  url = textData.substr (n + 6, 200);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

  if (url.search ("m3u8") > 0) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_videobin = async (id, frame, fmt) =>
{
  var tag = "videobin"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://videobin.co/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("sources:"); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); var sub = url.split ("http");
  var s = ""; if (sub.length < 2) throw ("!!!");

  for (n = 1; n < sub.length; n++)
  {
    url = sub[n];
    if (url.search ("m3u8") > 0) s = url;
    if (url.search ("\\.mp4") > 0) { n = 0; break; }
  }

  if (n) if (s) url = s; else throw ("!!!");
  url = "http" + url.substr (0, url.search ('"'));
  if (n) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidlox = async (id, frame, fmt) =>
{
  var tag = "vidlox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidlox.me/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);
  var sub = url.split ("http"); if (sub.length < 2) throw ("!!!");

  if (sub [1].search ("mp4")  > 0) n =  1; else
  if (sub [2].search ("mp4")  > 0) n =  2; else
  if (sub [1].search ("m3u8") > 0) n = -1; else
  if (sub [2].search ("m3u8") > 0) n = -2; else throw ("!!!");

  if (n < 0) { n = -n; stream_all (frame, 1); }

  url = "http" + sub [n];
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidoza = async (id, frame, fmt) =>
{
  var tag = "vidoza"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidoza.net/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_xstream = async (id, frame, fmt) =>
{
  var i, j, k, sub, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "xstream"; if (is_busy (frame)) return;
  var url = getid (id, 15); if (!url) url = getid (id, 11);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = url; url = "https://xstreamcdn.com/v/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://xstreamcdn.com/api/source/" + id;

  response = await fetch (cors_kraker + url, { method: 'POST' } );
  jsonData = await response.json();
  
  sub = jsonData.data; if (!jsonData.success) throw ("!!!");

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].label; k = k.substr (0, k.search ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (k = f[j] - 1) < 0) throw ("!!!");
  fmt = r[j]; if (!(url = sub[k].file)) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_audiorealm = async (id, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "http://audiorealm.com/station/listen/id/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "'listenurl'>";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ("<"));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digmovie = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_tubitv (doc, frame, fmt); else
  if (src == 2 ) dig_vidnode (doc, frame, fmt); else
  if (src == 3 ) dig_123movies (doc, frame, fmt); else
  if (src == 5 ) dig_unistream (doc, frame, fmt); else
  if (src == 4 ) dig_pagalmovies (doc, frame, fmt); else
  if (src == 10) dig_general (doc, frame, fmt); else
  if (src == 31) dig_audiorealm (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_tubitv = async (doc, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  var url = doc; var n = url.search (":");
  if (n > 0) url = url.substr (n + 3);
  url = url.split ("/"); url = url [url.length - 2];
  if (url.length < 5 || url.length > 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_tubitv (url, frame, fmt);
}
////////////////////

const dig_vidnode = async (doc, frame, fmt) =>
{
  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "<iframe src=";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 100);
  url = url.substr (url.search ("id=") + 3);
  if ((n = url.search ("=")) > 0) url = url.substr (0, n);
  if ((n = url.search ("&")) > 0) url = url.substr (0, n);

  if (url.length < 6 || url.length > 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_vidnode (url, frame, fmt);
}
////////////////////

const dig_123movies = async (doc, frame, fmt) =>
{
  var s, n, epi, srv, pid, f = [0,0,0,0,0,0,0,0];

  var tag = "123movies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  n = textData.search ("type: 'POST'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 800);

  if ((n = url.search ("Player")) > 0)
  {
    s = url.substr (n + 8); s = s.split (",");
    epi = s[0]; epi = epi.substr (0, epi.length - 1);
    srv = s[1].substr (1); pid = s[2].substr (1);
  }
  else
  {
    n = textData.search ("halim-info"); if (n < 0) throw ("!!!");
    s = textData.substr (n, 100); s = s.split ('="');

    pid = s[1]; pid = pid.substr (0, pid.search ('"'));
    srv = s[2]; srv = srv.substr (0, srv.search ('"'));
    epi = s[3]; epi = epi.substr (0, epi.search ('"'));
  }

  url = url.substr (url.search ("nonce"));
  url = url.substr (url.search ("'") + 1);
  url = url.substr (0, url.search ("'"));

  var id = url + "-" + pid + "-" + srv + "-" + epi;
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=halim_ajax_player&nonce=" + url + "&episode=" + epi + "&server=" + srv + "&postid=" + pid;
  url = doc.substr (doc.search ("//") + 2); url = url.substr (0, url.search ("/"));
  url = cors_bypass + "https://" + url + "/wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  s = '360p","u":"'; n = textData.search (s); if (n > 0) f[0] = n + s.length;
  s = '480p","u":"'; n = textData.search (s); if (n > 0) f[1] = n + s.length;
  s = '720p","u":"'; n = textData.search (s); if (n > 0) f[2] = n + s.length;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 360;
  if (n == 1) fmt = 480;
  if (n == 2) fmt = 720;

  url = textData.substr (f[n], 1000);
  url = url.substr (0, url.search ('"'));
  url = window.atob (url);
  
} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_unistream = async (doc, frame, fmt) =>
{
  var s, n, f = [0,0,0,0,0,0,0,0];

  var tag = "unistream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; var src = "https://uniquestream.vip/";

try
{ 
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  n = textData.search ("'player-option-1'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 150); s = url.split ("='");

  var typ = s[2]; typ = typ.substr (0, typ.search ("'"));
  var pid = s[3]; pid = pid.substr (0, pid.search ("'"));
  var num = s[4]; num = num.substr (0, num.search ("'"));

  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=doo_player_ajax&post=" + pid + "&nume=" + num + "&type=" + typ;
  url = doc.substr (doc.search ("//") + 2); url = url.substr (0, url.search ("/"));
  url = cors_kraker + src + "wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.search ("src='") + 5);
  url = url.substr (0, url.search ("'")); if (url == "") throw ("!!!");
  n = url.search ("&"); if (n > 0) url = url.substr (0, n);

  response = await fetch (cors_kraker + "*" + src + "*https:" + url);
  textData = await response.text();

  n = textData.search ("progressive:"); if (n < 0) throw ("!!!");
  url = textData.substr (n, textData.search ("poster:") - n);
  var sub = url.split ('"url":"'); if (sub.length < 2) throw ("!!!");

  for (n = 1; n < sub.length; n++)
  {
    url = sub[n];
    if (url.search ("360p") > 0) f[0] = n;
    if (url.search ("480p") > 0) f[1] = n;
    if (url.search ("720p") > 0) f[2] = n;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  n = f[n]; url = sub [n]; fmt = pixformat (n);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_pagalmovies = async (doc, frame, fmt) =>
{
  var tag = "pagalmovies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var n = textData.search ("/file/"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 6, 10); url = url.substr (0, url.search ("/"));
  if (url == "") throw ("!!!");

  url = "https://www.pagalmovies.monster/download/" + url + "/server_1";

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_general = async (doc, frame, fmt) =>
{
  var s, n, src;
  var source = ["gounlimited.to","www.fembed.com","mixdrop.co"];

  var tag = "general"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  for (src = 0; src < source.length; src++)
  {
    s = "/" + source [src] + "/"; n = textData.search (s);

    if (n > 0)
    {
      url = textData.substr (n, 100);
      url = url.substr (0, url.search ('"'));

      s = "/e/"; n = url.search (s);
      if (n < 0) { s = "/f/"; n = url.search (s); }
      if (n < 0) { s = "/v/"; n = url.search (s); }
      if (n < 0) { s = "/embed-"; n = url.search (s); }
      if (n < 0) { s = "/stream/"; n = url.search (s); }
      if (n < 0) continue;

      url = url.substr (n + s.length);
      n = url.search ("/"); if (n > 0) url = url.substr (0, n);
      n = url.search ("\\."); if (n > 0) url = url.substr (0, n);
      if (url != "") break;
    }
  }

  if (busy > 0 && src >= source.length) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (busy < 0)
  {
    no_fail (frame); no_format (frame);
    loadwindow (url, frame, tag + ": id-none");
    return;
  }
  busy = -busy; if (!no_fail (frame)) return;

  if (src == 0) req_gounlimited (url, frame, fmt);
  if (src == 1) req_xstream (url, frame, fmt);
  if (src == 2) req_mixdrop (url, frame, fmt);
}
////////////////////

const dig_audiorealm = async (doc, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var url = doc.substr (doc.search ("play") + 5);
  url = url.substr (0, url.search ("/"));

  if (url.length < 3 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_audiorealm (url, frame, fmt);
}
////////////////////

//////////////////////////////
///// INTERNET TV (IPTV) /////
//////////////////////////////

var open_livestream = function (url, frame, fmt)
{
  var n, z = frame, f = [0,0,0,0,0,0,0,0]; if (busy) return;

  if (url [0] == "~") url = url.substr (1);

  if (url [0] == "/")
  {
    var s = url.split (" "); var t = (s[0] + "/////").split ("/");
    f[0] = t[1] * 1; f[1] = t[2] * 1; f[2] = t[3] * 1;
    f[4] = t[4] * 1; f[5] = t[5] * 1; f[6] = t[6] * 1;
    fmt = getformat (f, fmt); if ((n = argformat (fmt)) < 0) return;
    n = f[n]; if (n != Math.trunc (n)) n = (n * 10) % 10;
    url = s[n]; if (n <= 0 || !url) return;
  }

  n = url.search (":"); if (n > 3) return;
  var src = url.substr (0, n); url = url.substr (n+1);

  if (src == "a") { open_radio ("https://www.iheart.com/live/" + url + "/?embed=true"); return; }
  if (src == "b") { open_radio ("http://virtualdjradio.com/" + url + "/"); return; }

  if (src == "0") { request (url, frame, -fmt); return; }

  document.getElementById ("id" + frame).value = "Tuning...";

  if (src == "7") open_tv0 (z, 0, f, fmt, url);
  if (src == "8") open_tv0 (z, 1, f, fmt, url);
  if (src == "9") open_tv0 (z, 1, f, fmt, cors_bypass + url);

  if (src == "1a") open_tv1 (z, 1, f, fmt, url, "https://ustv247.tv");
  if (src == "1b") open_tv1 (z, 1, f, fmt, url, "https://ustvgo.tv");
  if (src == "1c") open_tv1 (z, 1, f, fmt, url, "https://watchnewslive.tv");
  if (src == "2a") open_tv2 (z, 1, f, fmt, url, "http://www.freeintertv.com");
  if (src == "3a") open_tv3 (z, 0, f, fmt, url, "http://www.arconaitv.us");
  if (src == "4a") open_tv4 (z, 1, f, fmt, url, "https://www.streamlive.to");
  if (src == "5a") open_tv5 (z, 0, f, fmt, url, "https://ustreamix.su");
  if (src == "6a") open_tv6 (z, 1, f, fmt, url, "http://123tvnow.com");
  if (src == "7a") open_tv7 (z, 1, f, fmt, url, "https://www.watchnews.pro");

  if (src == "6") open_tv0 (z, 0, f, fmt,
    "*http://123tvnow.com*http://docs-8.gogleusercontent.host/live/" + url + "/chunks.m3u8");
}
////////////////////

var open_radio = function (url)
{
  var w = 360, h = 480;

  var specs = "width=" + w + ",height=" + h + ",top=100" + ",left=100";

  var win = window.open (url, "radiobox", specs); win.focus();
}
////////////////////

const open_tv0 = async (frame, mode, f, fmt, url) =>
{
  var n; if (is_busy (frame)) return;

  if (url.substr (0,1) == "*") if (cors_kraker) url = cors_kraker + "~" + url; else
  {
    url = url.substr (1); n = url.search ("\\*"); if (n >= 0) url = url.substr (n + 1);
  }

if (stream_all (frame, 1)) fmt = mode = 0; else
{
  var x = 0; n = getformat (f, fmt);
  if ((n = argformat (n)) >= 0)
  {
    x = pixformat (n); n = f[n]; var y = Math.trunc (n); if (n != y) x = y;
  }
  if (mode) mode = (x ? x : 2); else { fmt = x; mode = 1; }
}

if (mode > 1) try
{
  response = await fetch (url);
  textData = await response.text();

  var sub = crack_m3u8 (url, textData, frame, fmt); if (sub == "") throw ("!!!");
  n = sub.search ("<>"); fmt = sub.substr (n + 2); url = sub.substr (0, n);

  fmt = fmt * 1; if (fmt && mode > 2) fmt = mode; else mode = 0;

} catch (err) { console.log (err); busy = 0; }

  if (mode) fixformat (f, frame); else if (!fmt) no_format (frame);
  fmt = " [" + fmt + "]"; if (no_fail (frame)) loadwindow (url, frame, "Internet TV" + fmt);
}
////////////////////

const open_tv1 = async (frame, mode, f, fmt, url, src) =>
{
  var n, r, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/player.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("<!DOCTYPE html>"); url = textData.substr (0, n);
  n = textData.search ("switch"); textData = textData.substr (n - 100);
  n = textData.search ("file:"); s = textData.substr (n + 6);
  s = s.substr (0, s.search ("\\(")); if (!s || !url) throw ("!!!");

  n = textData.search ("\\+document"); r = textData.substr (0, n);
  r = r.substr (r.search ("function")) + "};url=" + s + "();";
  s = textData.substr (n); s = s.substr (s.search ("\\]") + 3);
  s = "id=" + s.substr (0, s.search ("'")) + ">";

  s = url.substr (url.search (s) + s.length, 100);
  s = s.substr (0, s.search ("<")); if (!s) throw ("!!!");

  eval (r); url = url + s; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.freeintertv.com  format: ????????  360p
const open_tv2 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "chname=" + url + "&html5=11";

  sub = url; url = cors_kraker + src + "/myAjax/get_item_m3u8/";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.search ("http"));
  url = url.substr (0, url.search ("'"));
  if (url == "") throw ("!!!");

  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.arconaitv.us  format: id=###  360p CORS
const open_tv3 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/stream.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("var _"); if (n < 0) throw ("!!!");
  url = textData.substr (n); url = url.substr (0, url.search ("script") - 2);

console.log(url); url = url.replace ("return decode", "url = decode"); 
eval(url); console.log(url);
busy = 0;

//  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.streamlive.to  format: view/#####  360p KRAK
const open_tv4 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "player="; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); url = url.substr (url.search ("return") + 6);
  n = url.search ("join") + 4; s = url.substr (0, n) + "(''))";
  url = url.substr (n); eval ("src='https:'+" + s);

  n = url.search ("join"); s = url.substr (0, n - 1); url = url.substr (n + 8);
  url = url.substr (url.search ('"') + 1); url = url.substr (0, url.search ('"'));

  s = "var " + s.substr (s.search ("\\+") + 2);
  n = textData.search (s); if (n < 0) throw ("!!!");

  s = textData.substr (n, 1000); s = s.substr (s.search ("\\["));
  s = s.substr (0, s.search ("\\]") + 1); src = src + eval ("s=" + s + ".join('')");

  s = "id=" + url + ">"; n = textData.search (s); if (n < 0) throw ("!!!");
  s = textData.substr (n + s.length, 60); src = src + s.substr (0, s.search ("<"));

  url = "**" + src; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://ustreamix.su  format: id=?????  720p KRAK
const open_tv5 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/embed.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "window.open\\("; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = src + url.substr (0, url.search ("&"));

  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  n = textData.search ("eval\\("); if (n < 0) throw ("!!!");
  url = textData.substr (n + 5); url = url.substr (0, url.search ("<\/script>") - 2);

  eval ("s=" + url); url = s.substr (s.search ("http"));
  url = url.substr (0, url.search ('"'));

  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  if ((n = textData.search ("\\|m3u8\\|")) < 0) throw ("!!!");
  url = textData.substr (n - 1000, 1500);

  if ((n = url.search ("eval\\(")) < 0) throw ("!!!");
  url = url.substr (n + 5); url = url.substr (0, url.search ("<\/script>") - 2);

  eval ("s=" + url); eval (s + "url = 'https://' + host_tmg + '/' + file_name + '?token=' + jdtk");

  url = "*" + src + ",,png*" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://123tvnow.com  format: watch/?????  360p KRAK
const open_tv6 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/" + url + "/";

  // dynamically load the cryptography module
  // this will happen as we wait for the fetch
  // original source: https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js

  var crypto = document.getElementById ("cryptojs");
  if (!crypto.src) crypto.src = cors_kraker + "crypto.js";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("E\\.d\\('"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 5, 1500); n = url.search ("'");

  s = url.substr (0, n); var t = url.substr (n + 3); t = t.substr (0, t.search ("'"));
  url = url.substr (url.search ("\\+='") + 3); url = url.substr (0, url.search ("'"));

  // decryption algo found in http://123tvnow.com/min/82964.js

  var e = JSON.parse (window.atob (s));
  var o = CryptoJS.enc.Hex.parse (e.salt);
  var p = CryptoJS.enc.Hex.parse (e.iv);
  n = e.iterations; s = e.ciphertext;

  var q = CryptoJS.PBKDF2 (t, o, { hasher: CryptoJS.algo.SHA512, keySize: 8, iterations: n });
  var r = CryptoJS.AES.decrypt (s, q, { mode: CryptoJS.mode.CBC, iv: p });

  url = "~*" + src + "/*" + r.toString (CryptoJS.enc.Utf8) + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData[0].file; if (!url) throw ("!!!");
  url = "*" + src + "*" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.watchnews.pro  format: ?????  720p proxy
const open_tv7 = async (frame, mode, f, fmt, url, src) =>
{
  var n, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/" + url + ".html";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  n = textData.search ('file: "http'); if (n < 0) throw ("!!!");
  url = textData.substr (n + 7); url = url.substr (0, url.search ('"'));

  if (url == "") throw ("!!!"); freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

var saved_path = function (name)
{
  var n, time, path;

  if (!(path = freetv [name])) path = ""; else
  {
    n = path.search (" "); time = path.substr (0, n) * 1;
    path = path.substr (n + 1); if (time < the_time - 15000) path = "";
  }
  return (path);
}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});

  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];

  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

/*
var crack_cloudproxy = function (data)
{
  var n, s, x, url;

try
{
  n = data.search ("S='"); if (n < 0) throw ("???");

  data = data.substr (n + 3);
  data = data.substr (0, data.search ("'"));
  data = window.atob (data);

  s = ";document.cookie="; n = data.search (s); if (n < 0) throw ("???");
  url = eval (data.substr (2, n - 2));

  data = data.substr (n + s.length); n = data.search ('"="');
  url = eval (data.substr (0, n + 3)) + url;

} catch (err) { console.log (err); url = ""; }

  return (url);
}
////////////////////
*/

var crack_cloudflare = function (frame, src, data)
{
  var n, s, p, q, form = "";

try
{
  p = data.substr (data.search ("setTimeout"));
  p = p.substr (0, p.search ("f.action"));
  p = p.substr (p.search ("\\{") + 1);

  q = data.substr (data.search ("<form"));
  q = q.substr (0, q.search ("</div") + 6);

  p = p.replace ("href='/'", "href='" + src + "/'");

  s = q + "\n\n<script\>" + p + "</script\>";

  var win = document.getElementById ("mov" + frame);
  var doc = win.contentDocument; doc.open(); doc.write (s); doc.close();

  p = doc.getElementsByTagName ("form")[0];
  q = p.getElementsByTagName ("input");

  for (n = 0; n < q.length; n++) form += "&" + q[n].name + "=" + encodeURIComponent (q[n].value);

  form = src + p.action.substr (7) + "<>" + form.substr (1);

} catch (err) { console.log (err); form = ""; }

  return (form);
}
////////////////////

//////////////////////////
///// INTERNET RADIO /////
//////////////////////////

var radio = function (url)
{
  document.getElementById ("ir_url").value = url;
  ir_action (0); if (url) ir_action (2);
}
////////////////////

var ir_action = function (mode)
{
  var win = document.getElementById ("internet_radio");
  var pop = document.getElementById ("ir_popup");
  var sts = document.getElementById ("ir_status");
  var vol = document.getElementById ("ir_volume");
  var url = document.getElementById ("ir_url").value;

  var src_ok = (win.src && win.src != "file:///");
  var volume = vol.value * 1;

  if (mode == 3)
  {
    sts = pop.checked; pop.checked = !sts;
    pop.className = (sts ? "is_off" : "is_on");
    return;
  }

  if (mode == 2 && url.length == 11 && url.search (":") < 0)
  {
    var src = document.getElementById ("ctr7z").value; if (src > 9) src = 0;
    url = invidious_site [src] + "/latest_version?local=true&itag=251&id=" + url;
    document.getElementById ("ir_url").value = url;
  }

  if (mode == 2 && pop.checked && url)
  { loadwindow (url, -volume, "Internet Radio"); return; }

  if (mode == 2 && !src_ok) if (url)
  {
    if (last_time > get_time() - 2) mode = 0; else win.src = url; last_time = the_time;
  }
  else
  {
    url = document.getElementsByName ("ir");
    for (var i = 0; i < url.length; i++) if (url[i].checked) url[i].onclick();
    return;
  }

  if (mode == 0 || (mode == -2 && src_ok))
  { sts.value = (mode ? "ERROR" : "Stopped"); win.pause(); win.src = "file:///"; }

  if (mode == 2 || (mode == -1 && src_ok))
  { sts.value = "Playing"; win.play(); }

  if (mode == 1 && src_ok)
  { sts.value = "Paused"; win.pause(); }

  if (mode == 4 && volume > 0) volume -= volume > 40 ? 10 : 5;
  if (mode == 5 && volume < 100) volume += volume < 40 ? 5 : 10;

  win.muted = true; win.volume = volume / 100;
  win.muted = false; vol.value = volume;
}
////////////////////

var popper = function (frame, mode)
{
  var i, j, k, val = txt = "";
  var win = document.getElementById ("pop" + frame);
  var index = win.style.zIndex; if (!index) index = -1;
  var multi = document.getElementById ("mov" + frame + "m").checked;

  if (busy) return;

  if (mode.length != undefined)
  {
    txt = mode.substr (mode.search ("<>") + 2);
    val = mode.substr (0, mode.search ("<>"));
    txt = txt.substr (txt.search (" ") + 1);
    if (val == "") mode = multi = 1;
  }

  if (mode && mode.length == undefined)
  {
    if (mode == 1) win.style.zIndex = -index;
    if (mode == 2) win.style.zIndex = multi ? -index : index;
    if (mode == 3) win.style.zIndex = -1;
    if (mode == 4) win.style.zIndex = multi ? 1 : -1;
    return;
  }

  var box = document.getElementById ("stk" + frame).children;
  var doc = win.getElementsByTagName ("table");

  if (doc.length < 2 || !(doc = doc [1])) doc = null;
  if (doc) doc = doc.getElementsByTagName ("button");
  if (!doc || doc.length < 2) doc = null;

  if (mode)
  {
    if (doc)
    {
      for (i = 0; i < doc.length - 1; i++) if (txt == doc[i].innerText) break;

      for (; i > 0; i--)
      {    
        doc[i].value = doc[i-1].value; doc[i].innerText = doc[i-1].innerText;
      }
      doc[0].value = mode; doc[0].innerText = txt;
    }
    error = val;
    if (frame == 5) loadid (frame, 2);
    if (frame == 6) loadnews (frame, 2);
    if (frame == 7) loadmovie (frame, 2);
    return;
  }

  var start = '<button onclick="javascript:popper(' + frame + ',this.value)" value="';
  var middle2 = '" style="background-color:lightblue">';
  var middle1 = '" style="background-color:pink">';
  var pop = "<table><tr><td>";

  var n = Math.floor (((i = box.length) + 2) / 3);
  if ((i -= 45) > 0) n = 15; else i = 1;

  for (j = k = 0; k < 3; i++)
  {
    if (i >= box.length) { val = ""; txt = "-"; } else
      { val = box[i].value; txt = box[i].innerText; }
    pop = pop + start + val + "<>" + txt + middle1 + txt + "</button><br>";
    if (++j >= n) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  pop = pop + "</td></tr></table><table><tr><td>";

  for (i = 0, j = k = 0; k < 3; i++)
  {
    if (!doc || i >= doc.length) { val = ""; txt = "-"; } else
      { val = doc[i].value; txt = doc[i].innerText; }
    pop = pop + start + val + middle2 + txt + "</button><br>";
    if (++j >= 4) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  win.innerHTML = pop + "</td></tr></table>";
  if (multi) win.style.zIndex = 1;
}
////////////////////

//////////////////////
///// LOADWINDOW /////
//////////////////////

var loadwindow = function (url, frame, site)
{
  var h, w, win, raw, title, insert, specs;

  var bstyle = "<body style='margin:0;padding:0;background-color:";
  var istyle = " style='position:absolute;border:none;outline:none;width:100%;height:100%'";
  var vstyle = " autoplay allowfullscreen ";

  var frm = document.getElementById ("mov" + frame);
  var msg = document.getElementById ("vid" + frame);
  get_time();

  if (url == "")
  {  
    msg.innerHTML = "No Video"; win = frm.parentNode; win.removeChild (frm);
    frm.src = "about:blank"; frm.style.pointerEvents = "none"; win.appendChild (frm);
    if (site) document.getElementById ("id" + frame).value = site;
    return;
  }

  if (last_time > the_time - 2) return; last_time = the_time;

  if (frame <= 0)
  {
    insert = "<!DOCTYPE html><html><head><title>" + site + "</title></head>" + bstyle;
    insert = insert + "cornflowerblue;color:turquoise;text-align:center'><h1><i>" + site + "</i></h1>";
    insert = insert + "<audio controls style='position:absolute;left:0;bottom:0;width:100%;height:4.5vw' ";
    insert = insert + "id='audio'></audio></body></html>";
    specs = "width=500,height=130,top=100,left=100";

    win = window.open ("about:blank", "audiobox", specs); win.focus();
    win = win.document; win.open(); win.write (insert); win.close();
    win = win.getElementById ("audio"); win.src = url;
    win.volume = frame / -100; win.play();
    return;
  }

  var multi = document.getElementById ("mov" + frame + "m").checked;
  var nplay = document.getElementById ("mov" + frame + "n").checked;

  if (document.getElementById ("mov" + frame + "a").checked) raw = 0; else
  if (document.getElementById ("mov" + frame + "b").checked) raw = 1; else
  if (document.getElementById ("mov" + frame + "c").checked) raw = 2; else raw = 0;

  var rot = document.getElementById ("meta" + frame).step * 1;

  if (site == "") rot = 0; else
  {
    specs = url.substr (0,4);

    if (specs != "http" && specs != "file")
    {
      msg.innerHTML = "Bad URL"; return;
    }
    document.getElementById ("id" + frame).value = site;
    document.getElementById ("line" + frame).value = url;

    if (nplay)
    {
      msg.innerHTML = "No Play"; return;
    }
  }

  if (raw == 1)
  {
    title = "Wrapper";
    insert = "'><video" + istyle + vstyle + "id='video'></video></body>";
  }

  if (raw == 2)
  {
    title = "Sandbox";
    insert = "'><iframe" + istyle + vstyle + "src='" + url +
      "' sandbox='allow-scripts allow-same-origin allow-forms'></iframe></body>";
  }

  ir_action (1); var filter = frm.value; if (!filter) filter = "initial";

  if (document.getElementById ("btn" + frame + "b").checked)
  {
    var lft, top;

    win = document.getElementById ("win" + frame);
    if (!(specs = win.value)) specs = win.children[0].value;

    h = specs.search (":");
    w = specs.substr (0, h);
    h = specs.substr (h + 1);

    lft = (window.screen.width - w)  / 2;
    top = (window.screen.height - h) / 3;

    specs = "width=" + w + ",height=" + h + ",top=" + top + ",left=" + lft;
  }

  else if (document.getElementById ("btn" + frame + "a").checked)
  {
    h = w = 0; specs = "";
  }

  else
  {
    if (raw != 1)
    {
      frm.style.filter = filter; frm.src = url;
    }
    else
    {
      frm.style.filter = "initial";
      win = frm.contentDocument; insert = bstyle + "black" + insert;
      load_stream (frame, true, insert, url, win, filter, rot);
    }
    frm.style.pointerEvents = "auto"; msg.innerHTML = "No Video"; return;
  }

  if (multi) vidwin = null; else if (h != last_h || w != last_w || raw != last_raw)
  {
    if (vidwin) vidwin.close(); vidwin = null;
  }
  if (!vidwin || vidwin.closed) vidwin = window.open ("about:blank", "_blank", specs);
  last_h = h; last_w = w; last_raw = raw;

  win = vidwin.document; if (win.body.onunload) win.body.onunload();

  if (raw == 0) vidwin.location = url; else
  {
    istyle = "<html><head><title>" + title + "</title></head>";
    insert = istyle + bstyle + "black" + insert + "</html>";
    load_stream (frame, false, insert, url, win, filter, rot);
  }
  vidwin.focus(); msg.innerHTML = "";
}
////////////////////

var vid_oops = function (frame, vid, fatal)
{
  if (fatal)
  {
    vid_error (vid);
  }
}
////////////////////

var vid_info = function (frame, w, h, reset)
{
  var msg = w + " x " + h;
  if (w <= 0 || h <= 0) if (reset) msg = ""; else return;
  doc = document.getElementById ("meta" + frame).value = msg;
}
////////////////////

var load_stream = function (frame, is_local, insert, url, doc, filter, rot)
{
  var hls_cfg = {
    debug: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    startLevel: 2,
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000,
    enableWebVTT: false,
    enableCEA708Captions: false
  };

  if (!doc) return; doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();

  var win = doc.getElementById ("video"), error = "";
  var hls = document.getElementById ("hls" + frame).checked;

  if (!win)
  {
    win = doc.getElementsByTagName ("iframe")[0];
    if (win) win.style.filter = filter; return;
  }

  if (!is_local) frame = 0; else
  {
    win.onloadedmetadata = function() { vid_info (frame, this.videoWidth, this.videoHeight, 0); }
  }

  win.value = frame; win.style.filter = filter; win.step = rot; create_controls (win);

  if (!hls)
  {
    win.src = url; win.onerror = function() { vid_oops (frame, win, true); }
  }

  if (hls == 1) if (!window.Hls) error = "HLS"; else
  {
    var vid = new Hls (hls_cfg);
    doc.body.onunload = function() { vid.destroy(); console.log ("HLS player unloaded."); }
    vid.loadSource (url);
    vid.attachMedia (win);
    vid.on (Hls.Events.ERROR, function (event,data)
      { vid_oops (frame, win, data.fatal); });
    if (is_local) vid.on (Hls.Events.BUFFER_CODECS, function (event,data)
      { if (data.video) vid_info (frame, data.video.metadata.width, data.video.metadata.height, 0); });
  }

  if (hls == 2) if (!window.dashjs) error = "DASH"; else
  {
    var vid = dashjs.MediaPlayer().create();
    doc.body.onunload = function() { vid.reset(); console.log ("DASH player unloaded."); }
    // vid.getDebug().setLogToBrowserConsole(false);   // turn off fracking console messages! v2.5.0
    vid.initialize (win, url, true);
    vid.on (dashjs.MediaPlayer.events ["ERROR"], function ()
      { vid_oops (frame, win, true); });
    if (is_local) vid.on (dashjs.MediaPlayer.events ["QUALITY_CHANGE_RENDERED"], function ()
      { var x = vid.getCurrentTrackFor ('video'); if (!x) return;
        var y = x.bitrateList [vid.getQualityFor ('video')];
        vid_info (frame, y.width, y.height, 0); });
  }

  if (error) alert (error + " player seems to be missing! Try reloading the page.\n\n" +
      " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}
////////////////////

/*  HLS configuration options (https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning)

var config = {
      autoStartLoad: true,
      startPosition: -1,
      debug: false,
      capLevelOnFPSDrop: false,
      capLevelToPlayerSize: false,
      defaultAudioCodec: undefined,
      initialLiveManifestSize: 1,
      maxBufferLength: 30,
      maxMaxBufferLength: 600,
      maxBufferSize: 60*1000*1000,
      maxBufferHole: 0.5,
      lowBufferWatchdogPeriod: 0.5,
      highBufferWatchdogPeriod: 3,
      nudgeOffset: 0.1,
      nudgeMaxRetry: 3,
      maxFragLookUpTolerance: 0.25,
      liveSyncDurationCount: 3,
      liveMaxLatencyDurationCount: Infinity,
      enableWorker: true,
      enableSoftwareAES: true,
      manifestLoadingTimeOut: 10000,
      manifestLoadingMaxRetry: 1,
      manifestLoadingRetryDelay: 1000,
      manifestLoadingMaxRetryTimeout: 64000,
      startLevel: undefined,
      levelLoadingTimeOut: 10000,
      levelLoadingMaxRetry: 4,
      levelLoadingRetryDelay: 1000,
      levelLoadingMaxRetryTimeout: 64000,
      fragLoadingTimeOut: 20000,
      fragLoadingMaxRetry: 6,
      fragLoadingRetryDelay: 1000,
      fragLoadingMaxRetryTimeout: 64000,
      startFragPrefetch: false,
      fpsDroppedMonitoringPeriod: 5000,
      fpsDroppedMonitoringThreshold: 0.2,
      appendErrorMaxRetry: 3,
      loader: customLoader,
      fLoader: customFragmentLoader,
      pLoader: customPlaylistLoader,
      xhrSetup: XMLHttpRequestSetupCallback,
      fetchSetup: FetchSetupCallback,
      abrController: AbrController,
      bufferController: BufferController,
      capLevelController: CapLevelController,
      fpsController: FPSController,
      timelineController: TimelineController,
      enableWebVTT: true,
      enableCEA708Captions: true,
      stretchShortVideoTrack: false,
      maxAudioFramesDrift: 1,
      forceKeyFrameOnDiscontinuity: true,
      abrEwmaFastLive: 3.0,
      abrEwmaSlowLive: 9.0,
      abrEwmaFastVoD: 3.0,
      abrEwmaSlowVoD: 9.0,
      abrEwmaDefaultEstimate: 500000,
      abrBandWidthFactor: 0.95,
      abrBandWidthUpFactor: 0.7,
      abrMaxWithRealBitrate: false,
      maxStarvationDelay: 4,
      maxLoadingDelay: 4,
      minAutoBitrate: 0,
      emeEnabled: false,
      widevineLicenseUrl: undefined,
      requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess
  };
*/

//////////////////////////////
///// GENERIC BRIGHTCOVE /////
//////////////////////////////

const find_brightcove = async (doc, xtag, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var url = cors_bypass + doc;
  var tag = xtag; if (tag == "") tag = "brightcove";
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-account="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pub = textData.substr (n + s.length, 100);
  pub = pub.substr (0, pub.search ('"'));

  s = 'data-video-id="'; n = textData.search (s);
  if (n < 0) { s = 'data-video-id-pending="'; n = textData.search (s); }
  if (n < 0) { s = 'data-brightcove-video-id="'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  var id = textData.substr (n + s.length, 100);
  id = id.substr (0, id.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) load_brightcove (pub, id, xtag, frame, fmt);
}
////////////////////

const load_brightcove = async (pub, id, xtag, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  if (is_busy (frame)) return;
  var tag = xtag; if (tag == "") tag = "brightcove";

  if (pub == "")
  {
    i = id.search ("-"); pub = id.substr (0, i); id = id.substr (i + 1);
  }
  
  var url = "https://players.brightcove.net/" + pub + "/default_default/index.min.js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (pub.length < 9 || pub.length > 13 || id.length < 10 || id.length > 13) throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'accountId:"' + pub + '",policyKey:"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pk = textData.substr (n + s.length, 200);
  pk = pk.substr (0, pk.search ('"'));

  url = "https://edge.api.brightcove.com/playback/v1/accounts/" + pub + "/videos/" + id;

  response = await fetch (cors_kraker + url, { headers: { 'Accept': 'application/json;pk=' + pk }, });
  textData = await response.json();

  var url_m3u8 = ""; var dat = textData.sources; if (dat == undefined) throw ("!!!");

  for (i = 0; i < dat.length; i++)
  {
    url = dat [i].src; if (url == undefined) continue;
    if (url.search ("m3u8") > 0) { url_m3u8 = url; continue; }
    k = dat [i].height; if (k == undefined) continue;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if ((k = getformat (f, fmt)))
  {
    if ((k = argformat (k)) < 0 || (k = f[k] - 1) < 0) throw ("!!!");
    url = dat [k].src; fmt = dat [k].height; fixformat (f, frame);
  }
  else
  {
    if ((url = url_m3u8) == "") throw ("!!!");
    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (xtag == "") id = pub + "-" + id;
  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var crack_source = function (data, frame, fmt)
{
  var sub, str, url, i, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  sub = data.split ("<source src="); if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i]; j = str.search ('label="');
    str = str.substr (j + 7); str = str.substr (0, str.search ('"'));
    if ((j = str.search ("p")) > 0) str = str.substr (0, j);
    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  str = sub [f[j]]; fmt = r[j];
  url = str.substr (1); str = str.substr (0,1);
  url = url.substr (0, url.search (str)); if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

var crack_smil = function (data, frame, fmt)
{
  var sub, str, url, i, j, url, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  str = '<audio src="'; j = data.search (str);

  if (j > 0)
  {
    url = data.substr (j + str.length, 200);
    url = url.substr (0, url.search ('"'));

    if (url == "") return ""; else return (url + "<>");
  }

  sub = data.split ('<video src="');
  if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i];

    if ((j = str.search ("height")) > 0)
    {
      str = str.substr (j + 8);
      str = str.substr (0, str.search ('"'));
    }
    else if ((j = str.search ("bitrate")) < 0) continue; else
    {
      str = str.substr (j + 9);
      str = str.substr (0, str.search ('"'));
      if (str == "3500000") str = "720"; else
      if (str == "1850000") str = "504"; else

      if (str == "1700000") str = "720"; else
      if (str == "1300000") str = "504"; else
      if (str ==  "900000") str = "360"; else continue;
    }

    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  url = sub [f[j]]; fmt = r[j];
  url = url.substr (0, url.search ('"'));
  if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

///////////////////////
///// M3U8 LOADER /////
///////////////////////

var crack_m3u8 = function (path, data, frame, fmt)
{
  var f = [0,0,0,0,0,0,0,0], r = [0,0,0,0], b = [0,0,0,0];
  var sub, str, url, audio, bw, px, i, j, k;

  sub = data.split ("#EXT-X-STREAM-INF"); if (sub.length < 2) return (path + "<>");

  for (i = 1; i < sub.length; i++)
  {
    url = sub[i]; url = url.substr (0, url.search ("\n"));

    if ((j = url.search ("BANDWIDTH")) < 0) bw = 0; else
    {
      str = url.substr (j + 10); j = str.search (",");
      if (j > 0) str = str.substr (0, j); bw = str * 1;
    }

    if ((j = url.search ("RESOLUTION")) < 0) if (!bw) continue; else
    {
      // estimate video height; caution: might grab an audio track
      px = Math.trunc (Math.sqrt ((bw - 175000) * 0.2)); bw = -1;
    }
    else
    {
      url = url.substr (j + 11); j = url.search (",");
      if (j > 0) url = url.substr (0, j); j = url.search ("x");
      px = url.substr (j + 1) * 1; url = url.substr (0, j);
      // difference between ideal and actual bandwidth
      if (bw) bw -= url * px * 2 + 250000;
      if (bw > 0) bw *= 3; else bw *= -2;
    }

    if ((j = chkformat (px)) >= 0)
    {
      if (bw < 0 && b[j]) continue;
      k = ((bw >= 0 && !b[j]) || (r[j] == px && bw < b[j]));
      if (k || r[j] < px) { f[j] = i; r[j] = px; b[j] = bw + 1; }
    }
  }

  if (b[0] || b[1] || b[2])  // remove audio tracks, if any
  {
    if (!b[0]) f[0] = 0;
    if (!b[1]) f[1] = 0;
    if (!b[2]) f[2] = 0;
  }
  if (f[1] || f[2]) if (r[0] < 240) f[0] = 0;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return (path + "<>0");

  audio = sub [0]; sub = sub [f[j]].split ("\n");
  str = sub [1]; url = merge_url (path, str) + str;
  fmt = r[j]; if (!b[j]) fmt = pixformat (j);

  k = sub[0].search ("AUDIO="); sub = audio.split ("#EXT-X-MEDIA");

  for (i = 1, j = -1; i < sub.length; i++)
  {
    audio = sub[i];
    if (audio.search ("TYPE=AUDIO") < 0) continue;
    if (audio.search ("DEFAULT=YES") < 0 && k < 0) continue;
    if ((j = audio.search ('URI="')) > 0) break;
  }

  if (j < 0) audio = ""; else
  {
    audio = audio.substr (j + 5);
    audio = audio.substr (0, audio.search ('"'));
    audio = merge_url (path, audio) + audio;
  }

  if (document.getElementById ("mov" + frame + "n").checked) make_downloader (url, audio);
  if (audio != "") return (path + "<>0"); else return (url + "<>" + fmt);
}
////////////////////

var merge_url = function (path1, path2)
{
  var url = "", sub, str, i, j, k;

  if (path2.search ("http") == 0) return "";

  if ((k = path1.search ("\\?")) < 0) k = path1.length;
  sub = path1.substr (0, k).split ("/"); str = path2.split ("/");

  if (str[0] == "") k = str.length; else k = 1;
  j = sub.length - k; if (j < 3) j = 3;

  for (i = 0; i < j; i++) url = url + sub [i] + "/";

  if (k > 1) url = url.substr (0, url.length - 1);

  return url;
}
////////////////////

//////////////////////
///// DOWNLOADER /////
//////////////////////

const make_downloader = async (vid, aud) =>
{
  var i, m, n, p = 0, url, data, name, doc, done = false, plain_text = false;

  url = vid; doc = head; download_doc = head + "Waiting for stream file..." + tail;

try
{ 
  response = await fetch (url);
  textData = await response.text();

} catch (err) { download_doc = head + "Could not get stream file." + tail; return; }

  if (aud != "") if (plain_text)
    doc = doc + "\nAudio Stream Source<br>\n" + aud + "\n<br>"; else
    doc = doc + "\n<p>\n<a href='" + aud + "'>Audio Stream Source</a>";

  if (plain_text)
    doc = doc + "\nVideo Stream Source<br>\n" + url + "\n<br>"; else
    doc = doc + "\n<p>\n<a href='" + url + "'>Video Stream Source</a>\n<br><br>";

  var sub = textData.split ("#EXTINF");

  for (i = 1; i < sub.length - 1; i++)
  {
    data = sub [i].split ("\n");
    if (!done) { url = merge_url (url, data [1]); done = true; }
    data = url + data [1];

    name = ++p; if (p < 10) name = "00" + p; else if (p < 100) name = "0" + p;

    if (plain_text)
      data = "\n<br>" + data; else
      data = "\nSegment <a href='" + data + "'>" + name + "</a>&nbsp;&nbsp;&nbsp;";

    if (!(p % 5)) data = data + "\n<br>";

    doc = doc + data;
  }

  download_doc = doc + "\n<br>\n<div style='width:10vw; height:10vw'></div>" + tail + "\n\n";
}
////////////////////

var open_downloader = function ()
{
  var downloader = window.open ();
  downloader.document.write (download_doc);
  downloader.document.close ();
}
////////////////////

</script>

<!--
////////////////////////////////
///// Custom Video Control /////
////////////////////////////////
//-->

<!-- This element must be cloned and inserted into a video frame. -->

<div id="video_control" style="display:none">

<div class="v-control">
  <input type="range" value=1 min=0 max=1 step=0.01
  style="width:calc(100% - 238px);min-width:124px;margin-bottom:6px">
  <span><input type=text class="v-brite v-speed" value="1.0" style="width:30px"></span></span>
  <input type="text" style="width:72px;color:azure;background-color:transparent" disabled>
  <input type="text" style="width:72px;color:azure;background-color:transparent" disabled>
  <br>
  <span class="play-lft"></span><span class="play-ctr"></span><span class="play-rgt"></span>
  <span class="t-alpha t-alpha2" style="width:30px">Mute</span>
  <input type="range" value=1 min=0 max=1 step=0.05 style="min-width:40px;max-width:216px">
  <span class="t-alpha t-alpha2" style="width:30px">Seek</span>
  <input type="text" value="0:0:0" style="width:76px;margin-right:2px">
  <span><input type=text class="v-seekr" style="width:18px" value="5s" ></span>
  <span><input type=text class="v-seekr" style="width:24px" value="15s"></span>
  <span><input type=text class="v-seekr" style="width:18px" value="1m" ></span>
  <span><input type=text class="v-seekr" style="width:18px" value="2m" ></span>
  <span><input type=text class="v-seekr" style="width:18px" value="5m" ></span>
  <span><input type=text class="v-seekr" style="width:24px" value="10m"></span>
  <span><input type=text class="v-brite" style="width:12px" value="B"  ></span>
  <span><input type=text class="v-brite" style="width:12px" value="S"  ></span>
  <span class="t-alpha" style="width:8px;margin-left:2px">F</span>
  <span class="t-alpha" style="width:8px">R</span>
  <span class="t-alpha" style="width:14px">FS</span>
</div>

<style type="text/css">

.v-control {
  position: absolute; text-align: center;
  bottom: 0; width: calc(100% - 8px);
  margin: 0; padding: 4px 4px 4px 4px;
  font-size: 14px; line-height: 17px;
  font-family: 'segoe ui', serif;
  background-color: steelblue; cursor: default;
}

.v-control input {
  appearance: none; -moz-appearance: none; -webkit-appearance: none;
  height: 13px; text-align: center; vertical-align: top;
  padding: 1px 3px 1px 3px; margin: 2px 1px 3px 1px;
  border: 1px solid darksalmon; border-radius: 7px;
  font-size: 14px; line-height: 13px;
  font-family: 'consolas', 'lucida console', monospace;
  color: darkviolet; background-color: lightpink;
}

.v-control input::-moz-range-thumb {
  -moz-appearance: none;
  width: 4px; height: 19px;
  background: greenyellow;
  border: none; border-radius: 0;
}

.v-control input::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 4px; height: 19px;
  background: greenyellow;
  border: none; border-radius: 0;
}

.v-control span {
  cursor: pointer;
}

input.v-seekr {
  pointer-events: none;
  margin-left: 0; margin-right: 0;
  border-width: 1px 6px 1px 6px; border-color: mediumseagreen;
  border-radius: 4px; color: oldlace; background-color: mediumslateblue;
}

input.v-brite {
  pointer-events: none;
  margin-right: 0; padding-top: 0; padding-bottom: 0;
  border-width: 2px 6px 2px 6px; border-color: lightseagreen;
  border-radius: 4px; color: lightyellow; background-color: mediumpurple;
}

input.v-speed {
  margin-right: 1px; border-radius: 5px;
}

.t-alpha {
  display: inline-block; vertical-align: middle;
  padding: 0 3px 1px 3px; margin: 0 0 0 -1px;
  color: yellow; background-color: mediumpurple;
}

.t-alpha2 {
  padding: 0 4px 1px 4px; margin: 0; font-style: italic;
}

.play-lft {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 1px 0 0 0;
  border-style: solid; border-width: 9px 6px 9px 0px;
  border-color: transparent yellow transparent yellow;
}

.play-ctr {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 0;
  border-style: solid; border-width: 9px 2px 9px 2px;
  border-color: transparent;
}

.play-rgt {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 1px 1px 0 0;
  border-style: solid; border-width: 9px 0px 9px 6px;
  border-color: transparent yellow transparent yellow;
}

.pause-lft {
  height: 16px; margin: 2px 0 0 2px;
  border-width: 0 2px 0 2px;
}

.pause-rgt {
  height: 16px; margin: 2px 3px 0 0;
  border-width: 0 2px 0 2px;
}

.anim-bar {
  animation-name: waiting;
  animation-delay: 5s;
  animation-duration: 2.5s;
  animation-fill-mode: both;
  animation-direction: normal;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

@keyframes waiting {
   0%  { background-color: lightpink; }
  30%  { background-color: lightpink; }
  70%  { background-color: salmon; }
 100%  { background-color: lightpink; }
}

.t-alpha::selection {}

.v-control::selection {}

.v-control input::selection {
  color: yellow; background-color: orchid;
}

</style></div>

<script>  // Video control script. NOT inserted into a video frame.

var create_controls = function (vid)
{
  var control = document.getElementById ("video_control");
  control = control.cloneNode (true);
  control.style.display = "inline-block";

  var doc = control.firstElementChild;  // video control
  doc.onclick     = function(e) { vid_event (e); }
  vid.onmousemove = function(e) { vid_event (e); }
  doc.onmouseleave = function() { vid_cntrl (vid, 0); }
  doc.onmouseenter = function() { vid_cntrl (vid, 1); }

  var sib = doc.children;  // video control elements
  sib [0].onchange = function() { vid_click (this, 1); }
  sib [8].onclick  = function() { vid_click (this, 2); }
  sib [9].onchange = function() { vid_click (this, 3); }
  sib [10].onclick = function() { vid_click (this, 4); }
  sib [20].onclick = function() { vid_click (this, 5); }
  sib [21].onclick = function() { vid_click (this, 6); }
  sib [22].onclick = function() { vid_click (this, 7); }

  vid.onended      = function() { vid_cntrl (this, 1); }
  vid.onclick      = function() { vid_cntrl (this, 2); }
  vid.onplay       = function() { vid_cntrl (this, 3); }
  vid.onpause      = function() { vid_cntrl (this, 4); }
  vid.onseeking    = function() { vid_cntrl (this, 5); }
  vid.onwaiting    = function() { vid_cntrl (this, 6); }
  vid.onstalled    = function() { vid_cntrl (this, 7); }
  vid.ontimeupdate = function() { vid_cntrl (this, 8); }

  doc = vid.parentNode;  // document body
  doc.onresize = function() { vid_resize (vid); }
  doc.onfullscreenchange = function() { vid_cntrl (vid, 9); }

  doc.appendChild (control);
  vid_rotate (vid, sib, -1); vid_resize (vid);
  vid.checked = 0; sib [0].classList.add ("anim-bar");
}
////////////////////

var vid_error = function (vid)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  vid.disabled = true; vid.style.cursor = "default"; ctr.style.display = "initial";
  sib [0].classList.remove ("anim-bar"); sib [0].style.background = "crimson";
  sib [2].value = "ERROR"; sib [3].value = "!!!!!";
}

var vid_cntrl = function (vid, mode)
{
  if (vid.disabled && mode < 9) { if (mode == 2 && vid.value) popper (vid.value, 4); return; }

  var t = vid.currentTime, d = vid.duration; if (isNaN (t) || isNaN (d)) t = d = 0;
  var z = (t > 0 && d > 0) ? 400 * t / d : 0; z = Math.round (z) * 0.25;
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  if (ctr.value == undefined && mode > 2 && mode < 8) return;

  if (mode == 0)  // hide
  {
    ctr.disabled = false; if (ctr.value == undefined) return;
    ctr.value = 4; if (vid.paused) ctr.style.display = "none";
  }
  if (mode == 1)  // show
  {
    ctr.disabled = true; if (ctr.value == undefined) return;
    ctr.value = 0; ctr.style.display = "initial";
  }
  if (mode == 2)  // play/pause
  {
    vid.style.cursor = "default"; if (vid.paused) vid.play(); else vid.pause();
  }
  if (mode == 3)  // is playing
  {
    mode = 10; if (vid.value) popper (vid.value, 3);
    // special case of video paused at video start
    if (!ctr.disabled && ctr.value <= 0) ctr.value = 1 - ctr.value;
  }
  if (mode == 4)  // is paused
  {
    mode = 10; if (vid.value) popper (vid.value, 4);
    // special case of video paused while doing countdown or countup
    if (!ctr.disabled && ctr.value) { ctr.style.display = "none"; ctr.value = 0; }
  }
  if (mode == 5)  // is seeking
  {
    sib [0].style.background = "linear-gradient(90deg, coral " + z + "%, sandybrown 0%)";
  }
  if (mode == 6)  // is waiting
  {
    sib [0].style.background = "linear-gradient(90deg, coral " + z + "%, sandybrown 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }
  if (mode == 7)  // is stalled
  {
    sib [0].style.background = "linear-gradient(90deg, deeppink " + z + "%, hotpink 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }

  if (mode == 8)  // time update
  {
    if (t == vid.checked) return; vid.checked = t;
    var v = ctr.value, ts = Math.round (t), ds = Math.round (d);
    var th = Math.trunc (ts / 3600), dh = Math.trunc (ds / 3600); ts -= th * 3600; ds -= dh * 3600;
    var tm = Math.trunc (ts / 60), dm = Math.trunc (ds / 60); ts -= tm * 60; ds -= dm * 60;

    sib [0].style.background = "linear-gradient(90deg, skyblue " + z + "%, transparent 0%)";
    sib [2].value = th + ":" + (tm < 10 ? "0" : "") + tm + ":" + (ts < 10 ? "0" : "") + ts;
    sib [3].value = dh + ":" + (dm < 10 ? "0" : "") + dm + ":" + (ds < 10 ? "0" : "") + ds;

    if (v != undefined) v = v * 1; else
    {
      sib [0].classList.remove ("anim-bar"); v = (vid.paused || ctr.disabled) ? -5 : 6; mode = 10;
    }
    if (v > 0 && !--v) { ctr.style.display = "none"; v = -4; }
    if (v < 0 && !++v) vid.style.cursor = "none"; ctr.value = v;
  }

  if (mode == 9)  // fullscreen change
  {
    var fullscreen = ctr.parentNode.disabled;
    sib [22].style.outline = fullscreen ? "none" : "1px solid orange";
    ctr.parentNode.disabled = fullscreen ? false : true;
    if (ctr.value != undefined)
      { ctr.value = -8; ctr.disabled = false; ctr.style.display = "none"; }
  }

  if (mode == 10)
  {
    if (!vid.paused)
      { sib [5].classList.add ("pause-lft"); sib [7].classList.add ("pause-rgt"); } else
      { sib [5].classList.remove ("pause-lft"); sib [7].classList.remove ("pause-rgt"); }
  }
}
////////////////////

var vid_timer = function (vid, ctr, time)  // catch wait/stall false flags
{
  if (vid.currentTime == time)
  {
    if (!ctr.disabled) ctr.value = 4; ctr.style.display = "initial";
  }
}

var vid_click = function (item, mode)
{
  var ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  if (mode == 1)
  {
    var t = vid.duration * item.value; if (t < 0.5) t = 0.5;
    ctr.children [11].value = t.toFixed(2); vid.currentTime = t;
  }

  if (mode == 2) item.style.outline = (vid.muted = !vid.muted) ? "1px solid orange" : "none";

  if (mode == 3) { vid.muted = true; vid.volume = item.value; vid.muted = false; }

  if (mode == 4)
  {
    var v = ctr.children[11].value.split (":"), i, j = v.length; if (!j) return;
    var t = v[0][0]; if (t == "-") t = -1; else if (t == "+") t = 1; else t = 0;
    if (t) v[0] = v[0].substr(1);

    i = v[j-1] * 1; if (j > 1) i += v[j-2] * 60; if (j > 2) i += v[j-3] * 3600;
    if (t) { i *= t; i += vid.currentTime; }

    if (i < 0.5) i = 0.5; if (i > vid.duration) i = vid.duration; vid.currentTime = i;
  }

  if (mode == 5) vid_rotate (vid, ctr.children, 0);

  if (mode == 6) vid_rotate (vid, ctr.children, 1);

  if (mode == 7)
  {
    if (!ctr.parentNode.disabled) vid.parentNode.requestFullscreen(); else document.exitFullscreen();
  }
}
////////////////////

var vid_event = function (event)
{
  var item = event.target, node = item.nodeName, pop = item.parentNode;

  if (node == "VIDEO")  // show controls
  {
    var ctr = item.nextElementSibling.firstElementChild, h = item.step;
    item.style.cursor = "default"; if (ctr.value == undefined) return;
    h = h ? h * 1 : 0; h = (h & 2) ? item.clientWidth : item.clientHeight;
    if (ctr.value <= 0) ctr.value = -8; if (event.clientY > h - 50) vid_cntrl (item, 1);
  }
  if (node != "SPAN") return;

  var vid = pop.parentNode.previousElementSibling;
  var cls = item.classList; if (cls) cls = cls [0];

  if (cls) { if (cls.substr (0,5) == "play-") vid_cntrl (vid, 2); return; }

  var dir = (event.clientX < item.offsetLeft + item.offsetWidth / 2) ? -1 : 1;
  var sib = item.children [0], txt = sib.value, speed = txt * 1, d = vid.duration;

  if (speed)
  {
    speed += dir * 0.1; if (speed > 0.4) speed += dir * 0.1;
    if (speed > 2) speed += dir * 0.3; if (speed < 0.1) speed = 0.1; if (speed > 5) speed = 5;
    sib.value = speed.toFixed(1); vid.playbackRate = speed; return;
  }

  if (txt == "B") { vid_filter (vid, dir, 0); return; }
  if (txt == "S") { vid_filter (vid, dir, 1); return; }

  if (txt == "5s" ) dir *= 5;
  if (txt == "15s") dir *= 15;
  if (txt == "1m" ) dir *= 60;
  if (txt == "2m" ) dir *= 120;
  if (txt == "5m" ) dir *= 300;
  if (txt == "10m") dir *= 600;

  vid.currentTime = (dir += vid.currentTime) < 0.5 ? 0.5 : (dir > d ? d : dir);
}
////////////////////

var vid_resize = function (vid)
{
  var i, j = 0, k, h, w = vid.step; w = w ? w * 1 : 0;
  h = (w & 2) ? vid.clientWidth : vid.clientHeight;
  w = (w & 2) ? vid.clientHeight : vid.clientWidth;
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;

  h = (h / screen.height) * 10; h = h > 8 ? 12 : Math.round (h);
  ctr.style.paddingBottom = h > 5 ? h + "px" : ctr.style.paddingTop;
  sib [1].style.display = w < 380 ? "none" : "inline-block";

  var sizes = [0,0,0,0,0,0,0,0,0,0,38,87,36,42,36,36,36,42,31,31,0,0,0];
  var scale = [0,0,0,0,0,0,0,0,0,0, 6, 6, 8, 7, 5, 2, 4, 1, 3, 3,0,0,0];
  var block = [606,0,0,0,0,0,0,0,0];

  for (i = 0; i < sib.length; i++) if (k = scale [i]) block [k] += sizes [i] + 4;
  if ((w -= block [0]) < 80) for (j = 1; j < block.length; j++) if ((w += block [j]) >= 80) break;
  if (j > 5) for (i = 5; i > 3; i--) if (w - block [i] > 80) { w -= block [i]; block [i] = 0; }
  sib [9].style.width = w + "px";

  for (i = 0; i < sib.length; i++) if (k = scale [i])
    sib [i].style.display = (!block [k] || j < k) ? "inline-block" : "none";
}
////////////////////

var vid_rotate = function (vid, sib, mode)
{
  var x = vid.step ? vid.step : 0;
  if (mode == 0) x ^= 1; if (mode > 0) x += 2;
  vid.step = x = x & 7; var r = (x >> 1) * -90;

  vid.style.transform = "rotate(" + r + "deg)" + (x & 1 ? " scaleX(-1)" : "");

  sib [20].style.outline = x & 1 ? "1px solid orange" : "none";
  sib [21].style.outline = x > 1 ? "1px solid orange" : "none";

  if (x & 2)
  {
    vid.style.top = "calc(50vh - 50vw)";
    vid.style.left = "calc(50vw - 50vh)";
    vid.style.width = "100vh";
    vid.style.height = "100vw";
  }
  else
  {
    vid.style.top = vid.style.left = "0";
    vid.style.width = vid.style.height = "100%";
  }
}
////////////////////

var vid_filter = function (vid, dir, mode)
{
  var n, s, con, lvl, sat, filter = vid.style.filter;

  if (!filter) lvl = sat = 1; else
  {
    if ((n = filter.search ("brightness")) < 0) lvl = 1; else
      { s = filter.substr (n + 11); s = s.substr (0, s.search ("\\)")); lvl = s * 1; }
    if ((n = filter.search ("saturate")) < 0) sat = 1; else
      { s = filter.substr (n + 9); s = s.substr (0, s.search ("\\)")); sat = s * 1; }
  }
  sat = sat * 2 / (3 - lvl); if (mode) sat += dir * 0.14; else lvl += dir * 0.1;
  con = (8 - lvl * (5 - lvl)) * (3 + sat) / 16; sat = sat * (3 - lvl) / 2; 

  lvl = lvl.toFixed (2); sat = sat.toFixed (3); con = con.toFixed (2);
  vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
}

</script>

</html> 
