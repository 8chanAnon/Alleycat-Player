<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer">

<title>Alleycat Player</title>

<style type="text/css">

body {
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
}

.widevid {
  position: relative; overflow: hidden;
  width: 736px; height: 414px;
  border: 2px solid red; background-color: indigo;
}

.widevid img {
  top: 0; left: 0; right: 0; bottom: 0;
  position: absolute; width: 100%;
  height: auto; margin: auto; border: none;
}

.widevid:fullscreen {
  border: none;
}

.msgbox {
  position: absolute; top: 35%; left: 40%; right: 40%; display: block;
  text-align: center; border-radius: 10px;
  color: paleturquoise; background-color: slateblue;
  font-style: italic; cursor: pointer;
}

iframe {
  width: 100%; height: 100%;
  position: absolute; border: none;
  background-color: transparent;
  pointer-events: none;
}

.popbox {
  z-index: -1; width: 100%; height: 100%;
  position: absolute; pointer-events: none;
}

.popbox table {
  width: 100%; border:none; margin: 0; table-layout: fixed;
}

.popbox td {
  padding: 6px 8px 2px 8px;
}

.popbox button {
  width: 100%; height: auto;
  text-align: left; text-overflow: ellipsis;
  white-space: nowrap; overflow: hidden;
  font-size: 12px; line-height: 14px;
  font-family: 'segoe ui', serif;
  padding: 2px 5px 2px 5px; border-width: 1px;
  color: maroon; pointer-events: auto;
}

.ranger button {
  vertical-align: top; height: 22px;
  font-size: 13px; line-height: 19px;
  padding: 0px 4px 2px 4px; margin-top: 1px;
  color: darkred; background-color: lavenderblush;
}

.ranger input {
  width: 60px;
}

input {
  height: 17px; font-size: 13px;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 1px 2px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input.idspec {
  width: 100%; margin: -4px 0 -2px -8px;
  color: sienna; background-color: cornsilk;
}

input.urlspec {
  width: 65%; margin: 0 1px 0 4px; padding: 4px 6px 3px 6px;
  color: slateblue; background-color: cornsilk;
}

input.static {
  margin: 0 1px 0 2px; padding: 3px 0 3px 0;
  text-align: center; border: 1px solid lightsalmon;
  color: firebrick; background-color: papayawhip;
}

.dropbox {
  width: 100%; position: relative;
  display: inline-block; white-space: nowrap;
  color: firebrick; background-color: papayawhip;
}

.dropbox input {
  vertical-align: top;
  width: calc(100% - 32px); margin: -2px 0 -2px 0;
  color: inherit; background-color: inherit;
}

.dropbox button {
  vertical-align: top; width: 24px; height: 25px;
  font-size: 16px; line-height: 17px;
  margin: -2px 0 -2px 0; padding: 0 0 4px 0;
  font-family: 'segoe ui', serif; font-weight: bold;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  color: indianred; background-color: mistyrose;
}

.dropbox0 {
  color: sienna; background-color: cornsilk;
}

.dropbox1 {
  max-width: 320px; width: calc(100% + 9px); margin-left: -8px;
}

.dropbox2 {
  max-width: 270px; width: calc(100% + 9px);
  margin-left: -8px; margin-bottom: 1px; color: red;
}

.dropbox3 {
  width: 140px; margin-left: -8px; margin-bottom: -1px;
}

.dropdown {
  z-index: 2; max-height: 50vh;
  position: absolute; display: none;
  overflow-x: hidden; overflow-y: auto;
  margin: 4px 0 0 1px; outline: 1px solid peru;
  border-top: 3px solid transparent;
  border-bottom: 3px solid transparent;
  font-size: 13.5px; font-style: normal; font-weight: normal;
  font-family: 'consolas', 'lucida console', monospace;
  color: darkgreen; background-color: ivory; cursor: default;
}

.dropdown option {
  height: 15px; min-height: 15px; max-height: 15px;
  line-height: 15px; position: relative; text-align: left;
  margin: 0 3px 0 3px; padding: 0 22px 0 6px;
}

.dropdown0 {
}

.dropdown1 {
  max-height: calc(28 * 15px);
}

.dropdown2 {
  max-height: calc(26 * 15px);
}

.dropdown3 {
}

.pickpanel {
  z-index: 0; width: 166px; height: auto;
  position: relative; display: inline-block;
  overflow: hidden; margin: -1px 0 -2px 0; padding: 2px;
  outline: 1px solid thistle; border: 2px solid skyblue;
  color: mediumvioletred; background-color: cornsilk;
}

.pickpanel option {
  text-align: center; margin: 0; padding: 0 0 0 8px;
}

span.box {
  padding: 4px 3px 2px 2px;
  outline: 1px solid lightsteelblue;
}

th {
  border: 2px solid lightsalmon;
  color:crimson; background-color: pink;
}

table {
  border: 3px solid green;
}

table.list {
  border: 2px solid olivedrab;
}

td {
  font-size: 14px; line-height: 13px;
  padding: 0 4px 0 6px; color: saddlebrown;
  text-align: left; vertical-align: top;
}

td.textbox {
  font-size: 14px; line-height: 17px;
  width: 30vw; padding: 0 17px 0 17px;
  text-align: center; white-space: nowrap;
}

td.vidbox {
  font-size: 15px; line-height: normal;
  padding: 0 0 0 2px; vertical-align: middle;
  border-left: 1px solid firebrick;
}

td.grill {
  width: 35vw; margin: 0; padding: 0;
  vertical-align: middle; text-align: center;
  background: radial-gradient(goldenrod 15%,transparent 40%);
  background-size: 12px 6px; border-left: 1px solid firebrick;
}

button {
  width: auto; height: auto;
  font-size: 12px; line-height: 18px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  border-color: gainsboro;
}

button.is_off {
  margin: 2px 0 -1px 0;
  border-style: outset;
  background-color: pink;
}

button.is_on {
  margin: 2px 0 -1px 0;
  border-style: inset;
  background-color: lightgreen;
}

button.wrapper {
  width: 60px; height: 18px; font-size: 13px; line-height: 16px;
  margin: 1px -1px 0 -1px; padding: 0; border: 1px solid gold;
  color: red; background-color: blanchedalmond;
}

button.stack {
  font-size: 19px; line-height: 22px;
  padding: 2px 10px 2px 10px; background-color: pink;
}

h3 {
  vertical-align: top; padding-top: 5px; margin-bottom: 10px;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

.ir input {
  height: 17px; margin: 2px 5px -2px -1px;
}

.ir a {
  color: crimson; text-decoration: none;
}

::selection {
  color: yellow; background-color: orchid;
}

option:hover {
  color: yellow; background-color: orchid;
}

.mark {
  background-color: lightgray;
}

.show {
  display: block;
}

.r { color: crimson; }
.g { color: seagreen; }
.b { color: blue; }
.w { color: #A02000; }

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }
w_ { color: #A02000; }

</style></head>

<body
  onload="javascript:load_all()" onunload="javascript:dump_all()" onresize="javascript:resize_all()"
  onclick="javascript:MEOW(event)" onkeydown="javascript:MEOW(event)">

<h1><g_>A<r_>ll<g_>ey<r_>cat <g_>Pl<r_>ay<g_>er <r_>v4c</r_></h1>

<p><hr><p>

<div><g_>Pick a Proxy:</g_>&nbsp;
<div class="dropbox dropbox0" style="width:300px"><input type=text disabled
  value="To use this app, you must enable Javascript."><button>+</button>
<div id="proxy" class="dropdown dropdown0">
  <option value="http://35.210.173.135/" class="b">35.210.173.135
  <option value="https://xyss5.herokuapp.com/" class="b">xyss5.herokuapp.com
  <option value="LOCAL://localhost:8080/" class="r" checked>Local Proxy Server (Kraker)
  <option value="https://cors-anywhere.herokuapp.com/">cors-anywhere.herokuapp.com
  <option value="https://api.allorigins.win/raw?url=">api.allorigins.win
  <option value="">None
</div></div>
<b>&nbsp; &nbsp; &nbsp; Go to <a href="#sites">Site list</a> or <a href="#movies">Movie sites</a>
  or <a href="#notes">Special Notes</a> or <a href="#livestream">TV & Radio</a></b>
</div>

<p><hr><p>
CORS Unblockers:&nbsp;
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a> &nbsp;
<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/"
  target=_blank>Firefox only</a>
<p>
<r_>As of Firefox 74.0, these extensions do not work if you run Alleycat Player from a disk file (localhost is fine).</r_>

<p><hr><p>
<b>Instruction Manuals (<r_>archive.org</r_>) -- </b>
<a href="https://archive.org/download/alleycat-player/installation-v1.htm" target=_blank>Installation</a> --
<a href="https://archive.org/download/alleycat-player/manual-alleycat-v1.htm" target=_blank>Alleycat Player</a> --
<a href="https://archive.org/download/alleycat-player/manual-kraker-v1.htm" target=_blank>Local Proxy Server</a>
<p>
If you have not installed the <b>Kraker Local Proxy Server</b> then please go read the Installation Manual.
<p>
<b><b_>Your feedback is appreciated (suggestions or bug reports):</b>&nbsp;
<a target=_blank href="https://8kun.top/alleycat/catalog.html">Alleycat BBS</a>

<p><hr><p>
Press the "<b>End</b>" key to go to the bottom of the page. There you will find links to each of the video viewers.<br>
Pick a station and <b>play the radio</b>. Music soothes the heart and mind. You need to relax in these difficult times.

<p><hr><p>
<b>Release notes for v4c (September 19, 2020)</b>
<p>
<ul><li>
Updated: Twitter, Twitch TV, OpenLoadMovies, MixDrop
</li><li>
Twitter updated its public API, making more information accessible than before (which previously required a login). As a
result, the mp4 video format is now available instead of m3u8.
</li><li>
The trio of sources for US Internet TV (ustv247.tv, ustvgo.tv, watchnewslive.tv) changed their obfuscation algorithm. This
one is devious. It uses AES encryption and it took me all of a day to crack it. I imagine that those Kodi addons will be
blocked by this for a while or for good.
</li></ul>

<p><hr><p>
<b>Release notes for v4b (August 7, 2020)</b>
<p>
<ul><li>
New sites: CPAC (Canada), WatchCartoons, OpenLoadMovies
</li><li>
Updated: iHeartRadio, C-SPAN, CTV, BBC, VidNode, ClipWatching, MixDrop
</li><li>
Updated the scraper for ustv24h.live (US Internet TV).
</li><li>
Both CTV and BBC now offer the HLS/m3u8 format. Previously, only the DASH/mpd format was available. I guess this is a pretty
good indication that DASH is on the way out. Good for that. BBC must have spent millions promoting DASH but the
development process has been badly managed and the specifications have gotten mangled to the point that nobody is really
sure how that shit is supposed to work. Interoperability has been a major stumbling block. R.I.P.
</li></ul>

<p><hr><p>
<b>Release notes for v4a (June 29, 2020)</b>
<p>
Welcome to the newly refurbished Alleycat Player. Actually, not much has changed. If you have used this application before
then you won't see a major difference. What I've done is provide clearer instructions for the proper installation and usage
of this app. I think a lot of people were confused because the whole thing did have the appearance of a kludge. The
Local Proxy Server is a critical part of Alleycat Player.
<ul><li>
A bunch of Internet TV channels went down since the last version of Alleycat Player. They have been restored for the most
part but some Canadian channels are missing or not working well. I am looking for better sources.
</li><li>
New sites: Twitch TV, TikTok, Deutsche Welle.
</li><li>
Updated: InfoWars, LiveLeak, 123Movies, UniqueStream.
</li></ul>

<p><hr><p>
<h3 id="notes">Special Notes</h3>
<ul><li>
BitChute (also MixDrop) has an issue with Firefox due to the "Referer" header which is incorrectly being sent to the
destination server. This affects playback for some videos. This was not an issue until I started running Alleycat Player via
Kraker. The fix is to stream the video through Kraker.
</li><li>
Vimeo live streaming (m3u8) is supported. Requires Kraker or a CORS unblocker.
</li><li>
Brighteon videos will play with Kraker and also with the remote proxies marked with an asterisk.
</li><li>
InfoWars videos play as m3u8 but the mp4 version is available via the DLoad button.
</li><li>
Only podcasts are supported on iHeartRadio.
</li><li>
For Twitter short links (like "https://t.co/..."), use DIG to get the tweet ID.
</li><li>
For Periscope long links (like "https://www.pscp.tv/w/..." followed by 80 or so chars), use DIG to get the ID.
</li></ul><p>
Sites accessible with a Brightcove DIG:<br>
&nbsp;- https://www.stuff.co.nz<br>
&nbsp;- https://www.nzherald.co.nz<br>
&nbsp;- https://www.itv.com/goodmorningbritain<br>
&nbsp;- https://www.thesun.co.uk<br>
&nbsp;- https://www.channel4.com/news<br>
&nbsp;- https://www.express.co.uk<br>
&nbsp;- https://www.miamiherald.com<br>
&nbsp;- https://time.com<br>
&nbsp;- http://webtv.un.org
<p>
Sites accessible with a Podcasts DIG:<br>
&nbsp;- https://podcasts.apple.com<br>
&nbsp;- https://itunes.apple.com<br>
&nbsp;- https://www.stitcher.com<br>
&nbsp;- https://radiopublic.com<br>
&nbsp;- https://overcast.fm<br>
&nbsp;- https://www.podbean.com<br>
&nbsp;- https://www.spreaker.com
<p>
<!--
Sites accessible with a JWPlayer DIG:<br>
&nbsp;- STILL nothing here yet because I lost track of the two sites where this worked.
//-->
<p><hr><p>
There are three symbols used to indicate the options available for a particular site. [#]&nbsp;means no DIG option because
the video ID is always exposed. [?]&nbsp;means that video ID numbers are not available (you have to DIG). [+]&nbsp;means
that both ID numbers and the DIG option are supported.
<p>
Here is a rundown of each site, the available video formats and the site URL (link will open a new tab or window):
<p>
<h3 id="sites"><r_>Site List</r_>
  <small> -- Go to <a href="#info">Info viewer</a> or <a href="#news">News viewer</a>
    or <a href="#free">Movie viewer</a></small></h3>

<table class="list">

<tr><td>YouTube		</td><td>mp4/webm	</td><td>*</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://www.youtube.com">www.youtube.com</a></td></tr>

<tr><td>&nbsp; ---	</td><td>		</td><td> </td><td>[#] No Proxy</td>
<td><a target=_blank href="https://invidio.us">invidio.us</a></td>
<td><a target=_blank href="https://invidious.snopyta.org">invidious.snopyta.org</a></td></tr>

<tr><td>BitChute	</td><td>mp4		</td><td>?</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.bitchute.com">www.bitchute.com</a></td></tr>

<tr><td>Vimeo		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://vimeo.com">vimeo.com</a></td></tr>

<tr><td>InfoWars	</td><td>m3u8/mp4	</td><td>?</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.infowars.com">www.infowars.com</a></td>
<td><a target=_blank href="https://banned.video">banned.video</a></td></tr>

<tr><td>153News		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://153news.net">153news.net</a></td></tr>

<tr><td>LiveLeak	</td><td>mp4		</td><td>*</td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.liveleak.com">www.liveleak.com</a></td></tr>

<tr><td>Brighteon	</td><td>m3u8		</td><td>*</td><td>[+] KRAK!</td>
<td><a target=_blank href="https://www.brighteon.com">www.brighteon.com</a></td>
<td><a target=_blank href="https://www.naturalnews.com">www.naturalnews.com</a></td></tr>

<tr><td>DailyMotion	</td><td>m3u8		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://www.dailymotion.com">www.dailymotion.com</a></td></tr>

<tr><td>PragerU		</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.prageru.com">www.prageru.com</a></td></tr>

<tr><td>TEDTalks	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.ted.com">www.ted.com</a></td></tr>

<tr><td>Nat. Film Board	</td><td>m3u8		</td><td>*</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.nfb.ca">www.nfb.ca</a></td></tr>

<tr><td>Twitter		</td><td>mp4		</td><td>*</td><td>[+] KRAK</td>
<td><a target=_blank href="https://twitter.com">twitter.com</a></td>
<td><a target=_blank href="https://threadreaderapp.com">threadreaderapp.com</a></td></tr>

<tr><td>Facebook	</td><td>mp4		</td><td>?</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.facebook.com">www.facebook.com</a></td>
<td><a target=_blank href="https://www.instagram.com">www.instagram.com</a></td></tr>

<tr><td>Periscope	</td><td>m3u8		</td><td>?</td><td>[#] KRAK</td>
<td><a target=_blank href="https://www.pscp.tv">www.pscp.tv</a></td></tr>

<tr><td>Twitch TV	</td><td>m3u8		</td><td>*</td><td>[#] CORS</td>
<td><a target=_blank href="https://www.twitch.tv">www.twitch.tv</a></td></tr>

<tr><td>TikTok		</td><td>mp4		</td><td>?</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.tiktok.com">www.tiktok.com</a></td></tr>

<tr><td>SoundCloud	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="https://soundcloud.com">soundcloud.com</a></td></tr>

<tr><td>iHeartRadio	</td><td>mp3		</td><td></td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.iheart.com/podcast">www.iheart.com/podcast</a></td></tr>

<tr><td>Fox		</td><td>mp4/m3u8	</td><td>432p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.foxnews.com">www.foxnews.com</a></td>
<td><a target=_blank href="https://www.foxbusiness.com">www.foxbusiness.com</a></td></tr>

<tr><td>ABC		</td><td>mp4		</td><td>360p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://abcnews.go.com">abcnews.go.com</a></td></tr>

<tr><td>CBS		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.cbsnews.com">www.cbsnews.com</a></td></tr>

<tr><td>CNBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cnbc.com">www.cnbc.com</a></td></tr>

<tr><td>CNN		</td><td>mp4/m3u8	</td><td>*</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cnn.com">www.cnn.com</a></td>
<td><a target=_blank href="https://edition.cnn.com">edition.cnn.com</a></td></tr>

<tr><td>C-SPAN		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.c-span.org">www.c-span.org</a></td></tr>

<tr><td>MS/NBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.msnbc.com">www.msnbc.com</a></td>
<td><a target=_blank href="https://www.nbcnews.com">www.nbcnews.com</a></td></tr>

<tr><td>PBS		</td><td>m3u8		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.pbs.org">www.pbs.org</a></td></tr>

<tr><td>CBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cbc.ca">www.cbc.ca</a></td></tr>

<tr><td>CPAC		</td><td>m3u8		</td><td>540p</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cpac.ca">www.cpac.ca</a></td></tr>

<tr><td>CTV		</td><td>m3u8		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.ctvnews.ca">www.ctvnews.ca</a></td></tr>

<tr><td>Global		</td><td>mp4		</td><td>540p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://globalnews.ca">globalnews.ca</a></td></tr>

<tr><td>TVO		</td><td>mp4		</td><td>360p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.tvo.org">www.tvo.org</a></td></tr>

<tr><td>BBC		</td><td>m3u8		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.bbc.com">www.bbc.com</a></td>
<td><a target=_blank href="https://www.bbc.co.uk/sounds">www.bbc.co.uk/sounds</a></td></tr>

<tr><td>Press TV	</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.presstv.com">www.presstv.com</a></td>
<td><a target=_blank href="http://presstvdoc.com">presstvdoc.com</a> (mp4)</td></tr>

<tr><td>Al Jazeera	</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.aljazeera.com">www.aljazeera.com</a></td></tr>

<tr><td>Bloomberg	</td><td>mp4		</td><td>*</td><td>[+] KRAK</td>
<td><a target=_blank href="https://www.bloomberg.com">www.bloomberg.com</a></td></tr>

<tr><td>Deutsche Welle	</td><td>mp4		</td><td>*</td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.dw.com">www.dw.com</a></td></tr>

</table>
<p>

? = unknown or auto-select (m3u8/mpd)<br>
* = user selectable (via format box)<br>
! = use the Sandbox option to embed the video.<br>
KRAK = only accessible with the Local Proxy Server (Kraker)<br>
CORS = only accessible with a CORS unblocker (or Kraker)

<p><hr><p><h3 id="movies"><r_>Movie Sites</r_>
  <small> -- Go to <a href="#free">Movie viewer</a> or <a href="#sites">Info/News</a></small></h3>

<table class="list">

<tr><td>TubiTV		</td><td>m3u8		</td><td>*</td><td>[+] CORS</td>
<td><a target=_blank href="https://tubitv.com">tubitv.com</a></td></tr>

<tr><td>VidNode		</td><td>mp4/m3u8	</td><td>*</td><td>[+] KRAK!</td>
<td><a target=_blank href="https://vidcloud9.com">vidcloud9.com</a> !</td>
<td><a target=_blank href="https://vidnode.net">vidnode.net</a> !</td><tr>

<tr><td>123Movies	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://ww1.top123movieslive.com">ww1.top123movieslive.com</a> !</td>
<td><a target=_blank href="https://0123moviesback.com">0123moviesback.com</a> !</td></tr>

<tr><td>UniqueStream	</td><td>mp4		</td><td>*</td><td>[?] KRAK</td>
<td><a target=_blank href="https://uniquestream.net">uniquestream.net</a></td><tr>

<tr><td>WatchCartoons	</td><td>mp4		</td><td>*</td><td>[?] KRAK</td>
<td><a target=_blank href="https://www.wco.tv">www.wco.tv</a></td><tr>

<tr><td>OpenLoadMovies	</td><td>mp4		</td><td>*</td><td>[?] KRAK</td>
<td><a target=_blank href="https://openloadmovies.ch">openloadmovies.ch</a> !</td><tr>

<tr><td>PagalMovies	</td><td>mp4		</td><td>?</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.pagalmovies.rent">www.pagalmovies.rent</a></td><tr>

<tr><td>XHamster	</td><td>mp4		</td><td>*</td><td>[#] KRAK!</td>
<td><a target=_blank href="https://xhamster.com">xhamster.com</a></td></tr>

<tr><td>ClipWatching	</td><td>mp4/m3u8	</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://clipwatching.com">clipwatching.com</a> !</td></tr>

<tr><td>CloudVideo	</td><td>m3u8		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://cloudvideo.tv">cloudvideo.tv</a> !</td></tr>

<tr><td>GoUnlimited	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://gounlimited.to">gounlimited.to</a> !</td></tr>

<tr><td>MixDrop		</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://mixdrop.co/">mixdrop.co</a> !</td><tr>

<tr><td>StreamVid	</td><td>m3u8		</td><td>?</td><td>[#] KRAK!</td>
<td><a target=_blank href="https://streamvid.co">streamvid.co</a> !</td><tr>

<tr><td>UpStream	</td><td>m3u8/mp4	</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://upstream.to">upstream.to</a> !</td><tr>

<tr><td>VideoBin	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://videobin.co">videobin.co</a> !</td><tr>

<tr><td>VidLox		</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://vidlox.me">vidlox.me</a> !</td><tr>

<tr><td>Vidoza		</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://vidoza.net">vidoza.net</a> !</td></tr>

<tr><td>XStream		</td><td>mp4		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://xstreamcdn.com">xstreamcdn.com</a> !</td>
<td><a target=_blank href="https://www.fembed.com">www.fembed.com</a> !</td></tr>

<tr><td>AudioRealm	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="http://audiorealm.com">audiorealm.com</a></td></tr>

</table>
<p>
! on a site url = use caution on these sites due to popup ads<br>
! on Proxy or CORS or KRAK = use the Sandbox option to embed the video.
<p>
Note that quality level (example: [720]) may not be the same as resolution.
<p><hr><p>
These sites are supported under XStream:
<p>
<a target=_blank href="https://www.fembed.com">www.fembed.com</a><br>
<a target=_blank href="https://streamhoe.online">streamhoe.online</a><br>
<a target=_blank href="https://myvidis.top">myvidis.top</a><br>
<p>
These sites are supported under "General DIG":
<p>
<a target=_blank href="https://www.lunchflix.com">www.lunchflix.com</a> (GoUnlimited)<br>
<a target=_blank href="https://watchmoviesfree.org">watchmoviesfree.org</a> (XStream)<br>
<a target=_blank href="https://www.criticbay.com">www.criticbay.com</a> (MixDrop)<br>
<p>
Some search sites to get video links from:
<p>
<a target=_blank href="https://ololo.to/">ololo.to</a><br>
<a target=_blank href="https://crocovid.com/">crocovid.com</a><br>
<a target=_blank href="https://seriesfreetv.com/">seriesfreetv.com</a><br>
<a target=_blank href="https://www1.swatchseries.to">www1.swatchseries.to</a><br>
<a target=_blank href="https://www.downloads-anymovies.com">www.downloads-anymovies.com</a><br>
<a target=_blank href="https://www.watchepisodes4.com">www.watchepisodes4.com</a><br>
<a target=_blank href="https://www.primewire.li">www.primewire.li</a><br>
<a target=_blank href="https://xmovies8.is">xmovies8.is</a><br>
<a target=_blank href="https://pubfilms.club">pubfilms.club</a><br>

<h3 id="livestream"><r_>Internet TV</r_><small> &nbsp;--&nbsp; TV Guide:&nbsp;
  <a target=_blank href="https://ustv247.tv/tv-guide/">ustv247.tv</a>&nbsp;
  <a target=_blank href="https://ustvgo.tv/tv-guide/">ustvgo.tv</a>&nbsp;
  <a target=_blank href="https://watchnewslive.tv/tv-guide/">watchnewslive.tv</a>
</small></h3>

Go to the <a href="#free">Movie viewer</a>, select a TV stack and press the button for the desired channel.
That's it. All channels are m3u8 live streams and most are not region locked. Some channels require an initial
lookup (thus requiring a CORS proxy or unblocker) to find the direct stream URL. Such URLs are temporary and will
time out (anywhere from a few hours to two days). Alleycat Player will refresh the link after two hours.
<p>
Some channels have two stream sources. This is indicated with a plus sign (+) after the channel name. A double-plus
indicates that the streams are from different local stations. Select "webm" in the format panel to access the
secondary channel.

<h3><r_>Internet Radio</r_></h3>

Simply go to the bottom of the page and press a radio button to play the Internet Radio. That's it.
For your convenience, the radio will pause when you play a video. Press the Clear button to unpause.
You can also open a radio station in a popup window.
<p>
You can input your own URL for either an mp4 or an mp3 or whatever your
browser supports. To play a YouTube video in audio-only mode, just enter the 11-character video id.
<p>
To find some radio station URLs, you can use the AudioRealm DIG tool supplied with the <a href="#free">Movie viewer</a>.
Also supplied is a stack with links to iHeartRadio and Virtual DJ. These will pop up a window with an embedded web site.
</p>

<div style="width: 90vw; height: 50vh"></div>

<!--
////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////
//-->

<h3 id="info"><r_>Info + Entertainment</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#news">News viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#info">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr5z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 3  class="b">invidious.toot.koeln
  <option value= 4  class="b">invidious.13ad.de
  <option value= 5  class="b">invidious.fdn.fr
  <option value= 6  class="b">invidious.ggc-project.de
  <option value= 7  class="b">watch.nettohikari.com
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr5x" class="static" disabled>
<button onclick="javascript:brightness(5,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr5y" class="static" disabled>
<button onclick="javascript:brightness(5,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadid(5,0)">Play ID</button>
<button onclick="javascript:reset_frame(5)">Clear</button>
<p></p>

<input type=text id="id5" maxlength=256 class="idspec" onfocus="javascript:hidelist(5)"
  onclick="javascript:input_onclick('id5')" onblur="javascript:input_onblur('id5')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk5" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src5" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 ># mp4 - BitChute
  <option value= 2 ># mp4 - Vimeo
  <option value= 3 >+ m3u - InfoWars
  <option value= 11># mp4 - 153News
  <option value= 13># mp4 - LiveLeak
  <option value= 4 >+ m3u - Brighteon
  <option value= 5 ># m3u - DailyMotion
  <option value= 8 >? mp4 - PragerU
  <option value= 6 >? mp4 - TEDTalks
  <option value= 7 >+ m3u - NatFilmBrd
  <option value= 21>+ mp4 - Twitter
  <option value= 22>? mp4 - Facebook
  <option value= 26>+ m3u - Periscope
  <option value= 27># m3u - Twitch TV
  <option value= 28># mp4 - TikTok
  <option value= 20 class="r">+ mp4 - BrightCove
  <option value= 24 class="b">+ mp3 - SoundCloud
  <option value= 25 class="b"># mp3 - iHeartRadio
  <option value= 23 class="b">? mp3 - Podcasts
  <option value= 10 class="r">? ----- URL Test
</div></div>

<p><span class="box">
<input type=checkbox id="mov5f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov5p" checked> Use Proxy
</span></p>

<div><div id="fmt5" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win5" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn5a" class="is_off" onclick="javascript:buttonpress(5,0)">New Window</button> &nbsp;&nbsp;
<button id="btn5b" class="is_off" onclick="javascript:buttonpress(5,1)">Popup Window</button>
<p style="margin-top:-1px"></p>

<input type=checkbox id="mov5m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov5n"> No Play
<p style="margin-top:-2px"></p>

<input type=radio id="mov5a" name="chk5"> Raw&nbsp;
<input type=radio id="mov5b" name="chk5" checked><button onclick="javascript:toggle_hls(5,0)"
  class="wrapper" id="hls5">Wrapper</button><input type=radio id="mov5c" name="chk5"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop5"></div>
<h2 id="vid5" class="msgbox" onclick="javascript:popper(5,1)">No Video</h2>
<iframe id="mov5" name="mov5" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadid(5,1)">Play URL</button>
<button onclick="javascript:urlcopy(5)">Copy</button>
<button onclick="javascript:digid(5)"><b_>DIG</b_></button>

<input type=text id="line5" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line5')" onblur="javascript:input_onblur('line5')">

<input type=text id="meta5" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="stack" id="stk5-1" onclick="javascript:copylist(5,1)">Stack 1</button>
<button class="stack" id="stk5-2" onclick="javascript:copylist(5,2)">Stack 2</button>
<button class="stack" id="stk5-3" onclick="javascript:copylist(5,3)">Stack 3</button>
&nbsp;
<button class="stack" id="stk5-4" onclick="javascript:copylist(5,4)">BitChute</button>
<button class="stack" id="stk5-5" onclick="javascript:copylist(5,5)">Vimeo</button>
<button class="stack" id="stk5-6" onclick="javascript:copylist(5,6)">InfoWars</button>
</p>

<div style="width: 90vw; height: 50vh"></div>

<!--
/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////
//-->

<h3 id="news" style="margin-bottom:10px"><r_>News & Propaganda</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#info">Info viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#news">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr6z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr6x" class="static" disabled>
<button onclick="javascript:brightness(6,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr6y" class="static" disabled>
<button onclick="javascript:brightness(6,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadnews(6,0)">Play ID</button>
<button onclick="javascript:reset_frame(6)">Clear</button>
<p></p>

<input type=text id="id6" maxlength=256 class="idspec" onfocus="javascript:hidelist(6)"
  onclick="javascript:input_onclick('id6')" onblur="javascript:input_onblur('id6')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk6" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src6" class="dropdown dropdown2">
  <option value=0  class="w">YouTube / Invidious
  <option value= 1  >+ mp4 - Fox
  <option value= 2  >+ mp4 - ABC
  <option value= 3  >? m3u - CBS
  <option value= 4  >+ mp4 - CNBC
  <option value= 5  >? mp4 - CNN
  <option value= 6  >? m3u - C-SPAN
  <option value= 7  >+ mp4 - MS/NBC
  <option value= 8  >+ m3u - PBS
  <option value= 11 class="w">+ mp4 - CBC
  <option value= 15 class="w">? m3u - CPAC
  <option value= 12 class="w">+ m3u - CTV
  <option value= 13 class="w">+ mp4 - Global
  <option value= 14 class="w">+ mp4 - TVO
  <option value= 21 class="b">+ m3u - BBC
  <option value= 24 class="b">? m3u - Press TV
  <option value= 22 class="b">+ mp4 - Al Jazeera
  <option value= 25 class="b">+ mp4 - Bloomberg
  <option value= 26 class="b"># mp4 - Deutsche Welle
</div></div>

<p><span class="box">
<input type=checkbox id="mov6f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov6p" checked> Use Proxy
</span></p>

<div><div id="fmt6" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win6" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn6a" class="is_off" onclick="javascript:buttonpress(6,0)">New Window</button> &nbsp;&nbsp;
<button id="btn6b" class="is_off" onclick="javascript:buttonpress(6,1)">Popup Window</button>
<p style="margin-top:-1px"></p>

<input type=checkbox id="mov6m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov6n"> No Play
<p style="margin-top:-1px"></p>

<input type=radio id="mov6a" name="chk6"> Raw&nbsp;
<input type=radio id="mov6b" name="chk6" checked><button onclick="javascript:toggle_hls(6,0)"
  class="wrapper" id="hls6">Wrapper</button><input type=radio id="mov6c" name="chk6"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop6"></div>
<h2 id="vid6" class="msgbox" onclick="javascript:popper(6,1)">No Video</h2>
<iframe id="mov6" name="mov6" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadnews(6,1)">Play URL</button>
<button onclick="javascript:urlcopy(6)">Copy</button>
<button onclick="javascript:dignews(6)"><b_>DIG</b_></button>

<input type=text id="line6" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line6')" onblur="javascript:input_onblur('line6')">

<input type=text id="meta6" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="stack" id="stk6-1" onclick="javascript:copylist(6,11)">Stack 1</button>
<button class="stack" id="stk6-2" onclick="javascript:copylist(6,12)">Stack 2</button>
<button class="stack" id="stk6-3" onclick="javascript:copylist(6,13)">Stack 3</button>
&nbsp;
<button class="stack" id="stk6-4" onclick="javascript:copylist(6,14)">Fox</button>
<button class="stack" id="stk6-5" onclick="javascript:copylist(6,15)">PBS</button>
<button class="stack" id="stk6-6" onclick="javascript:copylist(6,16)">BBC</button>
</p>

<div style="width: 90vw; height: 50vh"></div>

<!--
////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////
//-->

<h3 id="free"><r_>FREE Movies & TV</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#movies">Movie Sites</a> or <a href="#sites">Info/News</a>
  &nbsp; | &nbsp; <a href="#free">snap</a> &nbsp; &nbsp;

<div class="dropbox dropbox0" style="width:160px"><input type=text disabled><button>+</button>
<div id="ctr7z" class="dropdown dropdown0">
  <option value= 11 >youtube.com
  <option value= 1  class="b">invidio.us
  <option value= 2  class="b">invidious.snopyta.org
  <option value= 10 class="r" checked>Youtube DASH
</div></div> &nbsp;

<span class="ranger" style="white-space: nowrap"> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr7x" class="static" disabled>
<button onclick="javascript:brightness(7,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr7y" class="static" disabled>
<button onclick="javascript:brightness(7,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3>

<table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadmovie(7,0)">Play ID</button>
<button onclick="javascript:reset_frame(7)">Clear</button>
<p></p>

<input type=text id="id7" maxlength=256 class="idspec" onfocus="javascript:hidelist(7)"
  onclick="javascript:input_onclick('id7')" onblur="javascript:input_onblur('id7')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk7" class="dropdown dropdown1">
  <option value="" class="w">Select a radio/TV stack
</div></div>
<p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src7" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 >+ m3u - TubiTV
  <option value= 2 >+ m3u - VidNode
  <option value= 3 >? mp4 - 123Movies
  <option value= 5 >? m3u - UniqueStream
  <option value= 7 >? mp4 - WatchCartoons
  <option value= 6 >? mp4 - OpenLoadMovies
  <option value= 4 >? mp4 - PagalMovies
  <option value= 8 ># mp4 - XHamster
  <option value= 10 class="b">? mp4 - General DIG
  <option value= 16 class="r"># mp4 - ClipWatching
  <option value= 15 class="r"># m3u - CloudVideo
  <option value= 12 class="r"># mp4 - GoUnlimited
  <option value= 19 class="r"># mp4 - MixDrop
  <option value= 20 class="r"># m3u - StreamVid
  <option value= 17 class="r"># m3u - UpStream
  <option value= 14 class="r"># mp4 - VideoBin
  <option value= 13 class="r"># mp4 - VidLox
  <option value= 18 class="r"># mp4 - Vidoza
  <option value= 11 class="r"># mp4 - XStream
  <option value= 31 class="b">+ mp3 - AudioRealm
</div></div>

<p><span class="box">
<input type=checkbox id="mov7f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov7p" checked> Use Proxy
</span></p>

<div><div id="fmt7" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div>
<p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win7" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div>
<p></p>

<button id="btn7a" class="is_off" onclick="javascript:buttonpress(7,0)">New Window</button> &nbsp;&nbsp;
<button id="btn7b" class="is_off" onclick="javascript:buttonpress(7,1)">Popup Window</button>
<p style="margin-top:-1px"></p>

<input type=checkbox id="mov7m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov7n"> No Play
<p style="margin-top:-2px"></p>

<input type=radio id="mov7a" name="chk7"> Raw&nbsp;
<input type=radio id="mov7b" name="chk7" checked><button onclick="javascript:toggle_hls(7,0)"
  class="wrapper" id="hls7">Wrapper</button><input type=radio id="mov7c" name="chk7"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop7"></div>
<h2 id="vid7" class="msgbox" onclick="javascript:popper(7,1)">No Video</h2>
<iframe id="mov7" name="mov7" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadmovie(7,1)">Play URL</button>
<button onclick="javascript:urlcopy(7)">Copy</button>
<button onclick="javascript:digmovie(7)"><b_>DIG</b_></button>

<input type=text id="line7" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line7')" onblur="javascript:input_onblur('line7')">

<input type=text id="meta7" class="static" disabled style="width:85px">

<p style="text-align:center">
<button class="stack" id="stk7-1" onclick="javascript:copylist(7,-21)">Radio</button>
<button class="stack" id="stk7-2" onclick="javascript:copylist(7,-22)">Dance</button>
&nbsp;
<button class="stack" id="stk7-3" onclick="javascript:copylist(7,-23)">TV US1</button>
<button class="stack" id="stk7-4" onclick="javascript:copylist(7,-24)">TV US2</button>
<button class="stack" id="stk7-5" onclick="javascript:copylist(7,-25)">TV US3</button>
&nbsp;
<button class="stack" id="stk7-6" onclick="javascript:copylist(7,-26)">TV UK+</button>
<button class="stack" id="stk7-7" onclick="javascript:copylist(7,-27)">TV Alt</button>
&nbsp;
<button class="stack" id="stk7-8" onclick="javascript:copylist(7,-28)">Int'l 1</button>
<button class="stack" id="stk7-9" onclick="javascript:copylist(7,-29)">Int'l 2</button>
</p>

<div style="width: 90vw; height: 50vh"></div>

<!--
//////////////////////////
///// INTERNET RADIO /////
//////////////////////////
//-->

<h1 style="text-align:center"><r_>Internet Radio</r_></h1>

<div align=center>
<button onclick="javascript:ir_action(0)">Stop</button>
<button onclick="javascript:ir_action(1)">Pause</button>
<button onclick="javascript:ir_action(2)">Play</button>&nbsp;
<input type=text value="Stopped" size=9 class="static" id="ir_status" disabled>&nbsp;
<button onclick="javascript:ir_action(3)" class="is_off" id="ir_popup">Popup</button>
&nbsp; <r_>Volume</r_> :&nbsp;
<button onclick="javascript:ir_action(4)" style="font-size:13px;padding-top:0">&lt;</button>
<input type=text value="50" size=3 class="static" id="ir_volume" disabled>
<button onclick="javascript:ir_action(5)" style="font-size:13px;padding-top:0">&gt;</button>
</div>
<p>
<table class="list ir" style="width:100%;margin-top:-2px;padding-bottom:2px">

 <tr><th>Talk Radio
</th><th>Cool Music
</th><th>Funky Music
</th><th>Just Garbage
</th><th>More Garbage
</th></tr><tr>

<td><input type=radio name="ir" onclick="javascript:radio
  ('https://streaming-ent.shoutcast.com/foxnews')"><a target=_blank
    href='https://radio.foxnews.com/'>Fox News Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://radio.talkradio.co.uk/stream')"><a target=_blank
    href='https://radio2you.co.uk/talkradio/schedule'>Talk Radio UK</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://17813.live.streamtheworld.com/KTIEAM_SC')"><a target=_blank
    href='https://am590theanswer.com/'>Conservative Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://216.240.133.178:3005/;')"><a target=_blank
    href='http://republicbroadcasting.org/program-schedule/'>Republic Broadcasting</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://mediaserver3.afa.net:8443/talk.mp3')"><a target=_blank
    href='https://afr.net/podcasts/afr-program-lineup/'>American Family Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://edge2-b.exa.live365.net/a81754')"><a target=_blank
    href='https://www.goodtalkradio.com/radio-program-schedule/'>Good Talk Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.infowars.com/;')"><a target=_blank
    href='https://www.infowars.com/watch-alex-jones-show/'>InfoWars Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://18593.live.streamtheworld.com/BLZE_1AAC.aac')"><a target=_blank
    href='https://www.theblaze.com/st/radio'>The Blaze Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://s2.radio.co/s572ad25f7/listen')"><a target=_blank
    href='http://redstatetalkradio.com/radio-schedule/'>Red State Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamer.radio.co/s43edd6852/listen')"><a target=_blank
    href='https://thefringe.fm/schedule/'>The Fringe FM</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://tfrlive.net:8000/stream')"><a target=_blank
    href='https://tfrlive.com/listen-live/'>Truth Frequency Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://listen.radioking.com/radio/308429/stream/355388')"><a target=_blank
    href='http://darkmatterdigitalnetwork.com/'>Dark Matter Digital</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://darnwi.com:8000/stream')"><a target=_blank
    href='http://darnwi.com/live-stream-2/'>Devil's Advocates Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://ice8.securenetsystems.net/VARIETY')"><a target=_blank
    href='https://www.voiceamerica.com/#home-schedule'>Voice America</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://cast.bbstalkradio.com/proxy/bbsradio?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 1</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://cast.bbstalkradio.com/proxy/bbsradio2?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 2</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://85.25.43.55/rock_classics.mp3')">Star FM Rock Classics
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://radio.rockindocradio.net:8600/;')">Rockin Doc Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://shoutcastunlimited.com:8890/;')">Lynx Classic Rock
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://jamfm.hoerradar.de/jamfm-mp3-128')">Jam FM Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://62.210.10.4:8928/stream/1/')">Gem Radio New Wave
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://149.56.183.178:8090/;')">Retro Hits
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.dancewave.online:8080/dance.mp3')">Dance Wave
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://colombiawebs.com.co:8106/;')">Salsa Mexico
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamingp.shoutcast.com/hotmixradio-dance-128.mp3')">Hot Mix Dance
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://nl1.lounge-radio.com:8010/;')">Lounge Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://fr3.1mix.co.uk:8000/stats/;')">1Mix Radio Trance
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://centova.radioservers.biz:8021/;')">Starlite Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel1.mp3')">Virtual DJ: ClubZone
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel2.mp3')">Virtual DJ: TheGrind
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel3.mp3')">Virtual DJ: Hypnotica
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel4.mp3')">Virtual DJ: PowerBase
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://janus.cdnstream.com:5140/live')">Radio Free Americana
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://116.202.241.212:8010/;')">Venice Classic Radio Italia
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://tropicalisima.org:9002/;')">Tropicalisma FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://lin3.ash.fastserv.com:6026/stream_96')">Rockabilly Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://91.121.91.172:9414/;stream/1')">Dandelion Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi.entranced.fm:80/;')">Entranced FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://94.23.30.114:8071/;')">Toxxic Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://46.105.118.14:17500/;')">Spexx FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1_mf_q')">BBC Radio 1
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1xtra_mf_q')">BBC Radio 1-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio2_mf_q')">BBC Radio 2
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio3_mf_q')">BBC Radio 3
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4fm_mf_q')">BBC Radio 4
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4extra_mf_q')">BBC Radio 4-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio5live_mf_q')">BBC Radio 5-Live
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_6music_mf_p')">BBC Radio 6-Music
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://server-14.stream-server.nl:8300/;')">Nashville FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://shoutcast.countrypowerstation.net:8000/;')">Country Power Station
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamingp.shoutcast.com/hotmixradio-hiphop-128.mp3')">Hot Mix Hip-hop
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://s10.voscast.com:8872/;')">Wu World Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('8tilKaOINmE')"><g_>Danheim: <i>Mannavegr</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('RM_J5cFy70M')"><g_>Audiomachine: <i>Decimus</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('w6MiJUTZ6n8')"><g_>Classic Rock - Greatest Hits</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('https://el-dorado.stream.laut.fm/el-dorado')">Radio El Dorado
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://111.223.51.7:8000/;stream/1/')">COOL fahrenheit
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://bluford.torontocast.com:8519/;')">Asia Dream Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi5.streamingsoundtracks.com:80/;')">Streaming Sound Tracks
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://136.0.17.26:8000/;')">Radio Africa Online
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://195.154.217.103:8123/;')">Radio Mi Amigo Int'l
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://jakarta.nagaswarafm.com:8088/stream')">Nagaswara FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://46.105.118.14:7550/;')">BeMyRadio Schlager
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://174.37.159.206:8118/;')">iRie Rockers
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://162.244.80.106:8108/;')">Tune Disney Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://94.23.148.11:8130/;')">SRC FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://217.146.71.146:8000/live2')">Rahva Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('JMmpmHdnXK4')"><g_>Creedence Clearwater Revival</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('kW0Fy88ilEs')"><g_>Beatles: <i>White Album</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('PGl26ZOxNCU')"><g_><i>Star Trek</i> Music</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

</table>

<div align=center style="font-size:8px">
<p><audio id="internet_radio" controls style="width:85vw;height:45px"
  onerror="javascript:ir_action(-2)"></audio>

<p><input type=text class="urlspec" id="ir_url"
  onclick="javascript:input_onclick('ir_url')" onblur="javascript:input_onblur('ir_url')">

<p style="font-size:initial">
<a href="#info">Info</a>&nbsp; | &nbsp;<a href="#news">News</a>&nbsp; | &nbsp;<a href="#free">Movies</a>

</div><div style="width:90vw;height:calc((100vh - 636px) * 0.55)"></div>

</body>

<script id="cryptojs"></script>
<script>

/////////////////////////
///// User Settings /////
/////////////////////////

var invidious_site = [
  "https://invidio.us",			// default
  "https://invidio.us",
  "https://invidious.snopyta.org",
  "https://invidious.toot.koeln",
  "https://invidious.13ad.de",
  "https://invidious.fdn.fr",
  "https://invidious.ggc-project.de",
  "https://watch.nettohikari.com"
];

var invidious_url = invidious_site [0];

var list_1 = [
    ":NOZKLtIIUZE" , "Hitler Rant"
  , ":m_MaJDK3VNE" , "Herding Cats"
  , ":hTa1t_9HfFQ" , "Mike Hammer"
  , ":uaPKEbVypRQ" , "Typing Lesson"
  , ":0fDOdzY18XE" , "V - The Miniseries"
  , ":kJAsn_vJyY4" , "Starship Enterprise"
];

var list_2 = [
    ":We-HMZDSWFU" , "Me and You and a Dog Named Boo"
  , ":8Pa9x9fZBtY" , "Sultans of Swing"
  , ":6Ath-3JGk8M" , "Flashdance: What A Feeling"
  , ":onJspmvJr0E" , "Flashdance: Love's Theme"
  , ":FnV0LqHd3h8" , "Make America Great Again"
  , ":xB4iFysPm9Q" , "Karolina Protsenko"
];

var list_3 = [
    ":8sPWIrF0oSY" , "Jack Benny meets Perry Mason"
  , ":CGq8Ee2gOe4" , "DooM at QuakeCon"
  , ":5iV_hB08Uns" , "Boston Dynamics Robot"
  , ":0pKfxbCHLoU" , "AKB48: Sustainable"
  , ":rqU_gsBYdr0" , "Ajisai Al Ai Monogatani"
];

var list_4 = [
    "b:fmOZPrv27xs"  , "Dil Jaaniye"
  , "b:6wNFJIbTxNk"  , "Batla House"
  , "b:sSKnCoWAbDos" , "Brother Nathaniel"
  , "b:A7jZJfaEJK2p" , "Malice in the Palace"
  , "b:Ol2plIF2otcI" , "QAnon Proofs"
];

var list_5 = [
    "v:129463420" , "Miniatur Wunderland"
  , "v:166403522" , "Some Kind of Quest"
  , "v:31883614"  , "Star Trek: Aurora"
  , "v:322694559" , "Great Martian War"
  , "v:175806163" , "Martian American"
];

var list_6 = [
    "i:5d4c9fd22ec69a001858eb60" , "Alex Jones"
  , "i:5d4a339571d8e00017f8afaf" , "Owen Shroyer"
  , "i:5d4c54aae936660017aee3c0" , "Kaitlin Bennett"
];

var list_7 = [
];

var list_8 = [
];

var list_9 = [
];

var news_1 = [
];

var news_2 = [
];

var news_3 = [
];

var news_4 = [
    "fox:6041387345001" , "Steve Hilton"
  , "fox:6035600008001" , "Judge Jeanine Pirro"
];

var news_5= [
    "pbs:3007398789" , "Nova: Bird Brain (2018) [region lock]"
  , "pbs:2365338020" , "Austin City Limits: 40 Years (2014)"
  , "pbs:1946795242" , "Frontline: WikiSecrets (2011)"
];

var news_6 = [
    "bbc:p035dt58" , "Dragonfly"
  , "bbc:p076m7sh" , "Desert Art"
  , "bbc:p07bj7pv" , "Follow the Food"
];

var news_7 = [
];

var news_8 = [
];

var news_9 = [
];

var free_1 = [
    "a:" , "majic-100-7483"
  , "a:" , "chum-1045-6270"
  , "a:" , "iheartradio-top-20-7556"
  , "a:" , "the-hit-mix-7553"
  , "a:" , "z1035-7757"
  , "a:" , "canadian-rock-7552"
  , "a:" , "971-the-eagle-2241"
  , "a:" , "heavy-rock-7554"
  , "a:" , "z100-1469"
  , "a:" , "1027-kiis-fm-los-angeles-185"
  , "a:" , "y100-561"
  , "a:" , "1017-the-bull-6586"
  , "a:" , "1035-kiss-fm-849"
  , "a:" , "alt-987-los-angeles-201"
  , "a:" , "1035-ktu-1473"
  , "a:" , "1067-lite-fm-1477"
  , "a:" , "smooth-jazz-4242"
  , "a:" , "the-vinyl-experience-6878"
  , "a:" , "iheart80s-radio-5060"
  , "a:" , "lone-star-925-3379"
  , "a:" , "q1043-1465"
  , "b:clubzone"  , "Virtual DJ: ClubZone"
  , "b:thegrind"  , "Virtual DJ: TheGrind"
  , "b:hypnotica" , "Virtual DJ: Hypnotica"
  , "b:powerbase" , "Virtual DJ: PowerBase"
];

var free_2 = [
    "8:http://akaram.zecast.net/akaram-live/akarammix1/playlist.m3u8"		, "Akaram Mix (India)"
  , "8:http://live.streams.ovh:1935/cannali/cannali/playlist.m3u8"		, "Cannali HD (Greece)"
  , "/1/504.1/1 8:http://vcndstv.teleosmedia.com/stream/dstv/dstv/playlist.m3u8" , "DanceStar TV (US)"
  , "/1/0/0 7:http://azroe0x-lh.akamaihd.net/i/test_1@775856/index_1000_av-p.m3u8" , "Ditty TV (US)"
  , "8:http://bitcdn-kronehit.bitmovin.com/v2/hls/index.m3u8"			, "KroneHit TV (Austria)"
  , "8:https://a.jsrdn.com/broadcast/g8sfF32l0/c.m3u8"				, "Latido Music (US-Spain)"
  , "/0/0/1 7:http://mangotv01.streamprolive.com/hls/live.m3u8"			, "Mango TV (Dominican Republic)"
  , "8:http://186.155.200.118:1935/live/MelodyChannel/playlist.m3u8"		, "Melody Channel (Colombia)"
  , "8:http://live-edge01.telecentro.net.ar/live/smil:musictop.smil/index.m3u8" , "Music Top (Argentina)"
  , "8:http://nancy-webtv.vedge.infomaniak.com/livecast/nancy-webtv/playlist.m3u8" , "Nancy Web TV (France)"
  , "0:nMxQcOCKOB4"								, "Nature TV (YouTube)"
  , "8:http://live.streams.ovh:1935/NGradio/NGradio/playlist.m3u8"		, "NG Radio (Greece)"
  , "8:https://5be019f0d8c6e.streamlock.net/ngroup/ngrp:NRJHitsTV_all/playlist.m3u8" , "NRJ Hits (France)"
  , "8:http://ocko-live.ssl.cdn.cra.cz/channels/ocko_expres/playlist.m3u8"	, "Ocko Expres (Czech Republic)"
  , "8:http://vcp1.myplaytv.com:1935/oxigenotv/oxigenotv/playlist.m3u8"		, "Oxigeno TV (US)"
  , "8:https://593b04c4c5670.streamlock.net/portalfoxmix/portalfoxmix/playlist.m3u8" , "Portal Fox Mix (Chile)"
  , "8:http://livetv.powerapp.com.tr/powertv/powerhd.smil/chunklist.sltur.m3u8"	, "Power HD (Turkey)"
  , "8:http://capital_tv-lh.akamaihd.net/i/CapitalTv_1@183098/master.m3u8"	, "Radio Capital (Italy)"
  , "8:http://stream.rjtv.tv/live/smil:rjtv.smil/playlist.m3u8"			, "Radio Javan (US-Iran)"
  , "8:http://web.onair-radio.eu:1935/video/video/index.m3u8"			, "Reload TV (Greece)"
  , "8:http://stream.mediawork.cz/retrotv/retrotvHQ1/playlist.m3u8"		, "Retro Music (Czech Republic)"
  , "8:https://rutv.gcdn.co/streams/1410_1272/playlist.m3u8"			, "RU TV (Russia)"
  , "0:qWf-FPFmVw0"								, "Shuffle Dance Music (YouTube)"
  , "8:http://web.onair-radio.eu:1935/Alpha-Host/Alpha-Host/playlist.m3u8"	, "Siganos Music (Greece)"
  , "/0/576.1/0 7:https://stream-33.mazana.tv:443/slagr2.m3u"			, "Slagr 2 (Czech Republic)"
  , "/0/0/1 7:http://www.sonus.fm:1935/public/stream_720p/chunklist.m3u8"	, "Sonus FM (Germany)"
  , "8:http://cdn25.live247stream.com/steelbirdmusic/tv/playlist.m3u8"		, "Steelbird Music (India)"
  , "8:https://a.jsrdn.com/broadcast/redx4332g5/c.m3u8"				, "Stingray Classica (Canada)"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumostingrayqello/CDN/master.m3u8" , "Stingray Qello (Canada)"
  , "8:http://live.stranafm.cdnvideo.ru/stranafm/smil:stranafm.smil/playlist.m3u8" , "Strana FM (Russia)"
  , "/1/504.1/1 8:http://vcndstv.teleosmedia.com/stream/dstv/sunburn/playlist.m3u8" , "Sunburn TV (US)"
  , "8:http://186.155.200.118:1935/live/telemusica_web/index.m3u8"		, "TeleMusica (US)"
  , "8:https://5cefcbf58ba2e.streamlock.net/tltvweb/tltvweb.stream/playlist.m3u8" , "Top Latino TV (Colombia)"
  , "8:https://content.uplynk.com/channel/36953f5b6546464590d2fcd954bc89cf.m3u8" , "VH-1 (Europe-UK)"
  , "8:http://wms.shared.streamshow.it/visualradio/mp4:visualradio/playlist.m3u8" , "Visual Radio (Turkey)"
];

var free_3 = [
    "/1/0/0/0/2/2 1a:stream=ABC 8:https://d2nt5wxzqbe1ad.cloudfront.net/out/raycom-wwsb1-hls/live.m3u8", "ABC *++"
  , "8:https://content.uplynk.com/channel/3324f2467c414329b3b0cc5cd987b6be.m3u8"	, "ABC News"
  , "/1/0/0/2/0/0 1a:stream=AMC 6a:watch/amc"						, "AMC *+*"
  , "8:http://liveproduseast.global.ssl.fastly.net/btv/desktop/us_live.m3u8"		, "Bloomberg"
  , "/1/0/0/2/0/0 1a:stream=CBS 6a:watch/cbs"						, "CBS *++*"
  , "8:http://cbsn-us-cedexis.cbsnstream.cbsnews.com/out/v1/55a8648e8f134e82a470f83d562deeca/master.m3u8" , "CBS News"
  , "/1/0/0/2/0/0 1a:stream=CNBC 6a:watch/cnbc-2"					, "CNBC *+*"
  , "/1/0/0/2/0/0 1a:stream=CNN 6a:watch/cnn-2"						, "CNN *+*"
  , "7a:c-span"										, "C-SPAN *"
  , "8:http://etlive-mediapackage-fastly.cbsaavideo.com/live/manifest.m3u8"		, "ET Live"
  , "/1/0/0/2/0/0 1a:stream=FOX 6a:watch/fox"						, "Fox *++*"
  , "/1/0/0/2/0/0 1a:stream=FoxBusiness 6a:watch/fox-business"				, "Fox Business *+*"
  , "/1/0/0/0/540.2/0 1a:stream=FoxNews 6a:watch/fox-news-hd"				, "Fox News *+*"
  , "1a:stream=Freeform"								, "Freeform **"
  , "/1/0/0/2/0/0 1a:stream=FX 6a:watch/fx-live"					, "FX *+*"
  , "1b:stream=FXMovie"									, "FXM **"
  , "1b:stream=FXX"									, "FXX **"
  , "/1/0/0/2/0/0 1a:stream=MSNBC 6a:watch/msnbc"					, "MSNBC *+*"
  , "/1/0/0/2/0/0 1a:stream=NBC 6a:watch/nbc-2"						, "NBC *++*"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumo-nbcnewsnow/CDN/master.m3u8"	, "NBC News"
  , "/1/0/0/404.2/0/0 1a:stream=OAN 4a:view/89549"					, "OAN *++*"
  , "/1/0/0/2/2/2 1a:stream=PBS 7:**https://www.streamaway.net/us/pbs/index.m3u8"	, "PBS *++*"
  , "/0.1/0.1/0.1 7:http://live-poptv-fastly-prod.global.ssl.fastly.net/pop/master.m3u8" , "Pop TV"
  , "8:https://dotstudio.vo.llnwd.net/v1/livestreams/popstar/master/ec9207ed6819582289cfdc7569d8065cc8aca126/Popstar_-_Frequency/playlist.m3u8"
    , "PopStar!"
  , "1b:stream=SundanceTV"								, "Sundance **"
  , "/1/0/0/2/0/0 1a:stream=SYFY 6a:watch/syfy"						, "Syfy *+*"
  , "/1/0/0/2/0/0 1a:stream=TBS 6a:watch/tbs"						, "TBS *+*"
  , "/1/0/0/2/0/0 1a:stream=CW 6a:watch/the-cw"						, "The CW *++*"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-tmz/CDN/master.m3u8" , "TMZ"
  , "6a:watch/tnt"									, "TNT **"
  , "6a:watch/usa-network"								, "USA Network **"
  , "8:http://voa-lh.akamaihd.net/i/voa_mpls_tvmc6@320298/master.m3u8"			, "Voice of America"
  , "1b:stream=WETV"									, "We TV **"
  , "8:http://weather-lh.akamaihd.net/i/twc_1@92006/master.m3u8"			, "Weather Channel"
  , "8:http://cdnapi.kaltura.com/p/931702/sp/93170200/playManifest/entryId/1_oorxcge2/format/applehttp/protocol/http/uiConfId/28428751/a.m3u8"
    , "WeatherNation TV"
];

var free_4 = [
    "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-adventuresportsnetwork/CDN/master.m3u8"
    , "Adventure Sports"
  , "8:https://a.jsrdn.com/broadcast/ghk33s9x/c.m3u8"					, "AWE Encore"
  , "8:https://a.jsrdn.com/broadcast/4df1bf71c1/+0000/c.m3u8"				, "Chive TV"
  , "1b:stream=DIY"									, "DIY Network **"
  , "8:https://imgedge.akamaized.net/amagi_hls_data_imgAAA2AA-edgesports/CDN/playlist.m3u8" , "EDGE Sport"
  , "8:https://a.jsrdn.com/broadcast/7582ed85f7/+0000/c.m3u8"				, "Entrepreneur"
  , "8:https://a.jsrdn.com/broadcast/7536b84786/+0000/c.m3u8"				, "Field & Stream"
  , "8:http://210.210.155.35/uq2663/h/h05/index.m3u8"					, "Fight Sports"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-food52/CDN/master.m3u8" , "Food 52"
  , "1c:stream=HGTV"									, "HGTV **"
  , "8:http://1111296894.rsc.cdn77.org/LS-ATL-56868-1/index.m3u8"			, "Hunt Channel"
  , "8:http://ott.mobcrush.com/hls/0/ott.m3u8"						, "Mobcrush"
  , "1b:stream=MotorTrend"								, "Motor Trend **"
  , "8:http://rbmn-live.akamaized.net/hls/live/590964/BoRB-AT/master.m3u8"		, "Red Bull TV"
  , "8:https://feed.rightnowtelevision.com/live/smil:rntv.smil/playlist.m3u8"		, "Right Now TV"
  , "8:https://d2klx6wjx7p5vm.cloudfront.net/Rooster-teeth/ngrp:Rooster-teeth_all/playlist.m3u8" , "Rooster Teeth"
  , "8:http://runway-hls.secdn.net/runway-live/play/runway/playlist.m3u8"		, "Runway TV"
  , "8:http://tastemadessai.akamaized.net/amagi_hls_data_tastemade-tastemade/CDN/master.m3u8" , "Tastemade"
  , "8:https://bcovlive-a.akamaihd.net/r8ceb94e3229b4c0bb2dd461dacb3ab07/us-east-1/6057994532001/playlist_dvr.m3u8"
    , "Tastytrade"
  , "8:http://content.uplynk.com/channel/1831163f97674328ad9f4b4814ed39c5.m3u8"		, "TBD (Sinclair)"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/1524/streams/live/iphone/playlist.m3u8" , "TWiT"
  , "8:https://wfcint.mediacdn.ru/cdn/wfcint/playlist.m3u8"				, "World Fashion Channel"
  , "8:http://vcnxcorps.teleosmedia.com/stream/xcorps/xcorps/playlist.m3u8"		, "Xcorps TV"
  , "8:http://gideommd.mmdlive.lldns.net/gideommd/d5b6a753f86e4e51b8e15c7d23887a4f/manifest.m3u8" , "You Too America"
  , "6a:watch/fox-sports-1"								, "Fox Sports 1 **"
  , "6a:watch/fox-sports-2-fs2-live"							, "Fox Sports 2 **"
  , "8:https://a.jsrdn.com/broadcast/80f6ba72c8/+0000/c.m3u8"				, "MMA Junkie"
  , "6a:watch/nba-tv"									, "NBA TV **"
  , "6a:watch/nbc-sports-network-nbcsn"							, "NBC Sports **"
  , "6a:watch/nfl-network"								, "NFL Network **"
  , "6a:watch/nhl-network"								, "NHL Network **"
  , "/0/432.1/0 7:http://ott-live.olympicchannel.com/out/u/OC1_3.m3u8"			, "Olympic Channel"
  , "8:http://bcovlive-a.akamaihd.net/6b4f1a5aed2b46d6a139e3cb83f8dc42/us-east-1/5994000126001/8036529875f74c81b5f50851bffbc421/playlist_ssaiM.m3u8"
    , "Stadium TV"
  , "8:https://playoutengine.sinclairstoryline.com/playout/9f87522c-5a0e-4ff4-b82c-d5564216132f.m3u8" , "Tennis Channel"
  , "6a:watch/wwe-network"								, "WWE Network **"
];

var free_5 = [
    "8:http://hlsdpi-cdn-chqtx02.totalstream.net/dpilive/247retro/ret/dai/playlist.m3u8" , "24/7 Retro TV"
  , "6a:watch/ahc-american-heroes-channel"						, "American Heroes **"
  , "8:http://170.178.189.70:1935/live/Stream1/playlist.m3u8"				, "American Horrors"
  , "8:*,,*http://video.blivenyc.com/broadcast/prod/2061/22/desktop-playlist.m3u8"	, "American Kennel Club *"
  , "/1/0/0/2/0/0 1c:stream=Animal 6a:watch/animal-planet"				, "Animal Planet *+*"
  , "/1/0/0/2/0/0 1c:stream=CN 6a:watch/cartoon-network-2"				, "Cartoon Network *+*"
  , "8:http://classicarts.global.ssl.fastly.net/live/cas/master.m3u8"			, "Classic Arts Showcase"
  , "1c:stream=Comedy"									, "Comedy Central **"
  , "8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo123-contv/CDN/master.m3u8", "CON TV"
  , "8:http://content.uplynk.com/channel/87c82188ea944bcb961c34236b9648b0.m3u8"		, "Court TV"
  , "1c:stream=Disney"									, "Disney Channel **"
  , "8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-docuramaA/CDN/master.m3u8" , "Docurama Channel"
  , "8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-dovenow/CDN/master.m3u8" , "Dove Channel"
  , "8:https://dust.sinclair.wurl.com/manifest/playlist.m3u8"				, "Dust Film Shorts"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmriseclassictv/CDN/master.m3u8"
    , "FilmRise Classic TV"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmrisefreemovies/CDN/master.m3u8"
    , "FilmRise Free Movies"
  , "1c:stream=HMM"									, "Hallmark Movies & Mysteries **"
  , "6a:watch/hbo"									, "HBO - Home Box Office **"
  , "6a:watch/history-channel"								, "History Channel **"
  , "1b:stream=HLN"									, "HLN - Headline News **"
  , "1c:stream=ID"									, "Investigation Discovery **"
  , "8:http://dai2.xumo.com/amagi_hls_data_xumo1234A-lawcrime/CDN/master.m3u8"		, "Law & Crime"
  , "1b:stream=LifetimeM"								, "Lifetime Movies **"
  , "8:https://a.jsrdn.com/broadcast/5oWx2VgEmK/+0000/c.m3u8"				, "Lone Star"
  , "6a:watch/national-geographic"							, "National Geographic **"
  , "/1/0/0/2/0/0 1c:stream=Nickelodeon 6a:watch/nickelodeon"				, "Nickelodeon *+*"
  , "/288.1/432.1/1 3a:5cb0cae7a461406ffe3f5213"					, "Paramount Movie Channel *"
  , "8:https://a.jsrdn.com/broadcast/447912f76b/+0000/c.m3u8"				, "Popular Science"
  , "/1/0/0/2/0/0 1b:stream=Science 6a:watch/science-channel"				, "Science Channel *+*"
  , "6a:watch/showtime"									, "Showtime **"
  , "1c:stream=TCM"									, "TCM - Turner Classic Movies **"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-theasylum/CDN/master.m3u8" , "The Asylum"
  , "8:https://a.jsrdn.com/broadcast/9Kl3dcb5l/c.m3u8"					, "The Film Detective"
  , "8:https://a.jsrdn.com/broadcast/4hhfi556/c.m3u8"					, "Unidentified"
  , "8:http://184.173.179.163:1935/victorytelevisionnetwork/victorytelevisionnetwork/playlist.m3u8" , "Victory TV"
];

var free_6 = [
    "7:**https://uk.easyview.eu/hls/bbc-london.m3u8"				, "BBC 1 **"
  , "7:**https://uk.easyview.eu/hls/bbc-two.m3u8"				, "BBC 2 **"
  , "7:**https://uk.easyview.eu/hls/nbcb.m3u8"					, "BBC News **"
  , "7:**https://uk.easyview.eu/hls/cbeebies.m3u8"				, "CBeebies **"
  , "7:**https://uk.easyview.eu/hls/channel4.m3u8"				, "Channel 4 **"
  , "7:**https://uk.easyview.eu/hls/channel5.m3u8"				, "Channel 5 **"
  , "7:**https://uk.easyview.eu/hls/itv.m3u8"					, "ITV 1 **"
  , "7:**https://uk.easyview.eu/hls/itv2.m3u8"					, "ITV 2 **"
  , "7:**https://uk.easyview.eu/hls/itv3.m3u8"					, "ITV 3 **"
  , "7:**https://uk.easyview.eu/hls/itv4.m3u8"					, "ITV 4 **"
  , "0:9Auq9mYxFEE"								, "Sky News UK (YT)"
  , "8:https://stream.skynewsarabia.com/hls/sna.m3u8"				, "Sky News Arabia"
  , "8:http://securecontributions.sechls01.visionip.tv/live/securecontributions-securecontributions-spotlighttv-hsslive-25f-SD/master.m3u8"
    , "Spotlight TV"
  , "8:http://csm-e.cds1.yospace.com/csm/live/74246610.m3u8"			, "TG 4 (Ireland)"
  , "8:http://live.alsace20.fr/live/alsace20/ngrp:alsace20_all/playlist.m3u8"	, "Alsace 20 (France)"
  , "/0/0/1 7:https://tv5pacifiqueen-i.akamaihd.net/hls/live/630175-b/tv5pacifiqueen/tv5pacifique_eng_1200.m3u8"
    , "TV 5 Pacifique (France)"
  , "8:http://mv2.tvfrancophonie.org/live/Stream1/index.m3u8"			, "TV Francophonie (France)"
  , "8:http://streamcast.oc3n.net:1935/TVPI/myStream700.sdp/live.m3u8"		, "TVPI (France)"
  , "8:http://static.france24.com:80/live/F24_EN_HI_HLS/live_tv.m3u8"		, "France 24 - English"
  , "8:http://static.france24.com:80/live/F24_FR_HI_HLS/live_tv.m3u8"		, "France 24 - French"
  , "8:http://static.france24.com:80/live/F24_AR_HI_HLS/live_tv.m3u8"		, "France 24 - Arabic"
  , "8:https://abc-iview-mediapackagestreams-2.akamaized.net/out/v1/6e1cc6d25ec0480ea099a5399d73bc4b/index.m3u8"
    , "ABC News (Australia)"
  , "/0/540.1/0 7:http://livecbcdai-i.akamaihd.net/hls/live/567245/event2/CBCNN/master1.m3u8" , "CBC News (Canada)"
  , "/0/540.1/0 7:http://cbclivedai5-i.akamaihd.net/hls/live/567235/event2/CBOT/master1.m3u8" , "CBOT (Ottawa)"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/623607/15364602001/tvokids/master.m3u8" , "TVO Kids"
  , "8:https://bcovlive-a.akamaihd.net/86e93a0ab79047e1b216e2b0a1ac5363/us-east-1/6150020952001/playlist.m3u8"
    , "Tele-Quebec"
  , "8:https://2-fss-2.streamhoster.com/pl_138/201748-1282640-1/playlist.m3u8"	, "Newfoundland TV"
  , "8:http://knstream1.azureedge.net/knlive/knlive.m3u8"			, "Knowledge Network (BC)"
];

var free_7 = [
    "0:R9NsHYKxGUM"								, "AfricaNews (YT)"
  , "8:https://live-hls-web-aje.getaj.net/AJE/index.m3u8"			, "Al Jazeera"
  , "/0/576.1/0 7:https://live.cgtn.com/500/prog_index.m3u8"			, "CGTN News"
  , "/0/576.1/0 7:https://livedoc.cgtn.com/500d/prog_index.m3u8"		, "CGTN Documentary"
  , "8:https://dwstream4-lh.akamaihd.net/i/dwstream4_live@131329/master.m3u8"	, "Deutsche Welle"
  , "8:https://bozztv.com/36bay2/gin/giniko_euronews_800kb_36bay2/index.m3u8"	, "EuroNews"
  , "8:https://nhkworld.webcdn.stream.ne.jp/www11/nhkworld-tv/global/2003458/live.m3u8" , "NHK World Japan"
  , "8:https://live2.presstv.com/liveprs/smil:liveprs.smil/playlist.m3u8"	, "Press TV"
  , "8:http://rt-news-gd.secure2.footprint.net/1103.m3u8"			, "RT News"
  , "8:http://rt-doc-gd.secure2.footprint.net/1101.m3u8"			, "RT Documentary"
  , "8:http://d7g1ebft2592.cloudfront.net/mblivev3/480p/playlist.m3u8"		, "TeleSUR"
  , "8:http://tv-trtworld.live.trt.com.tr/master.m3u8"				, "TRT World"
  , "8:http://live.chdrstatic.com/cbn/primary/index.m3u8"			, "Cheddar News"
  , "8:http://edge.free-speech-tv-live.top.comcast.net/out/u/fstv.m3u8"		, "Free Speech TV"
  , "8:http://nmxlive.akamaized.net/hls/live/529965/Live_1/index.m3u8"		, "NewsMax TV"
  , "8:http://broadcastny.yournewsnet.com:8081/master/newsnetweb/playlist.m3u8" , "NewsNet Live"
  , "8:https://a.jsrdn.com/broadcast/h3h4gsui4/c.m3u8"				, "The First TV"
  , "8:https://tyt-xumo-us.amagi.tv/hls/amagi_hls_data_tytnetwor-tyt-xumo/CDN/master.m3u8" , "TYT - The Young Turks"
  , "/0.1/0.1/0.1 7:https://freespeech.akamaized.net/hls/live/2016712/live2/playlist.m3u8" , "InfoWars - Alex Jones"
  , "/0.1/0.1/0.1 7:https://freespeech.akamaized.net/hls/live/2016873/live3/playlist.m3u8" , "InfoWars - David Knight"
  , "/0.1/0.1/0.1 7:https://freespeech.akamaized.net/hls/live/2016873/live4/playlist.m3u8" , "InfoWars - Owen Shroyer"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680602/1242843915001_1/master.m3u8" , "CPAC - English"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680604/1242843915001_3/master.m3u8" , "CPAC - French"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680603/1242843915001_2/master.m3u8" , "CPAC - Bilingual"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253565/NASA-NTV1-Public/master.m3u8" , "NASA Official **"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253566/NASA-NTV2-Media/master.m3u8" , "NASA Media **"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/6540154/streams/live/iphone/playlist.m3u8" , "NASA Official"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/10414700/streams/live/iphone/playlist.m3u8" , "NASA Media"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/17074538/streams/live/iphone/playlist.m3u8" , "NASA ISS"
  , "8:http://bcliveunivsecure-lh.akamaihd.net/i/un150_A1_1@575439/master.m3u8" , "UN Web TV"
];

var free_8 = [
    "8:http://ebsonair.ebs.co.kr/groundwavefamilypc/familypc1m/master.m3u8"	, "EBS-1 (South Korea)"
  , "8:http://ebsonair.ebs.co.kr:1935/ebs2familypc/familypc1m/index.m3u8"	, "EBS-2 (South Korea)"
  , "8:http://ebsonair.ebs.co.kr:1935/ebsutablet500k/tablet500k/playlist.m3u8"	, "EBS Kids (South Korea)"
  , "8:http://rthklive1-lh.akamaihd.net/i/rthk31_1@167495/master.m3u8"		, "RTHK-31 (Hong Kong)"
  , "8:http://rthklive2-lh.akamaihd.net/i/rthk32_1@168450/master.m3u8"		, "RTHK-32 (Hong Kong)"
  , "0:gIB2egm7tL8" 								, "Kompas TV (Indonesia, YT)"
  , "0:vCDDYb_M2B4" 								, "CCTV-4 (China, YT)"
  , "/0/576.1/0 7:*,,*http://zhibo.hkstv.tv/livestream/mutfysrq/playlist.m3u8"	, "HKS TV (China) *"
  , "/0/1/0 7:http://live.ntdimg.com/live400/playlist.m3u8"			, "NTD (US-China)"
  , "8:http://103.14.38.107:1935/live/mnb.stream/playlist.m3u8"			, "MNB (Mongolia)"
  , "8:http://kazakhtvru.ultraiptv.com/live_ru/playlist.m3u8"			, "Kazakh TV (Kazakhstan)"
  , "8:http://iptv.tapesh.tv/tapesh/playlist.m3u8"				, "PBC Tapesh (US-Iran)"
  , "8:http://dmisxthvll.cdn.mangomolo.com/dubaitv/smil:dubaitv.stream.smil/playlist.m3u8" , "Dubai TV (UAE)"
  , "8:https://tv-trtturk.live.trt.com.tr/master.m3u8"				, "TRT Turk (Turkey)"
  , "8:http://bozztv.com/36bay2/gin/giniko_armenia1tv_800kb_36bay2/index.m3u8"	, "Public TV Armenia"
  , "8:http://live-echotv.cdnvideo.ru/echotv/echotv.sdp/playlist.m3u8"		, "Echo TV (Russia)"
  , "8:http://hls.mirtv.cdnvideo.ru/mirtv-parampublish/mirtv3_2500/playlist.m3u8" , "Mir TV (Russia)"
  , "8:http://tvchannelstream1.tvzvezda.ru/cdn/tvzvezda/playlist.m3u8"		, "Zvezda TV (Russia)"
  , "0:TYBcOiVJ-HQ" 								, "Lubelska TV (Poland, YT)"
  , "/0/576.1/0 7:http://stream.tvkujawy.pl:8080/live/broadcast.m3u8"		, "TV Kujawy (Poland)"
  , "8:https://slagrtv-live-hls.ssl.cdn.cra.cz/channels/slagrtv/playlist.m3u8"	, "Slagr TV (Czech Republic)"
  , "/0/0/1 7:http://stream.fs1.tv:8080/hls/webstream.m3u8"			, "FS1 Salzburg (Austria)"
  , "8:https://5857499ee635b.streamlock.net/radiowesertv-live/_definst_/mp4:livestreamTV/playlist.m3u8"
    , "Radio Weser TV (Germany)"
  , "8:http://wms.shared.streamshow.it:1935/supertv/supertv/live.m3u8"		, "Super TV (Italy)"
  , "8:http://cld03wz.tv2000.it/tv2000_main.m3u8"				, "TV 2000 (Italy)"
  , "8:http://live.streams.ovh:1935/tvfilopoli/tvfilopoli/playlist.m3u8"	, "TV Filopoli (Greece)"
  , "8:http://cdnamd-hls-globecast.akamaized.net/live/ramdisk/al_aoula_inter/hls_snrt/al_aoula_inter.m3u8"
    , "Al Aoula (Morocco)"
  , "8:http://558bd16067b67.streamlock.net/nos_pais_24_7/smil:livestream.stream.smil/playlist.m3u8"
    , "Nos Pais (Curacao)"
  , "8:http://d2ajt1gpdtnw25.cloudfront.net/mbliveMain/480p/playlist.m3u8"	, "TeleSUR (Venezuela)"
  , "8:http://mdstrm.com/live-stream-playlist/5a7b1e63a8da282c34d65445.m3u8"	, "Multimedios Costa Rica"
  , "8:http://cdn.elsalvadordigital.com:1935/wowtv/wowtv/playlist.m3u8"		, "Wow! TV (El Salvador)"
  , "/0/0/1 8:http://live.canaloncelive.tv:1935/livepkgr2/smil:internacional.smil/playlist.m3u8" , "Canal Once (Mexico)"
  , "8:http://streamingcws20.com:1935/lobodurango/videolobodurango/playlist.m3u8" , "TV Lobo (Mexico)"
  , "1b:stream=Telemundo"								, "Telemundo (US) **"
  , "1b:stream=Univision"								, "Univision (US) **"
];

var free_9 = [
    "8:http://unlimited1-us.dps.live/atv/atv.smil/playlist.m3u8"		, "Antofagasta TV (Chile)"
  , "/1/0/0 7:http://cdnh4.iblups.com/hls/OVJNKV4pSr.m3u8"			, "Chicos iPe (Peru)"
  , "/0/1/0 7:https://rcnhd.cdn.net.co/live01/rcnhd.m3u8"			, "Canal RCN (Colombia)"
  , "8:http://tv02.logicahost.com.br:1935/itutv/itutv/live.m3u8"		, "Canal ITV (Brazil)"
  , "8:https://v7.ciclano.io:1443/tvmar/tvmar/playlist.m3u8"			, "TV Mar (Brazil)"
  , "/0/0/1 8:https://wowzaprod133-i.akamaihd.net/hls/live/577385/a1e0ad3f/playlist.m3u8" , "Mello TV (Jamaica)"
  , "8:http://bozztv.com/36bay2/gin/giniko_rts1_900kb_36bay2/index.m3u8"	, "RTS-1 (Senegal)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti1.smil/playlist.m3u8" , "RTI-1 (Ivory Coast)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti2.smil/playlist.m3u8" , "RTI-2 (Ivory Coast)"
  , "8:http://bozztv.com/36bay2/gin/giniko_jordan_900kb_36bay2/index.m3u8"	, "Jordan TV"
  , "8:https://svs.itworkscdn.net/royalive/royatv.smil/playlist.m3u8"		, "Roya TV (Jordan)"
  , "8:https://rmtv24hweblive-lh.akamaihd.net/i/rmtv24hweben_1@300662/master.m3u8" , "Real Madrid TV (Spain)"
  , "8:http://unilivemtveu-lh.akamaihd.net/i/mtvno_1@346424/master.m3u8"	, "MTV (Norway)"
  , "/0/540.1/0 7:http://mrlive.1tvcrimea.ru:8080/1tvcrimea.m3u8"		, "Crimea TV (Russia)"
  , "8:http://tnv.bonus-tv.ru/cdn/tnvplanet/index.m3u8"				, "Planeta TNV (Russia)"
  , "8:http://live.ugratv.cdnvideo.ru/ugratv/smil:ugrastream1.smil/playlist.m3u8" , "Ugra TV (Russia)"
  , "8:http://stream1.rtkit.com:1935/rtk4stream/rtk4.stream/playlist.m3u8"	, "RTK-4 (Kosovo)"
  , "/0/540.1/0 7:http://85.132.81.184:8080/arbkepez/live/index.m3u8"		, "Kepez TV (Azerbaijan)"
  , "8:https://nn.geo.joj.sk/live/joj-index.m3u8"				, "JOJ (Slovakia)"
  , "8:https://nn.geo.joj.sk/live/jojplus-index.m3u8"				, "JOJ Plus (Slovakia)"
  , "/406.1/0/0 7:http://alpha.tv.online.tm/hls/ch007_720/index.m3u8"		, "Turkmenistan TV"
  , "/0/540.1/0 7:http://weblive.hebtv.com/live/hbws_bq/index.m3u8"		, "Hebei TV (China)"
  , "8:http://akaram.zecast.net/akaram-live/akaramnew2/playlist.m3u8"		, "Akaram TV (India)"
  , "8:http://akaram.zecast.net/akaram-live/akaramkidz/playlist.m3u8"		, "Akaram Kidz (India)"
  , "/0/1/1 8:http://thaipbs-live.cdn.byteark.com/live/playlist.m3u8"		, "Thai PBS (Thailand)"
  , "8:https://rtb-channel.glue.live/smil:rtb1/chunklist.m3u8"			, "RTB Sukmaindera (Brunei)"
];

/*

  , "8:http://wgntribune-lh.akamaihd.net/i/WGNPrimary_1@304622/master.m3u8"	, "WGN Tribune"
  , "8:http://wms.shared.streamshow.it/carinatv/mp4:carinatv/playlist.m3u8"	, "Radio Carina (Italy)"
  , "8:*,,*https://sc.id-tv.kz/7_kanal_38_39.m3u8"				, "Kanal-7 (Kazakhstan)"

  , "8:https://nrpus.bozztv.com/36bay2/gusa-tvshorror/index-1596332648-now.m3u8"	, "TVS Horror Network"
  , "8:https://a.jsrdn.com/broadcast/33ee2rtf5/c.m3u8"					, "Global Fashion Channel"
  , "/1/540.1/0 8:https://www.djing.com/tv/animation.m3u8"			, "DJing: Animation (UK)"
  , "/1/540.1/0 8:https://www.djing.com/tv/underground.m3u8"			, "DJing: Underground (UK)"

https://d2nt5wxzqbe1ad.cloudfront.net/out/raycom-wwsb1-hls/live.m3u8  abc
http://cbsnewshd-lh.akamaihd.net/i/CBSNHD_7@199302/master.m3u8
http://ebsonair.ebs.co.kr/plus3familypc/familypc1m/playlist.m3u8
https://content.uplynk.com/channel/92c7be9fb47143a58683d202e321e571.m3u8 court tv
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC1_1@500806/master.m3u8" , "C-SPAN 1"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC2_1@500807/master.m3u8" , "C-SPAN 2"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC3_1@500808/master.m3u8" , "C-SPAN 3"
  , "8:http://live.chdrstatic.com/cheddar/index.m3u8"				, "Cheddar Business"

*/

////////////////////////////////
///// End of User Settings /////
////////////////////////////////

var head = "<!DOCTYPE html><html><head><meta charset='utf-8'>" +
           "<title>Downloader</title></head><body><h2>Downloader</h2>";

var tail = "</body></html>", download_doc = head + tail;

var last_h = last_w = last_raw = last_time = the_time = busy = 0;
var cors_bypass = cors_kraker = error = "", vidwin = null;
var freetv = new Object (), cookies = new Object ();

var localhost, response, textData, jsonData, event_time, dropdown, dloading;

var dump_all = function ()
{
  // shut down streams
  clear_video (5); clear_video (6); clear_video (7); ir_action (0);
  // destroy iframes so browser won't try to reload them on page refresh
  clear_frame (5); clear_frame (6); clear_frame (7);
}
////////////////////

var clear_frame = function (frame)
{
  var win = document.getElementById ("mov" + frame); win.parentNode.removeChild (win);
}
////////////////////

var load_all = function ()
{
  init_box ("proxy"); load_boxes (5); load_boxes (6); load_boxes (7); resize_all ();

  if (!(localhost = document.location.hostname == "localhost")) alert (
    "The origin of this document is not the preferred origin (http://localhost).\n\n" +
    "This app might not work as intended and some features may be unavailable.\n\n" +
    "Trust the Plan -- WWG1WGA -- Where We Go On We Go All");
}
////////////////////

var load_boxes = function (frame)
{
  init_box ("ctr" + frame + "z"); init_box ("fmt" + frame);
  init_box ("stk" + frame); init_box ("src" + frame); init_box ("win" + frame);
}
////////////////////

var resize_all = function()
{
  resize_frame ("info", 5); resize_frame ("news", 6); resize_frame ("free", 7);
}
////////////////////

var resize_frame = function (name, frame)
{
  var win = document.getElementById (name).nextElementSibling;
  var sib = win.firstElementChild.firstElementChild.children;
  var a = sib [0].clientWidth, b = sib [2].clientWidth;
//  var c = window.innerWidth / 1024; body.style.transform = "scale(" + c + ")";
  sib [2].style.width = (a < 300 && b < 40) ? "0" : "35vw";
  a += b; sib = sib [2]; b = sib.children.length;
  if (a > 400)
  {
    if (!b) for (b = 1; b <= 9; b++)
    {
      if (!(win = document.getElementById ("stk" + frame + "-" + b))) break;
      sib.appendChild (win.cloneNode (true)); win.style.visibility = "hidden";
      sib.appendChild (document.createElement ("P"));
    }
    sib.style.minWidth = "100px";
  }
  else
  {
    sib.innerHTML = ""; sib.style.minWidth = 0;

    for (b /= 2; b > 0; b--)
      document.getElementById ("stk" + frame + "-" + b).style.visibility = "visible";
  }
}
////////////////////

var init_box = function (name)
{
  var win = document.getElementById (name), list = win.children;
  var panel = win.parentNode.firstElementChild.nodeName == "DIV";
  win.onclick = function(event) { listpick (event.target, panel); }

  var m = 0, val = "", txt = list[0].innerText;

  for (var n = 0; n < list.length; n++) if (list[n].hasAttribute ("checked")) m = n;

  val = list[m].value; txt = list[m].innerText; list[m].classList.add ("mark");

  win.value = val; if (panel) return;

  var doc = win.parentNode.firstElementChild; doc.value = txt;
  doc.nextElementSibling.addEventListener ("click", function(){ listbox (this); });
}
////////////////////

var listbox = function (item)
{
  var box = item.nextElementSibling, doc = box.classList; doc.toggle ("show");
  if (dropdown && box != dropdown) dropdown.classList.remove ("show");
  event_time = 0; dropdown = doc.contains ("show") ? box : null;

  var w = item.clientWidth + item.parentNode.firstElementChild.clientWidth + 4;
  box.style.minWidth = w + "px";
}
////////////////////

var listpick = function (item, panel)
{
  var list = item.parentNode.children; if (item.nodeName == "DIV") return;

  for (var n = 0; n < list.length; n++) if (list[n].classList.contains ("mark"))
  {
    list[n].classList.remove ("mark"); break;
  }

  item.classList.add ("mark"); item.parentNode.value = item.value;
  if (!panel) item.parentNode.parentNode.firstElementChild.value = item.innerText;
}
////////////////////

var MEOW = function (event)
{
  if (event.type != "click" && event.type != "keydown") return;

  if (dropdown && event_time > 0 && event_time != event.timeStamp)
  {
    dropdown.classList.remove ("show"); dropdown = null;
  }
  event_time = event.timeStamp;
} 
////////////////////

var copylist = function (frame, num)
{
  var name, list, box, item, val, txt, i, j;

  var iptv = num < 0; if (iptv) num = -num; if (!num) return;

  if (num < 10)
  {
    name = "video";
    if (num == 1) list = list_1; else
    if (num == 2) list = list_2; else
    if (num == 3) list = list_3; else
    if (num == 4) list = list_4; else
    if (num == 5) list = list_5; else
    if (num == 6) list = list_6; else
    if (num == 7) list = list_7; else
    if (num == 8) list = list_8; else
    if (num == 9) list = list_9; else return;
  }
  else if (num < 20)
  {
    name = "video"; num -= 10;
    if (num == 1) list = news_1; else
    if (num == 2) list = news_2; else
    if (num == 3) list = news_3; else
    if (num == 4) list = news_4; else
    if (num == 5) list = news_5; else
    if (num == 6) list = news_6; else
    if (num == 7) list = news_7; else
    if (num == 8) list = news_8; else
    if (num == 9) list = news_9; else return;
  }
  else if (num < 30)
  {
    name = "station"; num -= 20;
    if (num == 1) list = free_1; else
    if (num == 2) list = free_2; else
    if (num == 3) list = free_3; else
    if (num == 4) list = free_4; else
    if (num == 5) list = free_5; else
    if (num == 6) list = free_6; else
    if (num == 7) list = free_7; else
    if (num == 8) list = free_8; else
    if (num == 9) list = free_9; else return;
  }
  else return;

  box = document.getElementById ("stk" + frame); item = box.children;

  for (i = item.length - 1; i > 0; i--) box.removeChild (item [i]);

  for (i = 0, j = 1; i < list.length; i += 2, j++)
  {
    txt = list [i+1];
    if (!(val = list [i])) val = txt; 
    if (val [0] != "?") if (iptv) val = "?" + val;
    if (val [val.length - 1] == ":") val = val + txt;
    box.appendChild (new Option ("[" + (j < 10 ? "0" : "") + j + "] " + txt, val));
  }

  list = document.getElementById ("stk" + frame + "-" + num).innerText;
  name = "Select a " + name + " (" + list + ")";

  item[0].innerText = box.parentNode.firstElementChild.value = name;
  box.value = 0; popper (frame, 0);
}
////////////////////

var select_site = function (frame, value)
{
  var doc = document.getElementById ("src" + frame);
  var box = doc.parentNode.firstElementChild;
  doc.value = value; doc = doc.children;

  for (var d, n = 0; n < doc.length; n++)
    if ((d = doc [n]).value == value)
    {
      box.value = d.innerText; d.classList.add ("mark");
    }
    else if (d.classList.contains ("mark")) d.classList.remove ("mark");
}
////////////////////

var hidelist = function (frame)
{
  var doc = document.getElementById ("stk" + frame);
  var box = doc.children[0]; doc.value = box.value;
  doc.parentNode.firstElementChild.value = box.innerText;
}
////////////////////

var toggle_hls = function (frame, state)
{
  if (state < 0) return;

  var doc = document.getElementById ("hls" + frame);
  var hls = doc.checked; if (hls == undefined) hls = 0;

  var txt = "Wrapper"; if (++hls > 2) hls = 0; if (state > 0) hls = state - 1;
  if (hls == 1) txt = "M3U8"; else if (hls == 2) txt = "DASH";

  doc.checked = hls; doc.innerHTML = txt;

  if (!state) document.getElementById ("mov" + frame + "b").checked = true;
}
////////////////////

var buttonpress = function (frame, num)
{
  var id1, id2, doc1, doc2, chk, txt;

  id1 = "btn" + frame + "a"; id2 = "btn" + frame + "b";

  doc1 = document.getElementById (num ? id2 : id1);
  doc2 = document.getElementById (num ? id1 : id2);

  chk = doc1.checked; doc1.checked = !chk;
  doc1.className = (chk ? "is_off" : "is_on");
  doc2.checked = false; doc2.className = "is_off";
}
////////////////////

var brightness = function (frame, mode)
{
  var LVL = document.getElementById ("ctr" + frame + "x");
  var SAT = document.getElementById ("ctr" + frame + "y");
  var win = document.getElementById ("mov" + frame);
  var vid = win.contentDocument;

  var lvl = LVL.value.substr (5) * 1;
  var sat = SAT.value.substr (5) * 1;
  var con, lo = -9, hi = 9;

  if (mode == 1) if ((lvl -= 1) < lo) lvl = lo;
  if (mode == 2) if ((lvl += 1) > hi) lvl = hi;
  if (mode == 3) if ((sat -= 1) < lo) sat = lo;
  if (mode == 4) if ((sat += 1) > hi) sat = hi;
  if (mode == 5)
  {
    var x = LVL.step, y = SAT.step, z = lvl || sat;
    if (z) { LVL.step = lvl; lvl = 0; } else lvl = x ? x : 0;
    if (z) { SAT.step = sat; sat = 0; } else sat = y ? y : 0;
  }

  LVL.value = "Brt:  " + (lvl > 0 ? "+" : "") + lvl;
  SAT.value = "Sat:  " + (sat > 0 ? "+" : "") + sat;

  lvl = lvl * 0.05 + 1; sat = sat * 0.1 + 1;
  sat = sat * (3 - lvl) / 2; con = (2 - lvl * (3 - lvl)) * (2.5 - sat) + 1;

  lvl = lvl.toFixed (3); con = con.toFixed (3); sat = sat.toFixed (3);
  lvl = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
  if (!vid || !(vid = vid.getElementById ("video"))) vid = win;
  vid.style.filter = win.value = lvl;
}
////////////////////

var urlcopy = function (frame)
{
  if (!document.getElementById ("mov" + frame + "m").checked)
  {
    document.getElementById ("line" + frame).select();
    document.execCommand ("copy"); //return;
  }
  popper (frame, 2);
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var is_busy = function (frame)
{
  if (busy) return 1;
  document.getElementById ("vid" + frame).innerHTML = "Busy";
  busy = 1; error = ""; return 0;
}
////////////////////

var no_fail = function (frame)
{
  if (busy) toggle_hls (frame, busy); else
  {
    document.getElementById ("vid" + frame).innerHTML = "Error";
    if (error != "") document.getElementById ("id" + frame).value = "err: " + error;
    no_format (frame);
  }
  var Busy = busy; busy = 0; return (Busy);
}
////////////////////

var stream_all = function (frame, type)
{
  if (busy) busy = type + 1;
  if (type < 2) return (!document.getElementById ("mov" + frame + "f").checked);
  return 1;
}
////////////////////

var reset_frame = function (frame)
{
  clear_video (frame); ir_action (-1); busy = 0;
}
////////////////////

var clear_video = function (frame)
{
  loadwindow ("", frame, ""); popper (frame, 3);
  brightness (frame, 0); vid_info (frame, 0, 0, 1);
  document.getElementById ("meta" + frame).step = 0;
}
////////////////////

var setup_cors = function (frame)
{
  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);

  return true;
}
////////////////////

var get_time = function ()
{
  the_time = Date.now() / 500; return (the_time);
}

////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////

var loadid = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
  }
  else url = error;

  if (url.substr (0,1) == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      if (doc == "b") src = 1;
      if (doc == "v") src = 2;
      if (doc == "i") src = 3;
      if (doc == "e") src = 4;
      if (doc == "d") src = 5;
      if (doc == "n") src = 7;
      if (doc == "t") src = 27;
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url,-12))) req_bitchute (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -9))) req_vimeo (url, frame, fmt); else
  if (src == 3  && (url = getid (url, 24))) req_infowars (url, frame, fmt); else
  if (src == 11 && (url = getid (url, 12))) req_153news (url, frame, fmt); else
  if (src == 13 && (url = getid (url,-16))) req_liveleak (url, frame, fmt); else
  if (src == 4  && (url = getid (url,  0))) req_brighteon (url, frame, fmt); else
  if (src == 5  && (url = getid (url, -7))) req_dailymotion (url, frame, fmt); else
  if (src == 7  && (url = getid (url, 10))) req_natfilmbrd (url, frame, fmt); else
  if (src == 28 && (url = getid (url, 19))) req_tiktok (url, frame, fmt); else
  if (src == 26 && (url = getid (url, 13))) req_periscope (url, frame, fmt); else
  if (src == 27 && (url = getid (url,  0))) req_twitchtv (url, frame, fmt); else
  if (src == 30 && (url = getid (url,  8))) req_jwplayer (url, frame, fmt); else
  if (src == 24 && (url = getid (url, -9))) req_soundcloud (url, frame, fmt); else
  if (src == 25 && (url = getid (url,  8))) req_iheartradio (url, frame, fmt); else
  if (src == 21 && (url = getid (url,-19))) req_twitter (url, frame, fmt); else

  if (src == 20) load_brightcove ("", url, "", frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

var getid = function (url, len)
{
  if (!len) return (url);

  tst = url.substr (url.length - 5, 5);
  var n = tst.indexOf ("."); if (n < 0) n = tst.indexOf ("/");
  if (n >= 0) url = url.substr (0, url.length + n - 5);

  if ((tst = url.indexOf ("*")) >= 0) return (url.substr (tst+1));
  if (!len) return (url);

  if (len < 0)
  {
    len = -len;
    if (url.length < len - 2) return "";
    if (url.length == len - 2) return url;
    if (url.length == len - 1) return url;
    if (url.length == len) return url;

    url = url.substr (url.length - len, len);
    if ((len = url.indexOf ("/")) > 1) url = "";
    if (len < 0 && (len = url.indexOf ("=")) > 1) url = "";
    if (len < 0 && (len = url.indexOf ("-")) > 1) url = "";

    if (len >= 0) url = url.substr (len + 1);
    return url;
  }

  if (url.length < len) return "";
  if (url.length == len) return url;

  url = url.substr (url.length - len, len);
  if (url.indexOf ("/") >= 0) url = "";
  if (url.indexOf ("=") >= 0) url = "";
  return url;
}
////////////////////

var request = function (id, frame, fmt)
{
  if (document.getElementById ("mov" + frame + "c").checked)
  {
    var url = "https://www.youtube.com/embed/" + id;
    if (!busy) loadwindow (url, frame, "youtube: " + id);
    return;
  }

  var src = document.getElementById ("ctr" + frame + "z").value;

  if (src == 10) if (fmt < 0) src = 0; else { request_youtube (id, frame, -fmt); return; }
  if (src == 11) if (fmt < 0) src = 0; else { request_youtube (id, frame, fmt); return; }

  if (!src && cors_kraker) { request_youtube (id, frame, fmt); return; }

  invidious_url = invidious_site [src]; request_invidious (id, frame, (fmt < 0 ? -fmt : fmt));
}
////////////////////

const request_invidious = async (id, frame, fmt) =>
{
  var i, j, n, f = [0,0,0,0,0,0,0,0];

  var tag = "invidious"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = invidious_url + "/api/v1/videos/" + id + "?fields=formatStreams,hlsUrl";

try
{
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var sub = jsonData.formatStreams; if (!sub) throw ("!!!"); n = sub.length;

  for (i = 0; i < n; i++)
  {
    if ((j = argformat (sub[i].itag)) >= 0) f[j] = i + 1;
  }
    
  if ((n = getformat (f, fmt)))
  {
    fmt = n; fixformat (f, frame); n = f[argformat(n)] - 1;
    url = (sub[n].url.indexOf ("&gcr=") > 0) ? "local=true&" : "";  // geo-restricted?
    url = invidious_url + "/latest_version?" + url + "itag=" + fmt + "&id=" + id;
  }
  else   // live stream
  {
    url = jsonData.hlsUrl; if (!url) throw ("!!!");
    if (url.substr (0,1) == "/") url = invidious_url + url;
    sub = url = url + "?local=true";

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const request_youtube = async (id, frame, fmt) =>
{
  var i, j, n, s, sub, dat, key, sig;
  var f = [0,0,0,0,0,0,0,0,0,0], d = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_bypass + "https://www.youtube.com/get_video_info?video_id=" + id + "&el=";

try
{
  response = await fetch (url + "leanback");
  textData = await response.text();

  s = "%22itag%22"; sub = textData.split (s);

  if (sub.length < 2)
  {
    response = await fetch (url + "previewpage" + "&eurl=http%3A%2F%2Flocalhost");
    textData = await response.text();

    sub = textData.split (s); if (sub.length < 2) throw ("!!!");
  }

  for (i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.indexOf ("%3A") != 0) continue;
    s = url.substr (3, url.indexOf ("%2C") - 3);
    if ((j = argformat (s)) >= 0) f[j] = i;
    if ((j = isdashfmt (s)) >= 0)
      if (url.indexOf ("index") > 0 || url.indexOf ("_live_") > 0) d[j] = i;
  }

  if (fmt < 0)
  {
    if (!d[8]) d[0] = d[1] = d[2] = 0;
    if (!d[9]) d[4] = d[5] = d[6] = 0;
    fmt = -fmt; n = getformat (d, fmt);
    if (cors_kraker) if (n) { f = d; tag = ""; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0 || !(n = f[n])) throw ("!!!");

  s = yt_split (sub[n]); dat = s.split ("|"); url = dat[0]; sig = dat[1];

  if (sig.length > 99)  // some videos require a signature; usually 105 or 109 bytes long
  {
    response = await fetch (cors_bypass + "https://www.youtube.com/embed/" + id);
    textData = await response.text();

    url = textData.substr (textData.indexOf ("base.js") - 100, 107);
    url = url.substr (url.indexOf ('src=') + 5);
/*
    if (url.indexOf ("/s/player/") == 0 && !(url = cookies [(s = url)]))
    {
      response = await fetch (cors_bypass + "https://www.youtube.com/watch?v=" + id);
      textData = await response.text();
      url = textData.substr (textData.indexOf ("en_US/base.js") - 100, 113);
      url = cookies [s] = url.substr (url.indexOf ('src=') + 5);
    }
*/
    if (!(key = cookies [url]))
    {
      response = await fetch (cors_kraker + "https://www.youtube.com" + url);
      textData = await response.text();

      key = yt_algo (textData); cookies [url] = key;
    }
    eval (key); url = dat[0] + "&sig=" + sig;
  }

  if (!tag)
  {
    if ((i = argformat (fmt)) < 4) j = 8; else j = 9;
    s = yt_split (sub [f[j]]) + "|" + dat[2];
    var dat = s.split ("|"); j = j & 1;

    sig = dat[1];
    if (sig) { eval (key); sig = "&sig=" + sig; }
    sig = dat[0] + sig;

    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
      "<a href='" + sig + "'>Audio</a> &nbsp;" +
      "<a href='" + url + "'>Video</a>" + tail;

    s = url.substr (url.indexOf ("&dur=") + 5); s = s.substr (0, s.indexOf ("&")) * 1;
    var v = dat[2] + "," + dat[3]; var w = "wanna_boot_dash";

    if (!s)
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url, { method: 'GET' } );
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";

    s = s + "|" + (j ? "audio/webm" : "audio/mp4") + "|" + (j ? "opus" : "mp4a.40.2");
    s = s + "|" + (j ? "video/webm" : "video/mp4") + "|" + (j ? "vp9" : "avc1.4d401e");
    s = s + "|" + v + "|" + tag + "|" + sig + "|" + url + "|";

    await fetch (cors_kraker + w, { method: 'POST', body: s } );
    url = cors_kraker + "_" + w + "_" + tag;
    tag = "yt-dash"; stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var yt_split = function (t)
{
  var n, p, q, s;

  n = t.indexOf ("%7D%5D"); s = t.substr (0, (n < 0 ? t.length : n));
  s = s.replace (/%5Cu0026/g, "&"); s = s.replace (/%25/g, "%");
  s = s.replace (/%25/g, "%"); s = decodeURIComponent (s);

  n = s.indexOf ("&s="); if (n < 0) n = s.indexOf ('"s=');

  if (n < 0) p = ""; else
  {
    p = s.substr (n + 3, 300);
    n = p.indexOf ("&"); if (n > 0) p = p.substr (0, n);
    n = p.indexOf ('"'); if (n > 0) p = p.substr (0, n);
  }

  q = s.replace (/\\/g, "");
  n = q.indexOf ("]");  if (n > 0) q = q.substr (0, n);
  q = q.split ('"start":"');

  if (q.length < 3) q = ""; else
  {
    q[1] = q[1].substr (0, q[1].indexOf ('"}'));
    q[2] = q[2].substr (0, q[2].indexOf ('"}'));
    q[1] = q[1].replace ('","end":"', "-");
    q[2] = q[2].replace ('","end":"', "-");
    q = q[1] + "," + q[2];
  }

  s = s.substr (s.indexOf ("http")); s = s.substr (0, s.indexOf ('"'));
  n = s.indexOf ("&sp="); if (n > 0) s = s.substr (0, n);
  n = s.indexOf ("&s=");  if (n > 0) s = s.substr (0, n);

  return (s + "|" + p + "|" + q);
}
////////////////////

var yt_algo = function (data)
{
  var i, j, n, s, v;

  for (i = 0; i < 3; i++)
  {
    j = data.indexOf ('a=a.split("")'); if (j < 0) return "";
    s = data.substr (j + 14, 300); if ((n = s.indexOf ("a.join")) > 0) break;
    if (i > 1) return ""; data = data.substr (j + 1);
  }
  s = s.substr (0, n - 7);
  v = "var " + s.substr (0, 2) + "={";
  if ((n = data.indexOf (v)) < 0) return "";

  v = data.substr (n, 300); v = v.substr (0, v.indexOf ("};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

const req_bitchute = async (id, frame, fmt) =>
{
  var tag = "bitchute"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.bitchute.com/embed/" + id + "/";

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ('"'));

  if (!url) throw ("!!!"); if (cors_kraker) url = cors_kraker + "~" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vimeo = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "vimeo"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.vimeo.com/video/" + id + "/config";

try
{
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  if (jsonData.request == undefined)   // privacy lock, go long way around
  {
    response = await fetch (cors_bypass + "https://vimeo.com/" + id);
    textData = await response.text();

    var s = '"config_url":"';
    var n = textData.indexOf (s); if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.indexOf ('"'));
    url = url.replace (/\\/g, "");

    response = await fetch (cors_bypass + url);
    jsonData = await response.json();
  }

  if (!(url = jsonData.request.files.progressive))  // https://vimeo.com/378870053 live stream
  {
    if (!(url = jsonData.request.files.hls)) throw ("!!!");
    if (!(url = jsonData.request.files.hls.cdns)) throw ("!!!");
    if (!(s = url.fastly_live)) s = url.akamai_live; url = s.url;
    if (cors_kraker) url = cors_kraker + "~" + url;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();
      url = response.url;

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }
  else
  {
    for (i = 0; i < url.length; i++)
    {
      k = url[i].quality; k = k.substr (0, k.indexOf ("p"));
      if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
    }
    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = url[j].height; if ((url = url[j].url) == undefined) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_infowars = async (id, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://api.banned.video/embed/" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'downloadUrl="';
  var n = textData.indexOf (s);

  if (n < 0) url = ""; else
  {
    url = textData.substr (n + s.length, 100);
    url = url.substr (0, url.indexOf ('"'));
  }

  download_doc = head + "InfoWars download link: ";

  if (url.indexOf ("http") == 0)
    download_doc = download_doc + "<a href='" + url + "'>" + url + "</a>" + tail; else
    download_doc = download_doc + "Not available" + tail;

  s = '<source src="';
  n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");

  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_153news = async (id, frame, fmt) =>
{
  var tag = "153news"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://153news.net/watch_video.php?v=" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 1000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.indexOf ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_liveleak = async (id, frame, fmt) =>
{
  var tag = "liveleak"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.liveleak.com/view?t=" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.indexOf ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 1000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.indexOf ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_brighteon = async (id, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  var url = getid (id, 36); if (!url) url = getid (id, 13);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  id = url; url = "https://www.brighteon.com/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));
  url = url.replace (/&#x3D;/g, "=");

  if (url.indexOf ("m3u8") < 0) throw ("!!!");
  url = (cors_kraker ? cors_kraker + "~" : cors_bypass) + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_dailymotion = async (id, frame, fmt) =>
{
  var tag = "dailymotion"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.dailymotion.com/embed/video/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://www.dailymotion.com/player/metadata/video/" + id;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var n; url = jsonData.qualities.auto[0].url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + url);
    textData = await response.text();

    url = response.url.substr (cors_kraker.length);
    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

  n = url.indexOf ("#"); if (n > 0) url = url.substr (0, n);  // for SMPlayer
  if (cors_kraker) url = cors_kraker + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_natfilmbrd = async (id, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdnapisec.kaltura.com/p/2081491/sp/208149100/playManifest/entryId/" + id +
    "/flavorIds/1_z997vpzn/format/applehttp/protocol/https/a.m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_twitter = async (id, frame, fmt) =>
{
  var tag = "twit"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_kraker + "*https://twitter.com*https://api.twitter.com/";

try
{
  if (!cors_kraker) throw ("???");

  var b = "Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h" +
    "%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw";

  var u = url + "1.1/guest/activate.json";
  response = await fetch (u, { method: 'POST', headers: { 'Authorization': b } });
  jsonData = await response.json();

  var g = jsonData.guest_token; if (!g) throw ("!!!");

  u = url + "2/timeline/conversation/" + id + ".json?tweet_mode=extended";
  response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
  jsonData = await response.json();

  var t = jsonData.globalObjects.tweets[id], s = t.extended_entities;

  if (!s || !(s = s.media) || !(s = s["0"]) || !(s = s.video_info) || !(s = s.variants))
  {
    if (!(s = t.quoted_status_id_str)) s = t.retweeted_status_id_str;
    if (!s && !(s = t.in_reply_to_status_id)) throw ("!!!");
    t = jsonData.globalObjects.tweets[s].extended_entities;
    s = t.media["0"].video_info.variants; 
  }

  var n, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  for (n = 0; n < s.length; n++)
  {
    url = s[n].url; j = url.search (/[0-9]x[0-9]/); if (j < 0) { f[3] = n + 1; continue; }
    url = url.substr (j + 2, url.indexOf ("/", j) - j - 2) * 1;
    if ((j = chkformat (url)) < 0 || r[j] > url) continue;
    f[j] = n + 1; r[j] = url;
  }

  j = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (j)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");
  j = r[j]; url = s[n].url; //if ((n = url.indexOf ("?")) > 0) url = url.substr (0, n);

  if (j) fmt = j; else if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_periscope = async (id, frame, fmt) =>
{
  var tag = "periscope"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://proxsee.pscp.tv/api/v2/accessVideoPublic?broadcast_id=" + id;

try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  if ((url = jsonData.broadcast))
  {
    var w = url.width, h = url.height;
    if (w && h && w < h) document.getElementById ("meta" + frame).step = 6;
  }

  url = jsonData.replay_url; if (!url) throw ("!!!");
  
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + "~" + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }
  url = cors_kraker + "~*https://www.pscp.tv,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_twitchtv = async (id, frame, fmt) =>
{
  var tag = "twitch"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = id.split ("/"); id = id [id.length - 1];
  var url = "https://www.twitch.tv/" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("Client-ID"); if (n < 0) throw ("!!!");
  var s = textData.substr (n + 12, 100); s = s.substr (0, s.indexOf ('"'));

  url = "https://api.twitch.tv/api/" + (id * 1 ? "vods/" : "channels/") + id + "/access_token";

  response = await fetch (cors_bypass + url, { headers: { 'client-id': s } });
  jsonData = await response.json();

  if (!jsonData.sig || !jsonData.token) throw ("!!!");

  url = ".m3u8?sig=" + jsonData.sig + "&token=" + encodeURIComponent (jsonData.token);
  url = "https://usher.ttvnw.net/" + (id * 1 ? "vod/" : "api/channel/hls/") + id + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch ((cors_kraker ? cors_kraker + "~" : "") + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2) * 1; url = url.substr (0, n);
  }
  url = (cors_kraker ? cors_kraker + "~*null,,*" : "") + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_tiktok = async (id, frame, fmt) =>
{
  var tag = "tiktok"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.tiktok.com/embed/v2/" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ('<video src="'); if (n < 0) throw ("!!!");
  url = textData.substr (n + 12, 500); url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!"); if ((n = url.indexOf ("?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_jwplayer = async (id, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdn.jwplayer.com/manifests/" + id + ".m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_soundcloud = async (id, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://w.soundcloud.com/player/?url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "/progressive";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  var sub = textData.substr (n - 200, 200 + s.length);
  sub = sub.substr (sub.indexOf ('"url":"') + 7);

  n = textData.indexOf ("/widget-"); if (n < 0) throw ("!!!");

  url = textData.substr (n - 40, 100);
  url = url.substr (url.indexOf ('"') + 1);
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.indexOf ("client_id"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 200);
  url = url.substr (url.indexOf ('":"') + 3);
  url = url.substr (0, url.indexOf ('"'));
  url = sub + "?client_id=" + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.url; if (url == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_iheartradio = async (id, frame, fmt) =>
{
  var tag = "iheartradio"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//  var url = "https://ca.api.iheart.com/api/v2/playback/streams";
  var url = "https://ca.api.iheart.com/api/v3/podcast/episodes/" + id;

try
{
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.episode.mediaUrl; if (!url) throw ("!!!");

/*
  var header = { 'Content-Type': 'application/json', 'X-User-Id': '2473436724', 'X-Session-Id': '9jhqgkoyUST8iPLzLiFtDK' };
  var data = JSON.stringify ({'contentIds':[id],'hostName':'webapp','playedFrom':0,'stationId':'','stationType':'PODCAST'});

  response = await fetch (cors_kraker + url, { method: 'POST', headers: header, body: data } );
  jsonData = await response.json();

  url = jsonData.items[0].streamUrl; if (!url) throw ("!!!");
  var n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);
*/

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digid = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 10) dig_test (doc, frame, fmt); else
  if (src == 3 ) dig_infowars (doc, frame, fmt); else
  if (src == 4 ) dig_brighteon (doc, frame, fmt); else
  if (src == 8 ) dig_prageru (doc, frame, fmt); else
  if (src == 6 ) dig_tedtalks (doc, frame, fmt); else
  if (src == 7 ) dig_natfilmbrd (doc, frame, fmt); else
  if (src == 21) dig_twitter (doc, frame, fmt); else
  if (src == 22) dig_facebook (doc, frame, fmt); else
  if (src == 26) dig_periscope (doc, frame, fmt); else
  if (src == 30) dig_jwplayer (doc, frame, fmt); else
  if (src == 24) dig_soundcloud (doc, frame, fmt); else
  if (src == 23) dig_podcast (doc, frame, fmt); else

  if (src == 20) find_brightcove (doc, "", frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_test = async (doc, frame, fmt) =>
{
  var tag = "test"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  url = cors_bypass + doc;

try
{
  if (doc.substr (0,4) != "http") console.log (atob (doc)); else
  {
    response = await fetch (url);
    textData = await response.text();
    console.log ("(" + textData + ")");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow ("", frame, tag + ": okay");
}
////////////////////

const dig_infowars = async (doc, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; if (url.indexOf ("infowars") < 0) url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.indexOf (s);
  
  if (n > 0) url = textData.substr (n + s.length, 200); else
  {
    n = textData.indexOf ('<iframe src="'); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200);

    n = url.indexOf ("/embed/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7);
  }

  url = url.substr (0, url.indexOf ('"'));
  if ((n = url.indexOf ("?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_infowars (url, frame, fmt);
}
////////////////////

const dig_brighteon = async (doc, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/embed/"; var n = textData.indexOf (s);
  if (n < 0) { s = '"videoKey":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_brighteon (url, frame, fmt);
}
////////////////////

const dig_prageru = async (doc, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "prageru"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:image" content="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ("poster") - 1);

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.playlist[0].sources; if (url == undefined) throw ("!!!");
 
  for (i = 0; i < url.length; i++)
  {
    if (url[i].type != "video/mp4") continue;

    k = url[i].height;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");

  fmt = url[j].height; if ((url = url[j].file) == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_tedtalks = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "tedtalks"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"nativeDownloads"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);

  s = '"medium":"http'; if ((n = url.indexOf (s)) > 0) f[0] = n + s.length - 4;
  s = '"high":"http'; if ((n = url.indexOf (s)) > 0) f[1] = n + s.length - 4;

  if (!f[0] && !f[1])
  {
    s = '"bitrate":180,"file":"'; if ((n = textData.indexOf (s)) < 0) throw ("!!!");
    url = textData.substr (n, 300); f[0] = s.length;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 288;
  if (n == 1) fmt = 480;

  url = url.substr (f[n]); url = url.substr (0, url.indexOf ('"'));

  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_natfilmbrd = async (doc, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

  var n = url.indexOf ("?");
  if (n > 0) url = url.substr (0, n);
  if (doc.substr (-1) != "/") url = url + "/";
  url = url + "embed/player/";

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"entry_id": "';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.indexOf ('"'));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_natfilmbrd (url, frame, fmt);
}
////////////////////

const dig_twitter = async (doc, frame, fmt) =>
{
  var tag = "twitter"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/status/";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 19);
  n = url.indexOf ("/"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_twitter (url, frame, fmt);
}
////////////////////

const dig_facebook = async (doc, frame, fmt) =>
{
  var tag = "facebook"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:video" content="'; var n = textData.indexOf (s);
  if (n < 0) { s = '"sd_src_no_ratelimit":"'; n = textData.indexOf (s); }
  if (n < 0) { s = '"video_url":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 800);
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");
  url = url.replace (/\\u0026/g, "&"); url = url.replace (/amp;/g, "");
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_periscope = async (doc, frame, fmt) =>
{
  var tag = "periscope"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/broadcast/";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.indexOf ('"'));
  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_periscope (url, frame, fmt);
}
////////////////////

const dig_jwplayer = async (doc, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"video_id":"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.indexOf ('"'));
  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_jwplayer (url, frame, fmt);
}
////////////////////

const dig_soundcloud = async (doc, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "soundcloud.com/tracks/";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 12);
  if ((n = url.indexOf ('"')) < 0) n = url.indexOf ("/");
  if (n < 0) throw ("!!!"); url = url.substr (0, n);

  if (url.length < 6 || url.length > 9) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_soundcloud (url, frame, fmt);
}
////////////////////

const dig_podcast = async (doc, frame, fmt) =>
{
  var tag = "podcast"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"assetUrl":"'; var n = textData.indexOf (s);         	// Apple Podcast
  if (n < 0) n = textData.indexOf (s = 'enclosureUrl":"');		// Radio Public
  if (n < 0) n = textData.indexOf (s = 'episodeURL: "');		// Stitcher
  if (n < 0) n = textData.indexOf (s = '<source src="');		// Overcast
  if (n < 0) n = textData.indexOf (s = 'data-uri="');	   		// Podbean
  if (n < 0) n = textData.indexOf (s = 'download" href="');		// Spreaker
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  n = url.indexOf ('"'); if (n > 0) url = url.substr (0, n);
  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixlist = function (item, doc, state)
{
  var txt = doc.children[item].text.slice (0,-1);
  if (state < 0) txt = txt + '*'; else if (state > 0) txt = txt + '+'; else txt = txt + '-';
  doc.children[item].text = txt;
}
////////////////////

var fixformat = function (f, frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]); fixlist (2, doc, f[2]);
  fixlist (3, doc, f[4]); fixlist (4, doc, f[5]); fixlist (5, doc, f[6]);

/*
  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]);
  fixlist (2, doc, f[2]); fixlist (3, doc, f[3]);
  fixlist (4, doc, f[4]); fixlist (5, doc, f[5]);
  fixlist (6, doc, f[6]); fixlist (7, doc, f[7]);
*/
}
////////////////////

var no_format = function (frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, -1); fixlist (1, doc, -1);
  fixlist (2, doc, -1); fixlist (3, doc, -1);
  fixlist (4, doc, -1); fixlist (5, doc, -1);
}
////////////////////

/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////

var loadnews = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
  }
  else url = error;

  if (url && url [0] == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      if (doc == "fox") src = 1;
      if (doc == "abc") src = 2;
      if (doc == "cnb") src = 4;
      if (doc == "msn") src = 7;
      if (doc == "pbs") src = 8;
      if (doc == "cbc") src = 11;
      if (doc == "ctv") src = 12;
      if (doc == "glo") src = 13;
      if (doc == "tvo") src = 14;
      if (doc == "bbc") src = 21;
      if (doc == "alj") src = 22;
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, 13))) req_fox (url, frame, fmt); else
  if (src == 2  && (url = getid (url,  8))) req_abc (url, frame, fmt); else
  if (src == 4  && (url = getid (url, 10))) req_cnbc (url, frame, fmt); else
  if (src == 7  && (url = getid (url,-13))) req_msnbc (url, frame, fmt); else
  if (src == 8  && (url = getid (url, 10))) req_pbs (url, frame, fmt); else
  if (src == 11 && (url = getid (url,-13))) req_cbc (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  7))) req_ctv (url, frame, fmt); else
  if (src == 13 && (url = getid (url,  7))) req_global (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 13))) req_tvo (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  8))) req_bbc (url, frame, fmt); else
  if (src == 22 && (url = getid (url, 13))) req_aljazeera (url, frame, fmt); else
  if (src == 25 && (url = getid (url, 22))) req_bloomberg (url, frame, fmt); else
  if (src == 26 && (url = getid (url,  8))) req_deutsche (url, frame, fmt); else

  if (src == 0 && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////
/*
https://www.foxnews.com/science/descendants-extinct-tortoise-species-galapagos
https://api.foxnews.com/v3/video-player/6025576909001
json.channel.item.media-group.media-content[0].@attributes.url
*/
const req_fox = async (id, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://video.foxnews.com/v/feed/video/" + id + ".js";

try
{
  response = await fetch (cors_kraker + src);
  jsonData = await response.json();

  if (jsonData.error != undefined)
  {
    src = "https://video.foxbusiness.com/v/feed/video/" + id + ".js";
    response = await fetch (cors_kraker + src);
    jsonData = await response.json();
  }

  if (jsonData.error != undefined) throw ("!!!");
  url = jsonData.channel.item["media-content"]["@attributes"].url;

  if (!url)
  {
    src = src.substr (src.indexOf ("."));
    src = src.substr (0, src.indexOf ("/"));
    src = "https://api" + src + "/v3/video-player/" + id;
    response = await fetch (cors_kraker + src);
    jsonData = await response.json();
    url = jsonData.channel.item["media-group"]["media-content"][0]["@attributes"].url;
    stream_all (frame, 1); if (url.indexOf ("m3u8") < 0) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_abc = async (id, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://abcnews.go.com/video/itemfeed?id=" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  url = jsonData.channel.item["media-group"]["media-content"][2]["@attributes"].url; 

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cnbc = async (id, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/gZWlPC/media/guid/2408950221/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_msnbc = async (id, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//var url = "https://www.msnbc.com/msnbc/embedded-video/mmvo" + id;
  var url = "https://www.nbcnews.com/news/embedded-video/mmvo" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '},"videoType":'; var n = textData.indexOf (s);
  if (n < 0) { s = '"videoType":'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n, 2000);
  var sub = url.split ('"publicUrl":"'); if (sub.length < 2) throw ("!!!");
  url = sub [sub.length - 1]; url = url.substr ('"');

  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);
  if (url == "") throw ("!!!");

  url = url.replace (/\\u002F/g, "/");
  url = url + "?mbr=true&format=smil";
	
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_pbs = async (id, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.pbs.org/portalplayer/" + id + "/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '"encodings": ["';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));

  url = url + "?format=jsonp&callback=__jp1";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  s = '"url": "'; n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length);
  url = url.substr (0, url.indexOf ('"'));

  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cbc = async (id, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/ExhSPC/media/guid/2655402169/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");

  var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_ctv = async (id, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://capi.9c9media.com/destinations/ctvnews_web/platforms/desktop/contents/" + id;
  var sub = "?%24include=%5BContentPackages%5D";

try
{ 
  response = await fetch (cors_kraker + url + sub);
  jsonData = await response.json();

  sub = jsonData.ContentPackages[0].Id;
  url = url + "/contentpackages/" + sub + "/manifest.m3u8";

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: "  + id);
}
////////////////////

const req_global = async (id, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://globalnews.ca/video/embed/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = 'sources":[{"file":"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_tvo = async (id, frame, fmt) =>
{
  load_brightcove ("18140038001", id, "tvo", frame, fmt);
}
////////////////////

const req_bbc = async (id, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/" + id + "/format/xml/atk/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s, n = 0, sub = textData.split ("connection");

  for (var i = 1; i < sub.length; i++)
  {
    s = sub [i]; if (s.indexOf ("href=") < 0) continue;
    if (s.indexOf ("hls")  > 0) { n = 1; url = s; break; }
    if (s.indexOf ("dash") > 0) { n = 2; url = s; }
  }

  if (!n) throw ("!!!");
  url = url.substr (url.indexOf ("href=") + 6);
  url = url.substr (0, url.indexOf ('"'));

  if (stream_all (frame, n) || n == 2) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: "  + id);
}
////////////////////

const req_aljazeera = async (id, frame, fmt) =>
{
  load_brightcove ("665003303001", id, "aljazeera", frame, fmt);
}
////////////////////

const req_bloomberg = async (id, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], u = [], n;

  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://www.bloomberg.com/multimedia/api/embed?id=" + id;

try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + "*" + url);
  jsonData = await response.json();
  var sub = jsonData.downloadURLs;

  if ((url = sub["600"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["700"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["800"])  != undefined) { f[1] = 540; u[1] = url; }
  if ((url = sub["1200"]) != undefined) { f[2] = 720; u[2] = url; }

  if ((n = getformat (f, fmt)))
  {
    fixformat (f, frame); n = argformat (n); fmt = f[n]; url = u[n];
  }
  else
  {
    url = jsonData.streams[0].url; if (!url) throw ("!!!");

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_deutsche = async (id, frame, fmt) =>
{
  var i, j, f = [0,0,0,0,0,0,0,0];

  var tag = "deutsche"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = cors_kraker + "https://www.dw.com/playersources/";

try
{
  response = await fetch (url + "v-" + id);
  textData = await response.text();
 
  if (textData[0] != "[")
  {
    response = await fetch (url + "a-" + id);
    textData = await response.text();

    fmt = 0; if (textData[0] != "[") throw ("!!!");
    url = textData.substr (textData.indexOf ("http"));
    url = url.substr (0, url.indexOf ('"')); if (!url) throw ("!!!");
  }
  else
  {
    var sub = JSON.parse (textData); if (sub.length < 1) throw ("!!!");

    for (i = 0; i < sub.length; i++)
      if ((url = sub[i].label) && (j = chkformat (url)) >= 0) f[j] = i + 1;

    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = sub[j].label; url = sub[j].file;
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var dignews = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_fox (doc, frame, fmt); else
  if (src == 2 ) dig_abc (doc, frame, fmt); else
  if (src == 3 ) dig_cbs (doc, frame, fmt); else
  if (src == 4 ) dig_cnbc (doc, frame, fmt); else
  if (src == 5 ) dig_cnn (doc, frame, fmt); else
  if (src == 6 ) dig_cspan (doc, frame, fmt); else
  if (src == 7 ) dig_msnbc (doc, frame, fmt); else
  if (src == 8 ) dig_pbs (doc, frame, fmt); else
  if (src == 11) dig_cbc (doc, frame, fmt); else
  if (src == 15) dig_cpac (doc, frame, fmt); else
  if (src == 12) dig_ctv (doc, frame, fmt); else
  if (src == 13) dig_global (doc, frame, fmt); else
  if (src == 14) dig_tvo (doc, frame, fmt); else
  if (src == 21) dig_bbc (doc, frame, fmt); else
  if (src == 24) dig_presstv (doc, frame, fmt); else
  if (src == 22) dig_aljazeera (doc, frame, fmt); else
  if (src == 25) dig_bloomberg (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_fox = async (doc, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="'; var n = textData.indexOf (s);
  if (n < 0) { s = "video_id="; n = textData.indexOf (s); }

  if (n > 0) url = textData.substr (n + s.length, 13); else
  {
    s = 'data-url="'; n = textData.indexOf (s);
    if (n > 0)
    {
      url = textData.substr (n + s.length, 200);
      url = url.substr (url.indexOf ("/v/") + 3, 13);
    }
    else
    {
      s = "redirect.mp3"; n = textData.indexOf (s); if (n < 0) throw ("!!!");
      url = textData.substr (n + s.length + 2, 200);
      url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");
      url = "https://" + url.replace (/\\/g, "");
      busy = -busy;
    }
  }
  busy = -busy;

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    no_fail (frame); loadwindow (url, frame, tag + ": id-none");
  }
  else if (no_fail (frame)) req_fox (url, frame, fmt);
}
////////////////////

const dig_abc = async (doc, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video="';
  var n = textData.indexOf (s);

  if (n < 0) { s = 'null/video/itemfeed?id='; n = textData.indexOf (s); }
  if (n < 0) { s = s.substr (4); n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ('"'));

  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_abc (url, frame, fmt);
}
////////////////////

const dig_cbs = async (doc, frame, fmt) =>
{
  var tag = "cbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"embedUrl":"'; var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 300);
    url = url.substr (0, url.indexOf ('"')); url = url.replace (/\\/g, "");

    if (url != doc)
    {
      if (url.indexOf ("/live/") > 0) throw ("!!!");
      response = await fetch (cors_bypass + url);
      textData = await response.text();
    }
  }

  n = textData.indexOf ("defaultPayload");
  if (n > 0) textData = textData.substr (n);

  s = '"video":"';
  n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));
  
  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cnbc = async (doc, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = "'"; var s = "'content_id' : '";
  var n = textData.indexOf (s);

  if (n < 0)
  {
    r = '"'; s = 'data-vilynx-id="';
    n = textData.indexOf (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf (r));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cnbc (url, frame, fmt);
}
////////////////////

const dig_cnn = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0];

  var tag = "cnn"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  s = 'data-video-id="'; n = textData.indexOf (s);
  if (n < 0) { s = 'videoid="'; n = textData.indexOf (s); }
  if (n < 0) { s = 'videoId":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));

  url = "https://ht.cdn.turner.com/cnn/big/" + url + ".smil";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  url = "http://ht.cdn.turner.com/" + url;

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cspan = async (doc, frame, fmt) =>
{
  var tag = "cspan"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "sources: [{file: '";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ("'"));

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }
  url = cors_kraker + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_msnbc = async (doc, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'video":{"id":"mmvo';
  var n = textData.indexOf (s);

  if (n > 0) url = textData.substr (n + s.length, 20); else
  {
    n = textData.indexOf ('"embedURL":');
    if (n < 0) n = textData.indexOf ('"embedUrl":');
    if (n < 0) throw ("!!!");

    url = textData.substr (n, 200); n = url.indexOf ("/mmvo");   // today.com
    if (n > 0) url = url.substr (n + 5);
  }

  if (n > 0)
  {
    url = url.substr (0, url.indexOf ('"'));
    busy = -busy; if (url.length < 11 || url.length > 13) throw ("!!!");
  }
  else
  {
    s = url.substr (url.indexOf ("/p/") + 3);
    s = s.substr (0, s.indexOf ("/")); n = url.indexOf ("/guid/");

    if (n < 0) { busy = -busy; n = url.indexOf ("media/"); }
    if (n < 0) throw ("!!!");

    url = url.substr (n + 6); url = url.substr (0, url.indexOf ("?"));
    if (s == "" || url == "") throw ("!!!");

    s = "https://link.theplatform.com/s/" + s + "/media/";

    if (busy < 0)
    {
  // www.nbcsports.com
      busy = -busy; url = s + url + "?format=smil";

      response = await fetch (cors_kraker + url);
      textData = await response.text();

      url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
    else
    {
  // www.nbc.com/dateline
      url = s + "guid/" + url + "/meta.smil?manifest=m3u";  // mp4 does not work

      if (stream_all (frame, 1)) fmt = 0; else
      {
        response = await fetch (url);
        textData = await response.text();

        url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
        n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
      }
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    if (!fmt) no_format (frame); no_fail (frame);
    loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
  }
  else if (no_fail (frame)) req_msnbc (url, frame, fmt);
}
////////////////////

const dig_pbs = async (doc, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<iframe src="https://player'; var n = textData.indexOf (s);

  if (n < 0)
  {
    var r = "'"; s = "'VideoTPMediaId': '"; n = textData.indexOf (s);
    if (n < 0) { r = '"'; s = 'data-coveid="'; n = textData.indexOf (s); }
    if (n < 0) { r = '"'; s = 'data-coveId="'; n = textData.indexOf (s); }
    if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.indexOf (r));
  }
  else
  {
    url = textData.substr (n, 100);
    n = url.indexOf ("player/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7); url = url.substr (0, url.indexOf ('"'));
    n = url.indexOf ("/"); if (n > 0) url = url.substr (0, n);
  }

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_pbs (url, frame, fmt);
}
////////////////////

const dig_cbc = async (doc, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = '"'; var s = '"guid":"'; var n = textData.indexOf (s);

  if (n < 0)
  {
    r = "'"; s = "'mediaId': '";
    n = textData.indexOf (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf (r));

  if (url.length < 10 || url.length > 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cbc (url, frame, fmt);
}
////////////////////

const dig_cpac = async (doc, frame, fmt) =>
{
  var tag = "cpac"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc + "/";

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var n = textData.indexOf ("<video id="); if (n < 0) throw ("!!!");
  url = textData.substr (n, 1000); var s = 'contentUrl":"';
  n = url.indexOf (s); if (n < 0) throw ("!!!");

  url = url.substr (n + s.length); url = url.substr (0, url.indexOf ('"'));
  url = url.replace (/\\/g, ""); if (url == "") throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_ctv = async (doc, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.indexOf ('"'));
  }

  if (n < 0)
  {
    s = "); initPlayer(";
    if ((n = textData.indexOf (s)) > 0)
    {
      url = textData.substr (n + s.length, 100);
      url = url.substr (0, url.indexOf (")"));
    }
  }

  if (n < 0)
  {
    s = "getAuthStates(";
    if ((n = textData.indexOf (s)) > 0)
    {
      url = textData.substr (n + s.length + 1, 300);
      url = url.substr (0, url.indexOf ('"'));
      sub = url.split (","); if (sub.length == 0) throw ("!!!");
      url = sub [sub.length - 1];
    }
  }

  if (n < 0)
  {
    s = "contentId: ";
    if ((n = textData.indexOf (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.indexOf (','));
    }
  }

  if (n < 0)
  {
    s = "currentId=";
    if ((n = textData.indexOf (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.indexOf ('&'));
    }
  }

  if (n < 0 || url.length != 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_ctv (url, frame, fmt);
}
////////////////////

const dig_global = async (doc, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-displayinline="';
  var n = textData.indexOf (s);

  if (n < 0)
  {
    s = 'data-miniplayer-video="'; n = textData.indexOf (s);
    if (n < 0) { s = '<iframe src="'; n = textData.indexOf (s); }
    if (n < 0) throw ("!!!");
  }
  url = textData.substr (n, 100);

  s = "/playlist/"; n = url.indexOf (s);
  if (n < 0) { s = "/embed/"; n = url.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = url.substr (n + s.length, 7);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_global (url, frame, fmt);
}
////////////////////

const dig_tvo = async (doc, frame, fmt) =>
{
  find_brightcove (doc, "tvo", frame, fmt);
}
////////////////////

const dig_bbc = async (doc, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "embed\\/"; var n = textData.indexOf (s);

  if (n < 0) { s = "versionID&quot;:&quot;"; n = textData.indexOf (s); }
  if (n < 0) { s = 'data-vpid="'; n = textData.indexOf (s); }
  if (n < 0) { s = 'data-id="'; n = textData.indexOf (s); }
  if (n < 0) { s = '"vpid":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 20);
  n = url.indexOf ("\\"); if (n < 0) n = url.indexOf ("&");
  if (n < 0) n = url.indexOf ('"'); if (n != 8) throw ("!!!");

  url = url.substr (0, 8);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bbc (url, frame, fmt);
}
////////////////////

const dig_presstv = async (doc, frame, fmt) =>
{
  var tag = "presstv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<source src="'; var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 200);
    url = url.substr (0, url.indexOf ('"'));
    fmt = 0; if (url == "") throw ("!!!");
  }
  else
  {
    n = textData.indexOf ("og:video:url'"); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200); url = url.substr (url.indexOf ("http"));
    url = url.substr (0, url.indexOf ("'")); if (url == "") throw ("!!!");

    if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_aljazeera = async (doc, frame, fmt) =>
{
  var tag = "aljazeera"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "RenderPagesVideo('";
  var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.indexOf ("'"));
  }

  if (n < 0)
  {
    s = "RenderGeneralBCVideo(";
    n = textData.indexOf (s); if (n < 0) throw ("!!!");
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.indexOf (","));
  }

  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_aljazeera (url, frame, fmt);
}
////////////////////

const dig_bloomberg = async (doc, frame, fmt) =>
{
  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + "*" + doc;

try
{ 
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  var s = 'data-url="'; var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.indexOf ('"'));
    
    response = await fetch (cors_kraker + "*" + url);
    textData = await response.text();
  }

  s = '"resourceId":"'; n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 50);
  url = url.substr (0, url.indexOf ('"'));
  if (url.length != 22) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bloomberg (url, frame, fmt);
}
////////////////////

////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////

var loadmovie = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
  }
  else url = error;

  if (url && url [0] == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, -7))) req_tubitv (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -8))) req_vidnode (url, frame, fmt); else
  if (src == 8  && (url = getid (url, -8))) req_xhamster (url, frame, fmt); else
  if (src == 16 && (url = getid (url, 12))) req_clipwatching (url, frame, fmt); else
  if (src == 15 && (url = getid (url, 12))) req_cloudvideo (url, frame, fmt); else
  if (src == 12 && (url = getid (url, 12))) req_gounlimited (url, frame, fmt); else
  if (src == 19 && (url = getid (url,  0))) req_mixdrop (url, frame, fmt); else
  if (src == 20 && (url = getid (url, 15))) req_streamvid (url, frame, fmt); else
  if (src == 17 && (url = getid (url, 12))) req_upstream (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 12))) req_videobin (url, frame, fmt); else
  if (src == 13 && (url = getid (url, 12))) req_vidlox (url, frame, fmt); else
  if (src == 18 && (url = getid (url, 12))) req_vidoza (url, frame, fmt); else
  if (src == 11 && (url = getid (url,  0))) req_xstream (url, frame, fmt); else
  if (src == 31 && (url = getid (url, -6))) req_audiorealm (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_tubitv = async (id, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://tubitv.com/oz/videos/" + id + "/content";

try
{ 
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();
  url = jsonData.url; if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_vidnode = async (id, frame, fmt) =>
{
  var n, s, doc = "", f = [0,0,0,0,0,0,0,0];

  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://vidcloud9.com"; var url = src + "/streaming.php?id=" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else try
{
  if (!cors_kraker) throw ("???"); url = src + "/ajax.php?id=" + id;

  response = await fetch (cors_kraker + "x-requested-with=XMLHttpRequest|*" + url);
  jsonData = await response.json();
  url = jsonData.source;

  for (n = 0; n < url.length; n++)
  {
    s = url [n].label;
    if (s == "360 P") f[0] = n + 1;
    if (s == "480 P") f[1] = n + 1;
    if (s == "720 P") f[2] = n + 1;
    if (s == "HD P")  f[2] = n + 1;
    if (s == "hls P") f[3] = n + 1;
    if (s == "Auto")  f[3] = n + 1;
  }

  if (f[0] || f[1] || f[2])
  {
    n = getformat (f, fmt); n = argformat (n); fmt = pixformat (n);
    fixformat (f, frame); n = f[n] - 1; url = jsonData.source[n].file;
  }
  else
  {
    if (!(n = f[3])) throw ("!!!"); url = jsonData.source[n-1].file;

    if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (cors_kraker + "~*" + url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }
  
  url = cors_kraker + "~*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_xhamster = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0,0,0,0,0];

  var tag = "xhamster"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://xhamster.com/embed/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '"standard":';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  var sub = textData.substr (n + s.length);
  sub = sub.substr (0, sub.indexOf ("}]}") + 3);
  sub = JSON.parse (sub); sub = sub.mp4;

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].quality; k = k.substr (0, k.indexOf ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");

  fmt = r[j]; url = sub[n].url;
  if (url.indexOf (".xhcdn.") < 0) url = sub[n].fallback;
  if (url.indexOf (".xhcdn.") < 0) throw ("!!!");
  url = cors_kraker + "~*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_clipwatching = async (id, frame, fmt) =>
{
  var tag = "clipwatch"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://clipwatching.com/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:"; var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 500); url = url.substr (url.indexOf ("http"));
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");

  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cloudvideo = async (id, frame, fmt) =>
{
  var tag = "cloudvideo"; if (is_busy (frame)) return;
  var url = "https://cloudvideo.tv/embed-" + id + ".html";
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  var n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 2500);
  sub = sub.substr (0, sub.indexOf ("script") - 4);
  eval ("sub=" + sub); url = sub.substr (sub.indexOf ("http"));
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");

/*
  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");
*/

  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_gounlimited = async (id, frame, fmt) =>
{
  var tag = "gounlimited"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://gounlimited.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 2000);
  sub = sub.substr (0, sub.indexOf ("script") - 4);
  eval ("sub=" + sub); url = sub.substr (sub.indexOf ("http"));
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_mixdrop = async (id, frame, fmt) =>
{
  var tag = "mixdrop"; if (is_busy (frame)) return;
  var n = id.lastIndexOf ("/"); if (n >= 0) id = id.substr (n + 1);
  
  if (id.length < 5) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://mixdrop.co/e/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 1000);
  sub = sub.substr (0, sub.indexOf ("script") - 4); if (sub == "") throw ("!!!");
  eval ("sub=" + sub); url = sub.substr (sub.indexOf ("wurl=") + 6);
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");
  url = cors_kraker + "~" + "https:" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_streamvid = async (id, frame, fmt) =>
{
  var tag = "streamvid"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://streamvid.co"; var url = src + "/player/" + id + "/";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '">JuicyCodes.Run';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  var sub = textData.substr (n + s.length, 3000);
  sub = sub.substr (0, sub.indexOf (';<'));

  eval ("sub=" + sub); sub = atob (sub);
  eval ("sub=" + sub.substr (5, sub.length - 7));

  url = sub.substr (sub.indexOf ('file":"') + 7);
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");
  
  if (url.indexOf ("m3u8") > 0) stream_all (frame, 1);

  url = cors_kraker + "~*" + src + ",,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_upstream = async (id, frame, fmt) =>
{
  var tag = "upstream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://upstream.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("file:"); if (n < 0) throw ("!!!");

  url = textData.substr (n + 6, 200);
  url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");

  if (url.indexOf ("m3u8") > 0) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_videobin = async (id, frame, fmt) =>
{
  var tag = "videobin"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://videobin.co/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("sources:"); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); var sub = url.split ("http");
  var s = ""; if (sub.length < 2) throw ("!!!");

  for (n = 1; n < sub.length; n++)
  {
    url = sub[n];
    if (url.indexOf ("m3u8") > 0) s = url;
    if (url.indexOf (".mp4") > 0) { n = 0; break; }
  }

  if (n) if (s) url = s; else throw ("!!!");
  url = "http" + url.substr (0, url.indexOf ('"'));
  if (n) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidlox = async (id, frame, fmt) =>
{
  var tag = "vidlox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidlox.tv/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);
  var sub = url.split ("http"); if (sub.length < 2) throw ("!!!");

  if (sub [1].indexOf ("mp4")  > 0) n =  1; else
  if (sub [2].indexOf ("mp4")  > 0) n =  2; else
  if (sub [1].indexOf ("m3u8") > 0) n = -1; else
  if (sub [2].indexOf ("m3u8") > 0) n = -2; else throw ("!!!");

  if (n < 0) { n = -n; stream_all (frame, 1); }

  url = "http" + sub [n];
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidoza = async (id, frame, fmt) =>
{
  var tag = "vidoza"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidoza.net/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_xstream = async (id, frame, fmt) =>
{
  var i, j, k, sub, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "xstream"; if (is_busy (frame)) return;
  var url = getid (id, 15); if (!url) url = getid (id, 11);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = url; url = "https://xstreamcdn.com/v/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://xstreamcdn.com/api/source/" + id;

  response = await fetch (cors_kraker + url, { method: 'POST' } );
  jsonData = await response.json();
  
  sub = jsonData.data; if (!jsonData.success) throw ("!!!");

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].label; k = k.substr (0, k.indexOf ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (k = f[j] - 1) < 0) throw ("!!!");
  fmt = r[j]; if (!(url = sub[k].file)) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_audiorealm = async (id, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "http://audiorealm.com/station/listen/id/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "'listenurl'>";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ("<"));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digmovie = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); if (!setup_cors (frame)) return;

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_tubitv (doc, frame, fmt); else
  if (src == 2 ) dig_vidnode (doc, frame, fmt); else
  if (src == 3 ) dig_123movies (doc, frame, fmt); else
  if (src == 5 ) dig_unistream (doc, frame, fmt); else
  if (src == 7 ) dig_wcotv (doc, frame, fmt); else
  if (src == 6 ) dig_openload (doc, frame, fmt); else
  if (src == 4 ) dig_pagalmovies (doc, frame, fmt); else
  if (src == 10) dig_general (doc, frame, fmt); else
  if (src == 31) dig_audiorealm (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_tubitv = async (doc, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  var url = doc; var n = url.indexOf (":");
  if (n > 0) url = url.substr (n + 3);
  url = url.split ("/"); url = url [url.length - 2];
  if (url.length < 5 || url.length > 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_tubitv (url, frame, fmt);
}
////////////////////

const dig_vidnode = async (doc, frame, fmt) =>
{
  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "<iframe src=";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 100);
  url = url.substr (url.indexOf ("id=") + 3);
  if ((n = url.indexOf ("=")) > 0) url = url.substr (0, n);
  if ((n = url.indexOf ("&")) > 0) url = url.substr (0, n);

  if (url.length < 6 || url.length > 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_vidnode (url, frame, fmt);
}
////////////////////

const dig_123movies = async (doc, frame, fmt) =>
{
  var s, n, epi, srv, pid, f = [0,0,0,0,0,0,0,0];

  var tag = "123movies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();
  doc = response.url.substr (cors_bypass.length);

  n = textData.indexOf ("type: 'POST'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 800);

  if ((n = url.indexOf ("Player")) > 0)
  {
    s = url.substr (n + 8); s = s.split (",");
    epi = s[0]; epi = epi.substr (0, epi.length - 1);
    srv = s[1].substr (1); pid = s[2].substr (1);
  }
  else
  {
    n = textData.indexOf ("halim-info"); if (n < 0) throw ("!!!");
    s = textData.substr (n, 100); s = s.split ('="');

    pid = s[1]; pid = pid.substr (0, pid.indexOf ('"'));
    srv = s[2]; srv = srv.substr (0, srv.indexOf ('"'));
    epi = s[3]; epi = epi.substr (0, epi.indexOf ('"'));
  }

  url = url.substr (url.indexOf ("nonce"));
  url = url.substr (url.indexOf ("'") + 1);
  url = url.substr (0, url.indexOf ("'"));

  var id = url + "-" + pid + "-" + srv + "-" + epi;
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=halim_ajax_player&nonce=" + url + "&episode=" + epi + "&server=" + srv + "&postid=" + pid;
  url = doc.substr (doc.indexOf ("//") + 2); url = url.substr (0, url.indexOf ("/"));
  url = cors_bypass + "https://" + url + "/wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  s = '360p","u":"'; n = textData.indexOf (s); if (n > 0) f[0] = n + s.length;
  s = '480p","u":"'; n = textData.indexOf (s); if (n > 0) f[1] = n + s.length;
  s = '720p","u":"'; n = textData.indexOf (s); if (n > 0) f[2] = n + s.length;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 360;
  if (n == 1) fmt = 480;
  if (n == 2) fmt = 720;

  url = textData.substr (f[n], 1000);
  url = url.substr (0, url.indexOf ('"'));

  if ((n = url.indexOf ("/")) < 0) url = atob (url); else
    url = atob (url.substr (0, n - 1)) + "?" + atob (url.substr (n + 1));

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_unistream = async (doc, frame, fmt) =>
{
  var tag = "unistream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; var src = "https://uniquestream.vip";

try
{ 
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();
  doc = response.url.substr (cors_kraker.length);

  var n = textData.indexOf ("'player-option-1'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 150); var s = url.split ("='");

  var typ = s[2]; typ = typ.substr (0, typ.indexOf ("'"));
  var pid = s[3]; pid = pid.substr (0, pid.indexOf ("'"));
  var num = s[4]; num = num.substr (0, num.indexOf ("'"));

  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=doo_player_ajax&post=" + pid + "&nume=" + num + "&type=" + typ;
  url = doc.substr (doc.indexOf ("//") + 2); url = url.substr (0, url.indexOf ("/"));
  url = cors_kraker + src + "/wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  jsonData = await response.json();

  url = jsonData.embed_url; if (!url) throw ("!!!");

  response = await fetch (cors_kraker + "**https:" + url);
  textData = await response.text();

  n = textData.indexOf ("url = '"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 7, 200); url = url.substr (0, url.indexOf ("'"));

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_wcotv = async (doc, frame, fmt) =>
{
  var n, s, v, sub, f = [0,0,0,0,0,0,0,0];

  var tag = "wcotv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; var src = "https://www.wco.tv";

try
{ 
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  n = textData.indexOf ("script>var"); if (n < 0) throw ("!!!");
  sub = textData.substr (n + 7); sub = sub.substr (0, sub.indexOf ("document"));

  s = sub.substr (4, 10); s = s.substr (0, s.indexOf (" "));
  eval (sub + "sub=" + s); sub = sub.substr (sub.indexOf ("src=") + 5);
  sub = sub.substr (0, sub.indexOf ('"')); if (sub.substr (0,1) != "/") throw ("!!!");

  response = await fetch (cors_kraker + src + sub);
  textData = await response.text();

  n = textData.indexOf ("getJSON"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 9, 300); url = url.substr (0, url.indexOf ('"'));
  url = "user-agent=abc|x-requested-with=XMLHttpRequest|*" + src + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  if (jsonData.enc) f[1] = 1; if (jsonData.hd) f[2] = 1;
  fmt = getformat (f, fmt); fixformat (f, frame);
  n = argformat (fmt); fmt = pixformat (n);
  url = n < 2 ? jsonData.enc : jsonData.hd;

  url = cors_kraker + "~user-agent=abc|*" + jsonData.server + "/getvid?evid=" + url;

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_openload = async (doc, frame, fmt) =>
{
  var n, s, v, sub, f = [0,0,0,0,0,0,0,0];

  var tag = "openload"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; var src = "https://openloadmovies.ch";

try
{ 
  if (!cors_kraker) throw ("???");
  var crypto = document.getElementById ("cryptojs");
  if (!crypto.src) crypto.src = cors_kraker + "~crypto.js";

  response = await fetch (url);
  textData = await response.text();
  doc = response.url.substr (cors_kraker.length);

  n = textData.indexOf ("'player-option-1'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 150); s = url.split ("='");

  var typ = s[2]; typ = typ.substr (0, typ.indexOf ("'"));
  var pid = s[3]; pid = pid.substr (0, pid.indexOf ("'"));
  var num = s[4]; num = num.substr (0, num.indexOf ("'"));

  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=doo_player_ajax&post=" + pid + "&nume=" + num + "&type=" + typ;
  url = doc.substr (doc.indexOf ("//") + 2); url = url.substr (0, url.indexOf ("/"));
  url = cors_kraker + src + "/wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  jsonData = await response.json();

  url = jsonData.embed_url; if (!url) throw ("!!!");

  response = await fetch (cors_kraker + "user-agent=abc|*" + url);
  textData = await response.text();

  n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");
  v = textData.substr (n - 9); v = v.substr (0, v.indexOf ("{}))") + 3);

  eval ("v=" + v); v = v.substr (0, v.indexOf (";") - 1);
  v = v.substr (v.indexOf ("'") + 1); v = JSON.parse (v);

  s = CryptoJS.lib.CipherParams.create ({ciphertext: CryptoJS.enc.Base64.parse (v.ct)});
  s.iv = CryptoJS.enc.Hex.parse (v.iv); s.salt = CryptoJS.enc.Hex.parse (v.s);

  v = CryptoJS.AES.decrypt (s, "alsfheafsjklNIWORNiolNIOWNKLNXakjsfwnBdwjbwfkjbJjkopfjweopjASoiwnrflakefneiofrt");
  v = JSON.parse (v.toString (CryptoJS.enc.Utf8)); eval ("v=" + v.substr (4));

  v = v.substr (v.indexOf ("[{")); v = v.substr (0, v.indexOf ("}]") + 2);
  eval ("sub=" + v); if (sub.length < 1) throw ("!!!");

  for (n = 0; n < sub.length; n++)
  {
    s = sub[n].label; v = chkformat (s.substr (0, s.length - 1)); if (v >= 0) f[v] = n + 1;
  }

  fmt = getformat (f, fmt); n = argformat (fmt);
  if (n < 0) n = fmt = 0; else { fmt = pixformat (n); n = f[n] - 1; }
  if (!fmt) no_format (frame); else fixformat (f, frame);

  url = sub[n].file; if (url.substr (0,1) != "/") throw ("!!!");
  url = cors_kraker + "~user-agent=abc|*https:" + url;

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_pagalmovies = async (doc, frame, fmt) =>
{
  var tag = "pagalmovies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var n = textData.indexOf ("/file/"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 6, 10); url = url.substr (0, url.indexOf ("/"));
  if (url == "") throw ("!!!");

  url = "https://www.pagalmovies.monster/download/" + url + "/server_1";

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_general = async (doc, frame, fmt) =>
{
  var s, n, src;
  var source = ["gounlimited.to","www.fembed.com","mixdrop.co"];

  var tag = "general"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  for (src = 0; src < source.length; src++)
  {
    s = "/" + source [src] + "/"; n = textData.indexOf (s);

    if (n > 0)
    {
      url = textData.substr (n, 100);
      url = url.substr (0, url.indexOf ('"'));

      s = "/e/"; n = url.indexOf (s);
      if (n < 0) { s = "/f/"; n = url.indexOf (s); }
      if (n < 0) { s = "/v/"; n = url.indexOf (s); }
      if (n < 0) { s = "/embed-"; n = url.indexOf (s); }
      if (n < 0) { s = "/stream/"; n = url.indexOf (s); }
      if (n < 0) continue;

      url = url.substr (n + s.length);
      n = url.indexOf ("/"); if (n > 0) url = url.substr (0, n);
      n = url.indexOf ("."); if (n > 0) url = url.substr (0, n);
      if (url != "") break;
    }
  }

  if (busy > 0 && src >= source.length) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (busy < 0)
  {
    no_fail (frame); no_format (frame);
    loadwindow (url, frame, tag + ": id-none");
    return;
  }
  busy = -busy; if (!no_fail (frame)) return;

  if (src == 0) req_gounlimited (url, frame, fmt);
  if (src == 1) req_xstream (url, frame, fmt);
  if (src == 2) req_mixdrop (url, frame, fmt);
}
////////////////////

const dig_audiorealm = async (doc, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var url = doc.substr (doc.indexOf ("play") + 5);
  url = url.substr (0, url.indexOf ("/"));

  if (url.length < 3 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_audiorealm (url, frame, fmt);
}
////////////////////

//////////////////////////////
///// INTERNET TV (IPTV) /////
//////////////////////////////

var open_livestream = function (url, frame, fmt)
{
  var n, z = frame, f = [0,0,0,0,0,0,0,0]; if (busy) return;

  if (url.substr (0,1) == "?") url = url.substr (1);
  if (url.substr (0,1) == "<") { open_dloader (url, frame, fmt); return; }

  if (url [0] == "/")
  {
    var s = url.split (" "); var t = (s[0] + "/////").split ("/");
    f[0] = t[1] * 1; f[1] = t[2] * 1; f[2] = t[3] * 1;
    f[4] = t[4] * 1; f[5] = t[5] * 1; f[6] = t[6] * 1;
    fmt = getformat (f, fmt); if ((n = argformat (fmt)) < 0) return;
    n = f[n]; if (n != Math.trunc (n)) n = (n * 10) % 10;
    url = s[n]; if (n <= 0 || !url) return;
  }

  n = url.indexOf (":"); if (n > 3) return;
  var src = url.substr (0, n); url = url.substr (n+1);

  if (src == "a") { open_radio ("https://www.iheart.com/live/" + url + "/?embed=true"); return; }
  if (src == "b") { open_radio ("http://virtualdjradio.com/" + url + "/"); return; }

  if (src == "0") { request (url, frame, -fmt); return; }

  document.getElementById ("id" + frame).value = "Tuning...";

  if (src == "7") open_tv0 (z, 0, f, fmt, url);
  if (src == "8") open_tv0 (z, 1, f, fmt, url);
  if (src == "9") open_tv0 (z, 1, f, fmt, cors_bypass + url);

  if (src == "1a") open_tv1 (z, 1, f, fmt, url, "https://ustv247.tv");
  if (src == "1b") open_tv1 (z, 1, f, fmt, url, "https://ustvgo.tv");
  if (src == "1c") open_tv1 (z, 1, f, fmt, url, "https://watchnewslive.tv");
  if (src == "2a") open_tv2 (z, 1, f, fmt, url, "http://www.freeintertv.com");
  if (src == "3a") open_tv3 (z, 1, f, fmt, url, "https://stitcher.pluto.tv");
  if (src == "4a") open_tv4 (z, 1, f, fmt, url, "https://www.streamlive.to");
  if (src == "5a") open_tv5 (z, 0, f, fmt, url, "https://ustreamix.to");
  if (src == "6a") open_tv6 (z, 1, f, fmt, url, "http://123tvnow.com");
  if (src == "7a") open_tv7 (z, 1, f, fmt, url, "https://www.watchnews.pro");
}
////////////////////

var open_radio = function (url)
{
  var w = 360, h = 480;

  var specs = "width=" + w + ",height=" + h + ",top=100" + ",left=100";

  var win = window.open (url, "radiobox", specs); win.focus();
}
////////////////////

const open_dloader = async (url, frame, fmt) =>
{
  if (is_busy (frame)) return; else try
  {
    var n = document.getElementById ("hls" + frame).checked;
    if (n != 1 || (n = url.indexOf (">")) < 2) throw ("???");
    var name = url.substr (1, n - 1); url = url.substr (n + 1);
    var resp = await fetch (url);
    var data = await resp.text();
  } catch (err) { console.log (err); busy = 0; }

  error = ""; busy = -busy; if (!no_fail (frame)) return;
  document.getElementById ("vid" + frame).innerHTML = "Download";
  dloading = name; crack_m3u8 (url, data, frame, fmt); dloading = ""; 
}

const open_tv0 = async (frame, mode, f, fmt, url) =>
{
  var n; if (is_busy (frame)) return;

  if (url.substr (0,1) == "*") if (cors_kraker) url = cors_kraker + "~" + url; else
  {
    url = url.substr (1); n = url.indexOf ("*"); if (n >= 0) url = url.substr (n + 1);
  }

  if (stream_all (frame, 1)) fmt = mode = 0; else
  {
    var x = 0; n = getformat (f, fmt);
    if ((n = argformat (n)) >= 0)
    {
      x = pixformat (n); n = f[n]; var y = Math.trunc (n); if (n != y) x = y;
    }
    if (mode) mode = (x ? x : 2); else { fmt = x; mode = 1; }
  }

  if (mode > 1) try
  {
    response = await fetch (url);
    textData = await response.text();

    var sub = crack_m3u8 (url, textData, frame, fmt); if (sub == "") throw ("!!!");
    n = sub.indexOf ("<>"); fmt = sub.substr (n + 2); url = sub.substr (0, n);

    fmt = fmt * 1; if (fmt && mode > 2) fmt = mode; else mode = 0;

  } catch (err) { console.log (err); busy = 0; }

  if (mode) fixformat (f, frame); else if (!fmt) no_format (frame);
  fmt = " [" + fmt + "]"; if (no_fail (frame)) loadwindow (url, frame, "Internet TV" + fmt);
}
////////////////////

const open_tv1 = async (frame, mode, f, fmt, url, src) =>
{
  var m, n, p, e, s, sub = "1," + url; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((s = saved_path (sub))) url = s; else try
{
  url = cors_kraker + "*" + src + "/clappr.php?" + url;

  var crypto = document.getElementById ("cryptojs");
  if (!crypto.src) crypto.src = cors_kraker + "crypto.js";

  response = await fetch (url);
  textData = await response.text();

  n = textData.indexOf ("var encrypted"); m = textData.indexOf (",decrypted=");
  if (n < 0 || m < 0) throw ("!!!"); url = textData.substr (n, m - n);

  eval (url.replace ("\(\)\,", "\n") + ";p=password;e=JSON.parse(encrypted);");

  s = CryptoJS.lib.CipherParams.create ({ciphertext: CryptoJS.enc.Base64.parse (e.ct)});
  s.iv = CryptoJS.enc.Hex.parse (e.iv); s.salt = CryptoJS.enc.Hex.parse (e.s);
  s = CryptoJS.AES.decrypt (s, p); url = JSON.parse (s.toString(CryptoJS.enc.Utf8));

  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.freeintertv.com  format: ????????  360p
const open_tv2 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "2," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "chname=" + url + "&html5=11";

  url = cors_kraker + src + "/myAjax/get_item_m3u8/";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.indexOf ("http"));
  url = url.substr (0, url.indexOf ("'"));
  if (url == "") throw ("!!!");

  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

const open_tv3 = async (frame, mode, f, fmt, url, src) =>
{
  url = "*,,*https://stitcher.pluto.tv/stitch/hls/channel/" + url + "/master.m3u8" +
        "?appName=web&appVersion=5.4.0-03751b61882e52dadae8597d2215c0142b039e02&deviceDNT=0" +
        "&deviceId=bc4e1e5c-a988-4314-9cb5-d50d142aefe0&deviceMake=Firefox&deviceModel=Firefox&deviceType=web" +
        "&deviceVersion=77.0&sid=1d807765-0025-4bd1-9065-1e003c89ac5f";

  open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.streamlive.to  format: view/#####  360p KRAK
const open_tv4 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "4," + url; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((s = saved_path (sub))) url = s; else try
{
  url = src + "/" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "player="; n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); url = url.substr (url.indexOf ("return") + 6);
  n = url.indexOf ("join") + 4; s = url.substr (0, n) + "(''))";
  url = url.substr (n); eval ("src='https:'+" + s);

  n = url.indexOf ("join"); s = url.substr (0, n - 1); url = url.substr (n + 8);
  url = url.substr (url.indexOf ('"') + 1); url = url.substr (0, url.indexOf ('"'));

  s = "var " + s.substr (s.indexOf ("\+") + 2);
  n = textData.indexOf (s); if (n < 0) throw ("!!!");

  s = textData.substr (n, 1000); s = s.substr (s.indexOf ("["));
  s = s.substr (0, s.indexOf ("]") + 1); src = src + eval ("s=" + s + ".join('')");

  s = "id=" + url + ">"; n = textData.indexOf (s); if (n < 0) throw ("!!!");
  s = textData.substr (n + s.length, 60); src = src + s.substr (0, s.indexOf ("<"));

  url = "**" + src; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://ustreamix.su  format: id=?????  480p KRAK
const open_tv5 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "5," + url; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((s = saved_path (sub))) url = s; else try
{
  url = src + "/stream.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  if ((n = textData.indexOf ("|m3u8|")) < 0) throw ("!!!");
  url = textData.substr (n - 1000, 1500);

  if ((n = url.indexOf ("eval(")) < 0) throw ("!!!");
  url = url.substr (n + 5); url = url.substr (0, url.indexOf ("</script\>") - 2);

  eval ("s=" + url); eval (s + "url = 'https://' + host_tmg + '/' + file_name + '?token=' + jdtk");

  url = "*" + src + "/stream.php*" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://123tvnow.com  format: watch/?????  360p KRAK
const open_tv6 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, t, sub = "6," + url; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((s = saved_path (sub))) url = s; else try
{
  url = src + "/" + url + "/";

  var crypto = document.getElementById ("cryptojs");
  if (!crypto.src) crypto.src = cors_kraker + "~crypto.js";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.indexOf ("'#video-id'"); if (n < 0) throw ("!!!");
  t = textData.substr (n, 1500); t = t.substr (t.indexOf ("[") + 2);
  s = t.substr (0, t.indexOf ("]") - 4); s = s.replace (/','/g , "");

  t = t.substr (t.indexOf ("=_") + 1); t = t.substr (0, t.indexOf ("}") + 1);
  eval ("t=" + t); t = t();

  // decryption algo found in http://123tvnow.com/min/82964.js

  var e = JSON.parse (atob (s));
  var o = CryptoJS.enc.Hex.parse (e.salt);
  var p = CryptoJS.enc.Hex.parse (e.iv);
  n = e.iterations; s = e.ciphertext;

  var q = CryptoJS.PBKDF2 (t, o, { hasher: CryptoJS.algo.SHA512, keySize: 8, iterations: n });
  var r = CryptoJS.AES.decrypt (s, q, { mode: CryptoJS.mode.CBC, iv: p });

  if (!(url = r.toString (CryptoJS.enc.Utf8))) throw ("!!!");

  response = await fetch (cors_kraker + "*" + src + "*" + url);
  textData = await response.text();

  if (textData.indexOf ("http") != 0) throw ("!!!");
  if (textData.indexOf ("hls.") > 0) src = src + "/,,";

  url = "*" + src + "*" + textData; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.watchnews.pro  format: ?????  720p proxy
const open_tv7 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "7," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{
  url = src + "/" + url + ".html";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  n = textData.indexOf ('file: "http'); if (n < 0) throw ("!!!");
  url = textData.substr (n + 7); url = url.substr (0, url.indexOf ('"'));
  if (url == "") throw ("!!!");

  url = "**" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

var saved_path = function (name)
{
  var n, time, path;

  if (!(path = freetv [name])) path = ""; else
  {
    n = path.indexOf (" "); time = path.substr (0, n) * 1;
    path = path.substr (n + 1); if (time < the_time - 15000) path = "";
  }
  return (path);
}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});

  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];

  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

/*
var crack_cloudproxy = function (data)
{
  var n, s, x, url;

try
{
  n = data.indexOf ("S='"); if (n < 0) throw ("???");

  data = data.substr (n + 3);
  data = data.substr (0, data.indexOf ("'"));
  data = atob (data);

  s = ";document.cookie="; n = data.indexOf (s); if (n < 0) throw ("???");
  url = eval (data.substr (2, n - 2));

  data = data.substr (n + s.length); n = data.indexOf ('"="');
  url = eval (data.substr (0, n + 3)) + url;

} catch (err) { console.log (err); url = ""; }

  return (url);
}
////////////////////
*/
/*
var crack_cloudflare = function (frame, src, data)
{
  var n, s, p, q, form = "";

try
{
  p = data.substr (data.indexOf ("setTimeout"));
  p = p.substr (0, p.indexOf ("f.action"));
  p = p.substr (p.indexOf ("{") + 1);

  q = data.substr (data.indexOf ("<form"));
  q = q.substr (0, q.indexOf ("</div") + 6);

  p = p.replace ("href='/'", "href='" + src + "/'");

  s = q + "\n\n<script\>" + p + "</script\>";

  var win = document.getElementById ("mov" + frame);
  var doc = win.contentDocument; doc.open(); doc.write (s); doc.close();

  p = doc.getElementsByTagName ("form")[0];
  q = p.getElementsByTagName ("input");

  for (n = 0; n < q.length; n++) form += "&" + q[n].name + "=" + encodeURIComponent (q[n].value);

  form = src + p.action.substr (7) + "<>" + form.substr (1);

} catch (err) { console.log (err); form = ""; }

  return (form);
}
////////////////////
*/

//////////////////////////
///// INTERNET RADIO /////
//////////////////////////

var radio = function (url)
{
  document.getElementById ("ir_url").value = url;
  ir_action (0); if (url) ir_action (2);
}
////////////////////

var ir_action = function (mode)
{
  var win = document.getElementById ("internet_radio");
  var pop = document.getElementById ("ir_popup");
  var sts = document.getElementById ("ir_status");
  var vol = document.getElementById ("ir_volume");
  var url = document.getElementById ("ir_url").value;

  var src_ok = (win.src && win.src != "file:///");
  var volume = vol.value * 1;

  if (mode == 3)
  {
    sts = pop.checked; pop.checked = !sts;
    pop.className = (sts ? "is_off" : "is_on");
    return;
  }

  if (mode == 2 && url.length == 11 && url.indexOf (":") < 0)
  {
    var src = document.getElementById ("ctr7z").value; if (src > 9) src = 0;
    url = invidious_site [src] + "/latest_version?local=true&itag=251&id=" + url;
    document.getElementById ("ir_url").value = url;
  }

  if (mode == 2 && pop.checked && url)
    { loadwindow (url, -volume, "Internet Radio"); return; }

  if (mode == 2 && !src_ok) if (url)
  {
    if (last_time > get_time() - 2) mode = 0; else win.src = url; last_time = the_time;
  }
  else
  {
    url = document.getElementsByName ("ir");
    for (var i = 0; i < url.length; i++) if (url[i].checked) url[i].onclick();
    return;
  }

  if (mode == 0 || (mode == -2 && src_ok))
  { sts.value = (mode ? "ERROR" : "Stopped"); win.pause(); win.src = "file:///"; }

  if (mode == 2 || (mode == -1 && src_ok))
  { sts.value = "Playing"; win.play(); }

  if (mode == 1 && src_ok)
  { sts.value = "Paused"; win.pause(); }

  if (mode == 4 && volume > 0) volume -= volume > 40 ? 10 : 5;
  if (mode == 5 && volume < 100) volume += volume < 40 ? 5 : 10;

  win.muted = true; win.volume = volume / 100;
  win.muted = false; vol.value = volume;
}
////////////////////

var popper = function (frame, mode)
{
  var i, j, k, val = txt = "";
  var win = document.getElementById ("pop" + frame);
  var index = win.style.zIndex; if (!index) index = -1;
  var popup = document.getElementById ("mov" + frame + "m").checked;

  if (busy) return;

  if (mode.length != undefined)
  {
    txt = mode.substr (mode.indexOf ("<>") + 2);
    val = mode.substr (0, mode.indexOf ("<>"));
    txt = txt.substr (txt.indexOf (" ") + 1);
    if (val == "") mode = 1;
  }

  if (mode && mode.length == undefined)
  {
    if (mode == 1) win.style.zIndex = -index;
    if (mode == 2) win.style.zIndex = popup ? -index : index;
    if (mode == 3) win.style.zIndex = -1;
    if (mode == 4) win.style.zIndex = popup ? 1 : -1;
    return;
  }

  var box = document.getElementById ("stk" + frame);
  var doc = win.getElementsByTagName ("table");

  if (doc.length < 2 || !(doc = doc [1])) doc = null;
  if (doc) doc = doc.getElementsByTagName ("button");
  if (!doc || doc.length < 2) doc = null;

  if (mode)
  {
    if (doc)
    {
      for (i = 0; i < doc.length - 1; i++) if (txt == doc[i].innerText) break;

      for (; i > 0; i--)
      {    
        doc[i].value = doc[i-1].value; doc[i].innerText = doc[i-1].innerText;
      }
      doc[0].value = mode; doc[0].innerText = txt;
    }
    error = val; box.value = "";
    box.parentNode.firstElementChild.value = "@ " + txt;
    if (frame == 5) loadid (frame, 2);
    if (frame == 6) loadnews (frame, 2);
    if (frame == 7) loadmovie (frame, 2);
    return;
  }

  var start = '<button onclick="javascript:popper(' + frame + ',this.value)" value="';
  var middle2 = '" style="background-color:lightblue">';
  var middle1 = '" style="background-color:pink">';
  var pop = "<table><tr><td>"; box = box.children;

  var n = Math.floor (((i = box.length) + 2) / 3);
  if ((i -= 45) > 0) n = 15; else i = 1;

  for (j = k = 0; k < 3; i++)
  {
    if (i >= box.length) { val = ""; txt = "-"; } else
      { val = box[i].value; txt = box[i].innerText; }
    pop = pop + start + val + "<>" + txt + middle1 + txt + "</button><br>";
    if (++j >= n) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  pop = pop + "</td></tr></table><table><tr><td>";

  for (i = 0, j = k = 0; k < 3; i++)
  {
    if (!doc || i >= doc.length) { val = ""; txt = "-"; } else
      { val = doc[i].value; txt = doc[i].innerText; }
    pop = pop + start + val + middle2 + txt + "</button><br>";
    if (++j >= 4) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  win.innerHTML = pop + "</td></tr></table>";
//  if (popup) win.style.zIndex = 1;
  win.style.zIndex = 1;
}
////////////////////

//////////////////////
///// LOADWINDOW /////
//////////////////////

var loadwindow = function (url, frame, site)
{
  var h, w, win, raw, title, insert, specs, mode;

  var bstyle = "<body style='margin:0;padding:0;background-color:";
  var istyle = " style='position:absolute;border:none;outline:none;width:100%;height:100%'";
  var vstyle = " autoplay allowfullscreen ";

  var frm = document.getElementById ("mov" + frame);
  var msg = document.getElementById ("vid" + frame);
  get_time();

  if (url == "")
  {
    // remove and append <iframe> to block history
    msg.innerHTML = "No Video"; win = frm.parentNode; win.removeChild (frm);
    frm.src = "about:blank"; frm.style.pointerEvents = "none"; win.appendChild (frm);
    if (site) document.getElementById ("id" + frame).value = site;
    return;
  }

  if (last_time > the_time - 2) return; last_time = the_time;

  if (frame <= 0)  // Internet Radio popup window
  {
    insert = "<!DOCTYPE html><html><head><title>" + site + "</title></head>" + bstyle;
    insert = insert + "cornflowerblue;color:turquoise;font-size:20px;line-height:22px;text-align:center'>";
    insert = insert + "<audio controls style='position:absolute;left:0;bottom:0;width:100%;height:25vh'";
    insert = insert + " id='audio'></audio><h1><i>" + site + "</i></h1></body></html>";
    specs = "width=440,height=120,top=100,left=100";

    win = window.open ("about:blank", "audiobox", specs); win.focus();
    var doc = win.document; doc.open(); doc.write (insert); doc.close();
    var aud = doc.getElementById ("audio"); aud.src = url;
    aud.volume = frame / -100; aud.play(); 

    doc.body.onfocus = function()
    {
      h = 120 - aud.clientHeight * 4; w = 440 - aud.clientWidth;
      win.resizeBy (w, h); doc.body.onfocus = function() {};
    }
    return;
  }

  var multi = document.getElementById ("mov" + frame + "m").checked;
  var nplay = document.getElementById ("mov" + frame + "n").checked;

  if (document.getElementById ("mov" + frame + "a").checked) raw = 0; else
  if (document.getElementById ("mov" + frame + "b").checked) raw = 1; else
  if (document.getElementById ("mov" + frame + "c").checked) raw = 2; else raw = 0;

  if (site == "") mode = 0; else
  {
    if (url [0] == "~") url = cors_kraker ? cors_kraker + url : url.substr (1);
    specs = url.substr (0,4); mode = document.getElementById ("meta" + frame).step * 1;

    if (specs != "http" && specs != "file")
    {
      msg.innerHTML = "Bad URL"; return;
    }
    document.getElementById ("id" + frame).value = site;
    document.getElementById ("line" + frame).value = url;

    if (nplay)
    {
      msg.innerHTML = "No Play"; return;
    }
  }

  if (raw == 1)
  {
    title = "Wrapper";
    insert = "'><video" + istyle + vstyle + "id='video'></video></body>";
  }

  if (raw == 2)
  {
    title = "Sandbox";
    insert = "'><iframe" + istyle + vstyle + "src='" + url +
      "' sandbox='allow-scripts allow-same-origin allow-forms'></iframe></body>";
  }

  ir_action (1); var filter = frm.value; if (!filter) filter = "initial";

  if (document.getElementById ("btn" + frame + "b").checked)
  {
    var lft, top;

    win = document.getElementById ("win" + frame);
    if (!(specs = win.value)) specs = win.children[0].value;

    h = specs.indexOf (":");
    w = specs.substr (0, h);
    h = specs.substr (h + 1);

    lft = (window.screen.width - w)  / 2;
    top = (window.screen.height - h) / 3;

    specs = "width=" + w + ",height=" + h + ",top=" + top + ",left=" + lft;
  }

  else if (document.getElementById ("btn" + frame + "a").checked)
  {
    h = w = 0; specs = "";
  }

  else
  {
    if (raw != 1)
    {
      frm.style.filter = filter; frm.src = url;
    }
    else
    {
      frm.style.filter = "initial";
      win = frm.contentDocument; insert = bstyle + "black" + insert;
      load_stream (frame, true, insert, url, win, filter, mode);
    }
    frm.style.pointerEvents = "auto"; msg.innerHTML = "No Video"; return;
  }

  if (multi) vidwin = null; else if (h != last_h || w != last_w || raw != last_raw)
  {
    if (vidwin) vidwin.close(); vidwin = null;
  }
  if (!vidwin || vidwin.closed) vidwin = window.open ("about:blank", "_blank", specs);
  last_h = h; last_w = w; last_raw = raw;

  win = vidwin.document; if (win.body.onunload) win.body.onunload();

  if (raw == 0) vidwin.location = url; else
  {
    istyle = "<html><head><title>" + title + "</title></head>";
    insert = istyle + bstyle + "black" + insert + "</html>";
    load_stream (frame, false, insert, url, win, filter, mode);
  }
  vidwin.focus(); msg.innerHTML = "";
}
////////////////////

var vid_oops = function (frame, vid, fatal)
{
  if (fatal) setTimeout (function() { vid_error (vid); }, 500);
}
////////////////////

var vid_info = function (frame, w, h, reset)
{
  var msg = w + " x " + h;
  if (w <= 0 || h <= 0) if (reset) msg = ""; else return;
  doc = document.getElementById ("meta" + frame).value = msg;
}
////////////////////

var load_stream = function (frame, is_local, insert, url, doc, filter, mode)
{
  if (!doc) return; doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();

  var win = doc.getElementById ("video");
  var fmt = document.getElementById ("fmt" + frame).value;
  var hls = document.getElementById ("hls" + frame).checked;
  if (mode >= 0 && !document.getElementById ("mov" + frame + "f").checked) fmt = 0;

  if (!win)
  {
    win = doc.getElementsByTagName ("iframe")[0];
    if (win) win.style.filter = filter; return;
  }

  if (!is_local) frame = 0; else win.onloadedmetadata = function()
  {
    var w = this.videoWidth, h = this.videoHeight; vid_info (frame, w, h, 0);
    if (localhost && (w <= 0 || h <= 0)) this.poster = "~poster.jpg";
  }

  // Firefox and Opera: popup windows are incorrectly sized
  // create the controls when the window is ready (window will be resized)

  doc.body.onfocus = function()
  {
    doc.body.onfocus = function() {};
    create_controls (win, is_local ? null : vidwin, last_w, last_h);
  }

  win.step = mode; win.value = frame; win.style.filter = filter;
  if (is_local) doc.body.onfocus();  // embedded viewer is always ready

  if (!hls)
  {
    win.src = url; win.onerror = function() { vid_oops (frame, win, true); }
  }

  if (hls == 1)
  {
    var js = get_js ("HLS", !window.Hls);
    js.onload = function() { play_hls (frame, mode, url, doc, win, fmt); }
    if (window.Hls) js.onload(); else if (localhost) js.src = "~hls_player.js";
      else js.src = "https://cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js";
  }

  if (hls == 2)
  {
    var js = get_js ("DASH", !window.dashjs);
    js.onload = function() { play_dash (frame, mode, url, doc, win, fmt); }
    if (window.dashjs) js.onload(); else if (localhost) js.src = "~dash_player.js";
      else js.src = "https://reference.dashif.org/dash.js/v3.1.3/dist/dash.all.min.js";
//      else js.src = "https://reference.dashif.org/dash.js/v2.9.3/dist/dash.all.min.js";
  }
}
////////////////////

var get_js = function (type, replace)
{
  var name = type + "_player", js = document.getElementById (name);
  if (js) if (!replace) return js; else js.parentNode.removeChild (js);
  js = document.createElement ("SCRIPT"); js.onerror = function() { err_play (type); }
  js.id = name; document.body.appendChild (js); return js;
}
////////////////////

var err_play = function (error)
{
  alert (error + " player seems to be missing! Server not serving.\n\n" +
    " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}
////////////////////

var hls_select = function (levels, fmt)
{
  if (!fmt) return (-1); var f = formats_m3u8 (levels);
  fmt = getformat (f, fmt); fmt = argformat (fmt);
  if (fmt >= 0) fmt = f[fmt] - 1; return (fmt);
}
////////////////////

var play_hls = function (frame, mode, url, doc, win, fmt)
{
  var hls_cfg = {
    debug: false,
    startLevel: 2,
    autoStartLoad: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    defaultAudioCodec: "mp4a.40.5",
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000,
    enableWebVTT: false,
    enableCEA708Captions: false
  };

  var vid = new Hls (hls_cfg);
  doc.body.onunload = function() { vid.destroy(); console.log ("HLS player unloaded."); }
  vid.loadSource (url);
  vid.attachMedia (win);
  vid.on (Hls.Events.ERROR, function (event,data) { vid_oops (frame, win, data.fatal); });

  vid.on (Hls.Events.MANIFEST_LOADED, function (event,data) {
    this.loadLevel = hls_select (this.levels, fmt); this.startLoad(); });

  if (frame > 0) vid.on (Hls.Events.BUFFER_CODECS, function (event,data) {
    var x = data.video; if (x) vid_info (frame, x.metadata.width, x.metadata.height, 0); });
}
////////////////////

var play_dash = function (frame, mode, url, doc, win, fmt)
{
  var vid = dashjs.MediaPlayer().create();
  doc.body.onunload = function() { vid.reset(); console.log ("DASH player unloaded."); }
  // vid.getDebug().setLogToBrowserConsole(false);   // turn off fracking console messages! v2.5.0
  vid.initialize (win, url, true);
  vid.on (dashjs.MediaPlayer.events ["ERROR"], function () { vid_oops (frame, win, true); });

  if (frame > 0) vid.on (dashjs.MediaPlayer.events ["QUALITY_CHANGE_RENDERED"], function ()
    { var x = vid.getCurrentTrackFor ('video'); if (!x) return;
      var y = x.bitrateList [vid.getQualityFor ('video')];
      vid_info (frame, y.width, y.height, 0); });
}
////////////////////

/*  HLS configuration options (https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning)

var config = {
      autoStartLoad: true,
      startPosition: -1,
      debug: false,
      capLevelOnFPSDrop: false,
      capLevelToPlayerSize: false,
      defaultAudioCodec: undefined,
      initialLiveManifestSize: 1,
      maxBufferLength: 30,
      maxMaxBufferLength: 600,
      maxBufferSize: 60*1000*1000,
      maxBufferHole: 0.5,
      lowBufferWatchdogPeriod: 0.5,
      highBufferWatchdogPeriod: 3,
      nudgeOffset: 0.1,
      nudgeMaxRetry: 3,
      maxFragLookUpTolerance: 0.25,
      liveSyncDurationCount: 3,
      liveMaxLatencyDurationCount: Infinity,
      enableWorker: true,
      enableSoftwareAES: true,
      manifestLoadingTimeOut: 10000,
      manifestLoadingMaxRetry: 1,
      manifestLoadingRetryDelay: 1000,
      manifestLoadingMaxRetryTimeout: 64000,
      startLevel: undefined,
      levelLoadingTimeOut: 10000,
      levelLoadingMaxRetry: 4,
      levelLoadingRetryDelay: 1000,
      levelLoadingMaxRetryTimeout: 64000,
      fragLoadingTimeOut: 20000,
      fragLoadingMaxRetry: 6,
      fragLoadingRetryDelay: 1000,
      fragLoadingMaxRetryTimeout: 64000,
      startFragPrefetch: false,
      fpsDroppedMonitoringPeriod: 5000,
      fpsDroppedMonitoringThreshold: 0.2,
      appendErrorMaxRetry: 3,
      loader: customLoader,
      fLoader: customFragmentLoader,
      pLoader: customPlaylistLoader,
      xhrSetup: XMLHttpRequestSetupCallback,
      fetchSetup: FetchSetupCallback,
      abrController: AbrController,
      bufferController: BufferController,
      capLevelController: CapLevelController,
      fpsController: FPSController,
      timelineController: TimelineController,
      enableWebVTT: true,
      enableCEA708Captions: true,
      stretchShortVideoTrack: false,
      maxAudioFramesDrift: 1,
      forceKeyFrameOnDiscontinuity: true,
      abrEwmaFastLive: 3.0,
      abrEwmaSlowLive: 9.0,
      abrEwmaFastVoD: 3.0,
      abrEwmaSlowVoD: 9.0,
      abrEwmaDefaultEstimate: 500000,
      abrBandWidthFactor: 0.95,
      abrBandWidthUpFactor: 0.7,
      abrMaxWithRealBitrate: false,
      maxStarvationDelay: 4,
      maxLoadingDelay: 4,
      minAutoBitrate: 0,
      emeEnabled: false,
      widevineLicenseUrl: undefined,
      requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess
  };
*/

//////////////////////////////
///// GENERIC BRIGHTCOVE /////
//////////////////////////////

const find_brightcove = async (doc, xtag, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var url = cors_bypass + doc;
  var tag = xtag; if (tag == "") tag = "brightcove";
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-account="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  var pub = textData.substr (n + s.length, 100);
  pub = pub.substr (0, pub.indexOf ('"'));

  s = 'data-video-id="'; n = textData.indexOf (s);
  if (n < 0) { s = 'data-video-id-pending="'; n = textData.indexOf (s); }
  if (n < 0) { s = 'data-brightcove-video-id="'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  var id = textData.substr (n + s.length, 100);
  id = id.substr (0, id.indexOf ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) load_brightcove (pub, id, xtag, frame, fmt);
}
////////////////////

const load_brightcove = async (pub, id, xtag, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  if (is_busy (frame)) return;
  var tag = xtag; if (tag == "") tag = "brightcove";

  if (pub == "")
  {
    i = id.indexOf ("-"); pub = id.substr (0, i); id = id.substr (i + 1);
  }
  
  var url = "https://players.brightcove.net/" + pub + "/default_default/index.min.js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (pub.length < 9 || pub.length > 13 || id.length < 10 || id.length > 13) throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'accountId:"' + pub + '",policyKey:"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  var pk = textData.substr (n + s.length, 200);
  pk = pk.substr (0, pk.indexOf ('"'));

  url = "https://edge.api.brightcove.com/playback/v1/accounts/" + pub + "/videos/" + id;

  response = await fetch (cors_kraker + url, { headers: { 'Accept': 'application/json;pk=' + pk }, });
  textData = await response.json();

  var url_m3u8 = ""; var dat = textData.sources; if (dat == undefined) throw ("!!!");

  for (i = 0; i < dat.length; i++)
  {
    url = dat [i].src; if (url == undefined) continue;
    if (url.indexOf ("m3u8") > 0) { url_m3u8 = url; continue; }
    k = dat [i].height; if (k == undefined) continue;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if ((k = getformat (f, fmt)))
  {
    if ((k = argformat (k)) < 0 || (k = f[k] - 1) < 0) throw ("!!!");
    url = dat [k].src; fmt = dat [k].height; fixformat (f, frame);
  }
  else
  {
    if ((url = url_m3u8) == "") throw ("!!!");
    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.indexOf ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (xtag == "") id = pub + "-" + id;
  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var crack_source = function (data, frame, fmt)
{
  var sub, str, url, i, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  sub = data.split ("<source src="); if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i]; j = str.indexOf ('label="');
    str = str.substr (j + 7); str = str.substr (0, str.indexOf ('"'));
    if ((j = str.indexOf ("p")) > 0) str = str.substr (0, j);
    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  str = sub [f[j]]; fmt = r[j];
  url = str.substr (1); str = str.substr (0,1);
  url = url.substr (0, url.indexOf (str)); if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

var crack_smil = function (data, frame, fmt)
{
  var sub, str, url, i, j, url, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  str = '<audio src="'; j = data.indexOf (str);

  if (j > 0)
  {
    url = data.substr (j + str.length, 200);
    url = url.substr (0, url.indexOf ('"'));

    if (url == "") return ""; else return (url + "<>");
  }

  sub = data.split ('<video src="');
  if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i];

    if ((j = str.indexOf ("height")) > 0)
    {
      str = str.substr (j + 8);
      str = str.substr (0, str.indexOf ('"'));
    }
    else if ((j = str.indexOf ("bitrate")) < 0) continue; else
    {
      str = str.substr (j + 9);
      str = str.substr (0, str.indexOf ('"'));
      if (str == "3500000") str = "720"; else
      if (str == "1850000") str = "504"; else

      if (str == "1700000") str = "720"; else
      if (str == "1300000") str = "504"; else
      if (str ==  "900000") str = "360"; else continue;
    }

    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  url = sub [f[j]]; fmt = r[j];
  url = url.substr (0, url.indexOf ('"'));
  if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

///////////////////////
///// M3U8 LOADER /////
///////////////////////

var crack_m3u8 = function (path, data, frame, fmt)
{
  var i, j, k, b, h, w, sub, str, url, levels = [];

  if ((sub = data.split ("#EXT-X-STREAM-INF")).length < 2)
  {
    if (dloading) make_downloader ("", path); return (path + "<>");
  }

  for (i = 1; i < sub.length; i++)
  {
    k = sub[i].split ("\n"); url = k[0];

    if ((j = url.indexOf ("BANDWIDTH")) < 0) b = 0; else
    {
      str = url.substr (j + 10); j = str.indexOf (",");
      if (j > 0) str = str.substr (0, j); b = str * 1;
    }

    if ((j = url.indexOf ("RESOLUTION")) < 0) w = h = 0; else
    {
      str = url.substr (j + 11); j = str.indexOf (",");
      if (j > 0) str = str.substr (0, j); j = str.indexOf ("x");
      h = str.substr (j + 1) * 1; w = str.substr (0, j) * 1;
    }
    levels [i-1] = { width: w, height: h, bitrate: b, url: k[1], dat: k[0] }
  }

  k = formats_m3u8 (levels); fixformat (k, frame); fmt = getformat (k, fmt);
  if ((j = argformat (fmt)) < 0 || (i = k[j] - 1) < 0) return (path + "<>0");

  if (!(fmt = levels [i].height)) fmt = pixformat (j);
  url = levels [i].url; url = merge_url (path, url) + url;

  audio = sub [0]; k = levels [i].dat.indexOf ("AUDIO=");
  sub = audio.split ("#EXT-X-MEDIA");

  for (i = 1, j = -1; i < sub.length; i++)
  {
    audio = sub[i];
    if (audio.indexOf ("TYPE=AUDIO") < 0) continue;
    if (audio.indexOf ("DEFAULT=YES") < 0 && k < 0) continue;
    if ((j = audio.indexOf ('URI="')) > 0) break;
  }

  if (j < 0) audio = ""; else
  {
    audio = audio.substr (j + 5);
    audio = audio.substr (0, audio.indexOf ('"'));
    audio = merge_url (path, audio) + audio;
  }

  if (dloading) make_downloader (audio, url);
  if (audio) return (path + "<>0"); else return (url + "<>" + fmt);
}
////////////////////

var formats_m3u8 = function (levels)
{
  var i, j, k, w, h, b, f = [0,0,0,0,0,0,0,0], p = [0,0,0,0], r = [0,0,0,0];

  if (!levels || !levels.length) return (f);

  for (i = 0; i < levels.length; i++)
  {
    if (!(w = levels[i].width)) w = 0;
    if (!(h = levels[i].height)) h = 0;
    if (!(b = levels[i].bitrate)) b = 0;

    if (!h) if ((b -= 175000) < 0) continue; else
    { h = Math.trunc (Math.sqrt (b * 0.2)); b = -1 } else
    { if (b) b -= w * h * 2 + 250000; if (b > 0) b *= 3; else b *= -2; }

    if ((j = chkformat (h)) < 0 || (b < 0 && r[j])) continue;

    k = ((b >= 0 && !r[j]) || (p[j] == h && b < r[j]));
    if (k || p[j] < h) { f[j] = i + 1; p[j] = h; r[j] = b + 1; }
  }

  if (f[1] && p[0] < 240) f[0] = 0; return (f);
}
////////////////////

var merge_url = function (path1, path2)
{
  var url = "", sub, str, i, j, k;

  if (path2.indexOf ("http") == 0) return "";

  if ((k = path1.indexOf ("?")) < 0) k = path1.length;
  sub = path1.substr (0, k).split ("/"); str = path2.split ("/");

  if (str[0] == "") k = str.length; else k = 1;
  j = sub.length - k; if (j < 3) j = 3;

  for (i = 0; i < j; i++) url = url + sub [i] + "/";

  if (k > 1) url = url.substr (0, url.length - 1);

  return url;
}
////////////////////

//////////////////////
///// DOWNLOADER /////
//////////////////////

var open_downloader = function ()
{
  var downloader = window.open ();
  downloader.document.write (download_doc);
  downloader.document.close ();
}
////////////////////

var make_downloader = function (aud, vid)
{
  var scrip = "cancel=function(x){document.getElementsByTagName('button')[0].value='';}";

  var bstyle = "<body style='margin:0;padding:0;text-align:center;" +
    "background-color:cornflowerblue;color:yellow;font-size:20px'" +
    " onunload='javascript:cancel()'>";

  var istyle = "<input type=text size=10 disabled style='" +
    "background-color:transparent;color:white;font-size:18px;" +
    "font-family:inherit;text-align:right;border:none'>";

  var insert = "<!DOCTYPE html><head><title>Download</title></head>" + bstyle +
    "<div style='width:0;height:100%;position:absolute'></div>" +
    "<h1 style='color:sandybrown;margin-top:12px'>" + dloading + "</h2>" +
    "Audio Progress : &nbsp;&nbsp; " + istyle + "<p></p>" +
    "Video Progress : &nbsp;&nbsp; " + istyle + "<p></p><br>" +
    "<button onclick='javascript:cancel()' value='" + dloading + "'>Cancel</button>" +
    "<script\>var " + scrip + "</script\>";

  var specs = "width=400,height=240,top=100,left=100";
  var win = window.open ("about:blank", "", specs), doc = win.document;
  win.focus(); doc.open(); doc.write (insert); doc.close(); doc = doc.body;

  doc.onfocus = function()
  { 
    doc.onfocus = function() {};
    var h = 240 - doc.firstChild.clientHeight;
    var w = 400 - doc.clientWidth; win.resizeBy (w, h);
    download_m3u8 (win, doc, aud, vid);
  }
}
////////////////////

const download_m3u8 = async (win, doc, aud, vid) =>
{
  var i, j, k, resp, data, str, url, header;
  var src, sub, name, count, errors, msg = "DONE";

  var button = doc.getElementsByTagName ("button")[0];
  var status = doc.getElementsByTagName ("input");
  status[0].value = aud ? "Pending" : "No Track";
  status[1].value = vid ? "Pending" : "No Track";

  var fname = "+" + button.value;
  if (cookies [fname]) { button.innerText = "GO AWAY"; return; }
  cookies [fname] = "ok";

try { for (i = 0; i < 2; i++)
{ 
  name = fname + (i ? "-vid" : "-aud");
  try { resp = await fetch (name, { method: 'PUT' } ); } catch(e) { resp = ""; }
  if (!resp || resp.status != 200) throw ("Error writing file");
  src = i ? vid : aud; if (!src) continue;

  for (k = 1; k < 5; k++)
  {
    try { resp = await fetch (src);
          data = await resp.text(); } catch(e) { resp = ""; }
    if (resp && resp.status == 200) break;
    if (k > 3) throw ("Error loading m3u8");
  }
  k = data.indexOf ("#EXT-X-ENDLIST"); if (k < 0) k = data.length;
  sub = data.substr (0, k).split ("#EXTINF:"); count = errors = 0;

  for (j = 1; j < sub.length; j++)
  {
    url = ""; header = {}; str = sub [j].split ("\n");
    for (k = str.length - 1; k > 0; k--)
    {
      if (!str [k]) { str.splice (k, 1); continue; }
      if (!url && str [k][0] != "#") url = str [k];
    }
    if (!url) continue; url = merge_url (src, url) + url;

    if ((k = str [1].indexOf ("#EXT-X-BYTERANGE:")) >= 0)
    {
      str = str [1].substr (k + 17).split ("@");
      k = str [0] * 1 + str [1] * 1 - 1; str = str [1] + "-" + k;
      header = { headers: { Range: "bytes=" + str }}; 
    }
    for (k = 1; k < 5; k++)
    {
      if (!button.value) throw ("STOPPED");
      try { resp = await fetch (url, header);
            data = await resp.arrayBuffer(); } catch(e) { resp = ""; }
      if (resp && (resp.status == 200 || resp.status == 206))
      {
        await fetch ("~+" + name, { method: 'PUT', body: data } );
        status[i].value = ++count + " of " + (sub.length - 1);
        if (errors > 0) errors--; break;
      }
      if (k > 3)
      {
        console.log ("Error loading segment " + j + " in " + name);
        if (++errors > 2) throw ("Server not responding");
      }
    }
  }
} } catch (err) { msg = err; }

  button.innerText = msg; cookies [fname] = "";
}
////////////////////

</script>

<!--
////////////////////////////////
///// Custom Video Control /////
////////////////////////////////
//-->

<!-- This element must be cloned and inserted into a video frame. -->

<div id="video_control" style="display:none">

<div class="v-control">
  <input type="range" value=1 min=0 max=1 step=0.01 style="width:calc(100% - 238px);margin-bottom:5px">
  <span><input type=text class="v-misc" value="1.0" style="width:30px"></span></span>
  <input type="text" style="width:72px;color:azure;background-color:transparent" disabled>
  <input type="text" style="width:72px;color:azure;background-color:transparent" disabled>
  <br>
  <span class="play-lft"></span><span class="play-ctr"></span><span class="play-rgt"></span>
  <span class="t-alpha t-alpha2" style="width:30px">Mute</span>
  <input type="range" value=1 min=0 max=1 step=0.05 style="min-width:40px;max-width:216px">
  <span class="t-alpha t-alpha2" style="width:30px">Seek</span>
  <input type="text" value="0:0:0" style="width:76px;margin-right:2px">
  <span><input type=text class="v-seek" style="width:18px" value="5s" ></span>
  <span><input type=text class="v-seek" style="width:24px" value="15s"></span>
  <span><input type=text class="v-seek" style="width:18px" value="1m" ></span>
  <span><input type=text class="v-seek" style="width:18px" value="2m" ></span>
  <span><input type=text class="v-seek" style="width:18px" value="5m" ></span>
  <span><input type=text class="v-seek" style="width:24px" value="10m"></span>
  <span><input type=text class="v-misc" style="width:12px" value="B"  ></span>
  <span><input type=text class="v-misc" style="width:12px" value="S"  ></span>
  <span class="t-alpha" style="width:8px;margin-left:2px">F</span>
  <span class="t-alpha" style="width:8px">R</span>
  <span class="t-alpha" style="width:14px">FS</span>
</div>

<style type="text/css">

.v-control {
  position: absolute; text-align: center;
  bottom: 0; width: calc(100% - 8px);
  margin: 0; padding: 4px 4px 4px 4px;
  font-size: 14px; line-height: 17px;
  font-family: 'segoe ui', serif;
  background-color: steelblue; cursor: default;
  user-select: none;
}

.v-control input {
  appearance: none; -moz-appearance: none; -webkit-appearance: none;
  height: 13px; text-align: center; vertical-align: top;
  padding: 1px 3px 1px 3px; margin: 2px 1px 3px 1px;
  border: 1px solid darksalmon; border-radius: 7px;
  font-size: 14px; line-height: 13px;
  font-family: 'consolas', 'lucida console', monospace;
  color: darkviolet; background-color: lightpink;
  user-select: auto;
}

.v-control input::-moz-range-thumb {
  -moz-appearance: none;
  width: 4px; height: 19px;
  background: greenyellow;
  border: none; border-radius: 0;
}

.v-control input::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 4px; height: 19px;
  background: greenyellow;
  border: none; border-radius: 0;
}

.v-control input::selection {
  color: yellow; background-color: orchid;
}

.v-control span {
  cursor: pointer;
}

input.v-seek {
  pointer-events: none; margin-left: 0; margin-right: 0;
  border-width: 1px 6px 1px 6px; border-color: mediumseagreen;
  border-radius: 5px; color: snow; background-color: mediumslateblue;
}

input.v-misc {
  pointer-events: none; margin-right: 0;
  border-width: 1px 6px 1px 6px; border-color: lightseagreen;
  border-radius: 5px; color: snow; background-color: mediumpurple;
}

.t-alpha {
  display: inline-block; vertical-align: middle;
  padding: 0 3px 2px 3px; margin: 0 0 0 -1px;
  color: yellow; background-color: mediumpurple;
}

.t-alpha2 {
  padding: 0 4px 2px 4px; margin: 0; font-style: italic;
}

.play-lft {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 1px 0 0 0;
  border-style: solid; border-width: 9px 6px 9px 0px;
  border-color: transparent yellow transparent yellow;
}

.play-ctr {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 0;
  border-style: solid; border-width: 9px 2px 9px 2px;
  border-color: transparent;
}

.play-rgt {
  display: inline-block; vertical-align: top; cursor: pointer;
  width: 0; height: 0; margin: 1px 1px 0 0;
  border-style: solid; border-width: 9px 0px 9px 6px;
  border-color: transparent yellow transparent yellow;
}

.pause-lft {
  height: 16px; margin: 2px 0 0 2px;
  border-width: 0 2px 0 2px;
}

.pause-rgt {
  height: 16px; margin: 2px 3px 0 0;
  border-width: 0 2px 0 2px;
}

.anim-bar {
  animation-name: waiting;
  animation-delay: 5s;
  animation-duration: 2.5s;
  animation-fill-mode: both;
  animation-direction: normal;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

@keyframes waiting {
   0%  { background-color: lightpink; }
  30%  { background-color: lightpink; }
  70%  { background-color: salmon; }
 100%  { background-color: lightpink; }
}

</style></div>

<script>  // Video control script. NOT inserted into a video frame.

var create_controls = function (vid, popup, w, h)
{
  // kludge to fix wrong popup window dimensions
  if (popup) popup.resizeBy (w - vid.clientWidth, h - vid.clientHeight);

  var control = document.getElementById ("video_control");
  control = control.cloneNode (true);
  control.style.display = "inline-block";

  var doc = control.firstElementChild;  // video control
  doc.onclick     = function(e) { vid_event (e); }
  vid.onmousemove = function(e) { vid_event (e); }
  doc.onmouseleave = function() { vid_cntrl (vid, 0); }
  doc.onmouseenter = function() { vid_cntrl (vid, 1); }

  var sib = doc.children;  // video control elements
  sib [0].onchange = function() { vid_click (this, 1); }
  sib [8].onclick  = function() { vid_click (this, 2); }
  sib [9].onchange = function() { vid_click (this, 3); }
  sib [10].onclick = function() { vid_click (this, 4); }
  sib [20].onclick = function() { vid_click (this, 5); }
  sib [21].onclick = function() { vid_click (this, 6); }
  sib [22].onclick = function() { vid_click (this, 7); }

  vid.onended      = function() { vid_cntrl (this, 1); }
  vid.onclick      = function() { vid_cntrl (this, 2); }
  vid.onplay       = function() { vid_cntrl (this, 3); }
  vid.onpause      = function() { vid_cntrl (this, 4); }
  vid.onseeking    = function() { vid_cntrl (this, 5); }
  vid.onwaiting    = function() { vid_cntrl (this, 6); }
  vid.onstalled    = function() { vid_cntrl (this, 7); }
  vid.ontimeupdate = function() { vid_cntrl (this, 8); }

  doc = vid.parentNode;  // document body
  doc.onresize = function() { vid_resize (vid); }
  doc.onfullscreenchange = function() { vid_cntrl (vid, 9); }

  sib [0].classList.add ("anim-bar");
  vid.checked = 0; vid_rotate (vid, sib, -1);
  doc.appendChild (control); vid_resize (vid);
}
////////////////////

var vid_error = function (vid)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  vid.disabled = true; vid.style.cursor = "default"; ctr.style.display = "initial";
  sib [0].classList.remove ("anim-bar"); sib [0].style.background = "crimson";
  sib [2].value = "ERROR"; sib [3].value = "!!!!!";
}
////////////////////

var vid_cntrl = function (vid, mode)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  if (ctr.value == undefined && mode > 2 && mode < 8) return;
  if (vid.disabled && mode != 2 && mode != 9) return;

  var t = vid.currentTime, d = vid.duration;
  if (isNaN (t)) t = 0; if (isNaN (d) || !isFinite (d)) d = 0;
  var z = (t > 0 && d > 0) ? 400 * t / d : 0; z = Math.round (z) * 0.25;

  var no_action = ctr.value == undefined || vid.disabled;
  var got_video = vid.videoWidth && vid.videoHeight;

  if (mode == 0)  // hide
  {
    ctr.disabled = false; if (no_action) return;
    ctr.value = 4; if (vid.paused && got_video) ctr.style.display = "none";
  }
  if (mode == 1)  // show
  {
    ctr.disabled = true; if (no_action) return;
    ctr.value = 0; ctr.style.display = "initial";
  }
  if (mode == 2)  // play/pause
  {
    vid.style.cursor = "default"; if (vid.paused) vid.play(); else vid.pause();
    if (no_action) { if (vid.value) popper (vid.value, 1); return; }
    if (!ctr.disabled && !got_video) ctr.style.display = "none";
  }
  if (mode == 3)  // is playing
  {
    mode = 10; if (vid.value) popper (vid.value, 3);
    // special case of video paused at video start
    if (!ctr.disabled && ctr.value <= 0) ctr.value = 1 - ctr.value;
  }
  if (mode == 4)  // is paused
  {
    mode = 10; if (vid.value) popper (vid.value, 4);
    // special case of video paused while doing countdown or countup
    if (!ctr.disabled && ctr.value) { ctr.style.display = "none"; ctr.value = 0; }
  }
  if (mode == 5)  // is seeking
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
  }
  if (mode == 6)  // is waiting
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }
  if (mode == 7)  // is stalled
  {
    sib [0].style.background = "linear-gradient(90deg, deeppink " + z + "%, hotpink 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }

  if (mode == 8)  // time update
  {
    if (t == vid.checked) return; vid.checked = t;
    var v = ctr.value, ts = Math.round (t), ds = Math.round (d);
    var th = Math.trunc (ts / 3600), dh = Math.trunc (ds / 3600); ts -= th * 3600; ds -= dh * 3600;
    var tm = Math.trunc (ts / 60), dm = Math.trunc (ds / 60); ts -= tm * 60; ds -= dm * 60;

    sib [0].style.background = "linear-gradient(90deg, skyblue " + z + "%, transparent 0%)";
    sib [2].value = th + ":" + (tm < 10 ? "0" : "") + tm + ":" + (ts < 10 ? "0" : "") + ts;
    sib [3].value = dh + ":" + (dm < 10 ? "0" : "") + dm + ":" + (ds < 10 ? "0" : "") + ds;

    if (v != undefined) v = v * 1; else
    {
      v = (vid.paused || ctr.disabled) ? -5 : 6;
      mode = 10; sib [0].classList.remove ("anim-bar");
    }
    if (v > 0 && !--v) { if (got_video) ctr.style.display = "none"; v = -5; }
    if (v < 0 && !++v) vid.style.cursor = "none"; ctr.value = v;
  }

  if (mode == 9)  // fullscreen change
  {
    var fullscreen = ctr.parentNode.disabled;
    sib [22].style.outline = fullscreen ? "none" : "1px solid orange";
    ctr.parentNode.disabled = fullscreen ? false : true; vid_resize (vid);
    if (!no_action) { ctr.value = -8; ctr.disabled = false; ctr.style.display = "none"; }
  }

  if (mode == 10)
  {
    if (!vid.paused)
      { sib [5].classList.add ("pause-lft"); sib [7].classList.add ("pause-rgt"); } else
      { sib [5].classList.remove ("pause-lft"); sib [7].classList.remove ("pause-rgt"); }
  }
}
////////////////////

var vid_timer = function (vid, ctr, time)  // catch wait/stall false flags
{
  if (vid.currentTime == time)
  {
    if (!ctr.disabled) ctr.value = 4; ctr.style.display = "initial";
  }
}

var vid_click = function (item, mode)
{
  var ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  if (mode == 1)
  {
    var t = vid.duration * item.value; if (t < 0.5) t = 0.5; vid.currentTime = t;
    if (!isNaN (t) && isFinite (t)) ctr.children [11].value = t.toFixed(2);
  }

  if (mode == 2) item.style.outline = (vid.muted = !vid.muted) ? "1px solid orange" : "none";

  if (mode == 3) { vid.muted = true; vid.volume = item.value; vid.muted = false; }

  if (mode == 4)
  {
    var v = ctr.children[11].value.split (":"), i, j = v.length; if (!j) return;
    var t = v[0][0]; if (t == "-") t = -1; else if (t == "+") t = 1; else t = 0;
    if (t) v[0] = v[0].substr(1);

    i = v[j-1] * 1; if (j > 1) i += v[j-2] * 60; if (j > 2) i += v[j-3] * 3600;
    if (t) { i *= t; i += vid.currentTime; }

    if (i < 0.5) i = 0.5; if (i > vid.duration) i = vid.duration; vid.currentTime = i;
  }

  if (mode == 5) vid_rotate (vid, ctr.children, 0);

  if (mode == 6) vid_rotate (vid, ctr.children, 1);

  if (mode == 7) if (!ctr.parentNode.disabled)
    vid.parentNode.requestFullscreen(); else vid.parentNode.parentNode.parentNode.exitFullscreen();
}
////////////////////

var vid_event = function (event)
{
  var item = event.target, node = item.nodeName, pop = item.parentNode;

  if (node == "VIDEO")  // show controls
  {
    var ctr = item.nextElementSibling.firstElementChild, h = item.step;
    item.style.cursor = "default"; if (ctr.value == undefined) return;
    h = h ? h * 1 : 0; h = (h & 2) ? item.clientWidth : item.clientHeight;
    if (ctr.value <= 0) ctr.value = -8; if (event.clientY > h - 50) vid_cntrl (item, 1);
  }
  if (node != "SPAN") return;

  var vid = pop.parentNode.previousElementSibling;
  var cls = item.classList; if (cls) cls = cls [0];

  if (cls) { if (cls.substr (0,5) == "play-") vid_cntrl (vid, 2); return; }

  var dir = (event.clientX < item.offsetLeft + item.offsetWidth / 2) ? -1 : 1;
  var sib = item.children [0], txt = sib.value, speed = txt * 1;

  if (speed)
  {
    speed += dir * 0.1; if (speed > 0.4) speed += dir * 0.1;
    if (speed > 2) speed += dir * 0.3; if (speed < 0.1) speed = 0.1; if (speed > 5) speed = 5;
    sib.value = speed.toFixed(1); vid.playbackRate = speed; return;
  }

  if (txt == "B") { vid_filter (vid, dir, 0); return; }
  if (txt == "S") { vid_filter (vid, dir, 1); return; }

  if (txt == "5s" ) dir *= 5;
  if (txt == "15s") dir *= 15;
  if (txt == "1m" ) dir *= 60;
  if (txt == "2m" ) dir *= 120;
  if (txt == "5m" ) dir *= 300;
  if (txt == "10m") dir *= 600;

  if ((dir += vid.currentTime) < 0.5) dir = 0.5;
  vid.currentTime = dir > vid.duration ? vid.duration : dir;
}
////////////////////

var vid_resize = function (vid)
{
  var i, j = 0, k, h, w = vid.step; w = w ? w * 1 : 0;
  h = (w & 2) ? vid.clientWidth : vid.clientHeight;
  w = (w & 2) ? vid.clientHeight : vid.clientWidth;
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;

  h = (h / screen.height) * 10; h = ctr.parentNode.disabled ? 11 : Math.round (h) - 1;
  ctr.style.paddingBottom = h > 5 ? h + "px" : ctr.style.paddingTop;
  sib [0].style.minWidth = (w > 260 && w < 380 ? w - 192 : 68) + "px";
  sib [1].style.display = w < 380 ? "none" : "inline-block";

  var sizes = [0,0,0,0,0,0,0,0,0,0,38,87,36,42,36,36,36,42,31,31,0,0,0];
  var scale = [0,0,0,0,0,0,0,0,0,0, 6, 6, 8, 7, 5, 2, 4, 1, 3, 3,0,0,0];
  var block = [606,0,0,0,0,0,0,0,0];

  for (i = 0; i < sib.length; i++) if (k = scale [i]) block [k] += sizes [i] + 4;
  if ((w -= block [0]) < 80) for (j = 1; j < block.length; j++) if ((w += block [j]) >= 80) break;
  if (j > 5) for (i = 5; i > 3; i--) if (w - block [i] > 80) { w -= block [i]; block [i] = 0; }
  sib [9].style.width = w + "px";

  for (i = 0; i < sib.length; i++) if (k = scale [i])
    sib [i].style.display = (!block [k] || j < k) ? "inline-block" : "none";
}
////////////////////

var vid_rotate = function (vid, sib, mode)
{
  var x = vid.step; if (!x || x < 0) x = 0;
  if (mode == 0) x ^= 1; if (mode > 0) x += 2;
  vid.step = x = x & 7; var r = (x >> 1) * 90;

  vid.style.transform = "rotate(" + r + "deg)" + (x & 1 ? " scaleX(-1)" : "");

  sib [20].style.outline = x & 1 ? "1px solid orange" : "none";
  sib [21].style.outline = x > 1 ? "1px solid orange" : "none";

  if (x & 2)
  {
    vid.style.top = "calc(50vh - 50vw)";
    vid.style.left = "calc(50vw - 50vh)";
    vid.style.width = "100vh";
    vid.style.height = "100vw";
  }
  else
  {
    vid.style.top = vid.style.left = "0";
    vid.style.width = vid.style.height = "100%";
  }
}
////////////////////

var vid_filter = function (vid, dir, mode)
{
  var n, s, con, lvl, sat, filter = vid.style.filter;

  if (!filter) lvl = sat = 1; else
  {
    if ((n = filter.indexOf ("brightness")) < 0) lvl = 1; else
      { s = filter.substr (n + 11); s = s.substr (0, s.indexOf (")")); lvl = s * 1; }
    if ((n = filter.indexOf ("saturate")) < 0) sat = 1; else
      { s = filter.substr (n + 9); s = s.substr (0, s.indexOf (")")); sat = s * 1; }
  }
  sat = sat / (3 - lvl) * 2; if (mode) sat += dir * 0.1; else lvl += dir * 0.05;
  sat = sat * (3 - lvl) / 2; con = (2 - lvl * (3 - lvl)) * (2.5 - sat) + 1;

  lvl = lvl.toFixed (3); con = con.toFixed (3); sat = sat.toFixed (3);
  vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
}
////////////////////

</script>

</html> 
