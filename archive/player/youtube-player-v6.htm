<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>Youtube Player</title>

<style type="text/css">

.widevid {
  position: relative;
  width: 72vw;
  padding-bottom: 40.5vw;
  overflow: hidden;
  border: 2px solid red;
  background-color: black;
}

.widevid img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: auto;
  margin: auto;
  border: none;
}

.televid {
  position: relative;
  width: 60vw;
  padding-bottom: 45vw;
  overflow: hidden;
  border: 2px solid red;
  background-color: black;
}

.televid img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: auto;
  margin: auto;
  border: none;
}

.msgbox {
  position: absolute;
  top: 30%;
  left: 40%;
  right: 40%;
  text-align: center;
  border-radius: 10px;
  font-style: italic;
  background-color: slateblue;
  color: lavender;
}

iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  margin: auto;
  border: none;
  background-color: transparent;
}

select {
  font-size: 13px;
  background-color: cornsilk;
  color: brown;
}

select.other {
  background-color: papayawhip;
  color: crimson;
}

select.stack {
  width: 100%;
  max-width: 97%;
  margin: 0 0 0 3px;
  background-color: papayawhip;
  color: brown;
}

input.idspec {
  width: 100%;
  max-width: 97%;
  padding: 0 3px 0 3px;
  background-color: cornsilk;
  color: sienna;
}

input.urlspec {
  width: 75vw;
  padding: 0 3px 0 3px;
  background-color: cornsilk;
  color: steelblue;
}

table {
  border: 3px solid green;
}

td {
  text-align: left;
  vertical-align: top;
  padding: 0 6px 0 6px;
  color: saddlebrown;
  font-size: 14px;
}

td.vidbox {
  padding: 0;
  text-align: initial;
  vertical-align: middle;
}

td.textbox {
  text-align: center;
  padding: 0px 12px 0 10px;
  width: 22vw;
}

button {
  width: auto;
  height: 100%;
  font-size: 12px;
  background-color: powderblue;
}

button.is_off {
  background-color: pink;
  border-style: outset;
}

button.is_on {
  background-color: lightgreen;
  border-style: inset;
}

button.copy {
  font-size: 18px;
  color: darkblue;
  background-color: pink;
}

ul {
  padding: 1em;
  padding-top: 0;
  list-style: square;
}

b_ {color: blue;}
r_ {color: crimson;}
g_ {color: seagreen;}
w_ {color: saddlebrown;}

</style></head><body style="color: maroon; background-color: moccasin">

<h1><g_>Youtube Player v6</g_></h1>

Refer to my comments in the previous versions of the Youtube Player.
<p>
New additions: DailyMotion, Facebook, TEDTalks and National Film Board of Canada. The NFB is region locked.
It may or may not be the case that the Youtube Player breaks the region locking.
<p>
Note: Twitter support removed for being too unreliable. Should be available next version.
<p>
Note: CBS has been updated because some changes were made to the page formatting.
<p>
Note: Global now requires a proxy for ID lookup. Counterthink has changed from "https" to "http".
<p>
Note: CNBC updated because they changed the platform provider. Only the DIG option is valid now. On the plus side,
a proxy is no longer needed.
<p>
Note: Fox has been updated to include "foxbusiness". The way it works is that YP checks "foxnews" first to see if the video
ID is valid. If not, then YP checks "foxbusiness". There does not seem to be an issue with this method but time will tell.
<p>
Note: The DIG option for Brighteon now serves two purposes. The first purpose is to DIG through Counterthink pages to
find the video on Brighteon. The second purpose has to do with the fact
that Brighteon is a Brightcove client. I have no idea if the two are related in any way other than this. There are two
other sites which are also Brightcove clients and thus employ a similar backend: TVO and Al Jazeera (Fox is Brightcove
also but does not employ the same backend). Additionally, there are two sites in New Zealand which are
Brightcove clients and both employ the exact same linking style in their pages. This is, I guess, a standard interface
recommended by Brightcove. You can get the video links on these sites by using the Brighteon DIG option. There may be many
others that are accessible in this way as well but I don't have a list. Anyway, these two sites are:
"https://www.stuff.co.nz/" and "https://www.nzherald.co.nz/".
<p>
Note: Further on Brighteon, there are some videos which have both m3u8 and mp4
formats. As if Brighteon is not already confusing enough with the separate audio and video tracks for m3u8. Anyway, if
mp4 is available, Youtube Player will pull that out instead of m3u8. So don't be surprised when you find yourself jumping
back and forth between the two formats. Hopefully, when Brighteon 2.0 goes online in June, mp4 will be available throughout.
<p>
Note: I only just now realized that Youtube Player is bypassing a lockout on full episodes on Fox. There is some
frontline Javascript which requests a login via your cable or network provider. Other networks do the same thing. Dunno
why they would want to limit access in
this way. They're news networks not entertainment centres. Whatever. The lockout on Fox is not enforced at the backend so
it does not impede YP at all. There may be ways to bypass lockouts on other sites but I haven't been able to find them.
<p>
Youtube Player bypasses a lot of different attempts to block or obstruct access to videos. Ads are bypassed.
Weak lockouts like Fox uses are bypassed. Region locking is bypassed on PBS (I have not noticed
any other instances). And, of course, mounds of Javascript and extraneous file loading can be bypassed if you avoid
visiting the actual page that the video resides on (sometimes you need to use DIG for this). If you can disable Javascript
selectively then do so. Firefox has NoScript for this. In most cases, only the top domain needs to be enabled and perhaps
one or two subdomains. Without Javascript enabled, the external scripts can't load ads or clutter the page with promotional
material. The result is significantly shorter loading times plus many annoyances removed.
<p>
<b>Comments retained from version 5:</b>
<p>
Resolution selection from the format box is now supported for m3u8. This can be disabled by unchecking
"Format Lookup". In that case, the video player will auto-select the appropriate resolution. Supposedly. I have not seen
any players that do a good job of this. Not supported for Brighteon due to the fact that the audio is separate from the
video. Not supported for mpd due to the file format. In both of these cases, the Youtube Player would have to
intercede between the server and the video player. Might be a project for the (distant?) future.
<p>
The button called DLoad is for m3u8 sites (mpd not supported but is planned for). Both the "No Play" and
the "Format Lookup" options must be checked. The m3u8 format (similar to m3u used for mp3) consists
of multiple segments, each about 10 seconds long. In order to convert to another format like mp4, each of these segments
must be downloaded. The DLoad button will open a new window with the list of segments. You can download them individually
by clicking each link or copy the source (control-U) and pass the list to a download tool. Some tools won't accept this
but some will. You can change the list format by changing the value of the variable called "plain_text" inside
the Youtube Player code. This is still experimental. I might (or might not) find a better way. Not supported for Brighteon.
<p>
EDIT: DLoad is now somewhat supported for Brighteon. The master link to the audio m3u8 is included but not the segments.
<p>
There are three symbols used to indicate the options available for a particular site. [#]&nbsp;means no DIG option because the
video ID is always exposed. [?]&nbsp;means that video ID numbers are not available (you have to DIG). [+]&nbsp;means that both
ID numbers and the DIG option are supported.
<p>
Here is a rundown of each site, the available video formats and the site URL (link will open a new tab or window):
<p>
<table>
<td>Invidious		</td><td>mp4/webm	</td><td>*</td><td>[#] Proxy (Lookup)</td>
<td><a target=_blank href="https://invidio.us">invidio.us</a></td>
<td><a target=_blank href="https://www.youtube.com">www.youtube.com</a></td></tr>

<tr><td>BitChute	</td><td>mp4		</td><td>480p</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.bitchute.com">www.bitchute.com</a></td></tr>

<tr><td>Vimeo		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://vimeo.com">vimeo.com</a></td></tr>

<tr><td>InfoWars	</td><td>mp4		</td><td>720p</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.infowars.com">www.infowars.com</a></td></tr>

<tr><td>Brighteon	</td><td>m3u8/mp4	</td><td>?/*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.brighteon.com">www.brighteon.com</a></td>
<td><a target=_blank href="http://counterthink.com">counterthink.com</a></td></tr>

<tr><td>Nat. Film Board	</td><td>m3u8		</td><td>*</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.nfb.ca/">www.nfb.ca</a></td></tr>

<tr><td>DailyMotion	</td><td>m3u8		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.dailymotion.com/">www.dailymotion.com</a></td></tr>

<tr><td>TEDTalks	</td><td>mp4		</td><td>288p</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.ted.com/">www.ted.com</a></td></tr>

<!--
<tr><td>Twitter		</td><td>mp4		</td><td>varies</td><td>[+] Proxy</td>
<td><a target=_blank href="https://threadreaderapp.com">threadreaderapp.com</a></td>
<td><a target=_blank href="https://twitter.com">twitter.com</a></td></tr>
//-->

<tr><td>Facebook	</td><td>mp4		</td><td>varies</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.facebook.com">www.facebook.com</a></td></tr>

<tr><td>Fox		</td><td>mp4		</td><td>432p</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.foxnews.com">www.foxnews.com</a></td>
<td><a target=_blank href="https://www.foxbusiness.com">www.foxbusiness.com</a></td></tr>

<tr><td>ABC		</td><td>mp4		</td><td>360p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://abcnews.go.com">abcnews.go.com</a></td></tr>

<tr><td>CBS		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.cbsnews.com">www.cbsnews.com</a></td></tr>

<tr><td>CNBC		</td><td>m3u8		</td><td>*</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cnbc.com">www.cnbc.com</a></td></tr>

<tr><td>CNN		</td><td>m3u8		</td><td>*</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cnn.com">www.cnn.com</a></td></tr>

<tr><td>C-SPAN		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.c-span.org">www.c-span.org</a></td></tr>

<tr><td>MS/NBC		</td><td>m3u8		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.msnbc.com">www.msnbc.com</a></td>
<td><a target=_blank href="https://www.nbcnews.com">www.nbcnews.com</a></td></tr>

<tr><td>PBS		</td><td>m3u8		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.pbs.org">www.pbs.org</a></td></tr>

<tr><td>CBC		</td><td>m3u8		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cbc.ca">www.cbc.ca</a></td></tr>

<tr><td>CTV		</td><td>mpd		</td><td>?</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.ctvnews.ca">www.ctvnews.ca</a></td></tr>

<tr><td>Global		</td><td>mp4		</td><td>540p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://globalnews.ca">globalnews.ca</a></td></tr>

<tr><td>TVO		</td><td>mp4		</td><td>360p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.tvo.org">www.tvo.org</a></td></tr>

<tr><td>BBC		</td><td>mpd		</td><td>?</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.bbc.com">www.bbc.com</a></td></tr>

<tr><td>Al Jazeera	</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.aljazeera.com">www.aljazeera.com</a></td></tr>

</table>
<p>

? = auto select (video player chooses)<br>
* = user selectable (via format box)<br>
mpd = mpeg-dash

<p>
<b>Consumer alert</b>
<p>
The main obstacle to using the Youtube Player successfully is the page format employed by some sites. In particular, links
may be hidden behind a Javascript tag. You will know this is the case when you see "javascript:void()" or something similar
when you hover the mouse. You will need to find an alternate path through the site to get to the links. Also, some sites
may embed a Youtube video rather than their own vid format. Since the Youtube Player (despite the name) is not
actually searching for Youtube videos on these sites, such links will not get sniffed out. Other sources of errors are
region locking, deleted videos, time-limited videos, playlists and a plethora of other situations which confuse even
humans let alone a dumb piece of software. Aside from these issues, the Youtube Player is amazingly successful at rooting
out video links.
<p>
<b>New compatibility feature</b>
<p>
These options have been implemented: Raw, Wrapper and Sandbox. First, a word about sandboxing:
<p>
This is a feature that was used in "movie-player.htm" to prevent embedded OpenLoad or Streamango videos from
popping up ads. The feature is present in Youtube Player but was not made available for pop-up windows or browser tabs.
The problem with sandboxing is that web sites are not designed to run in a sandbox so many features will not work,
in particular any feature that involves opening a new tab. Also, and this is important for YP, extensions for playing
m3u8 or mpd videos may not work with a sandbox. However, this is a limitation of the extension itself. Sandboxing is not
useful for viewing videos anyway but it is a potentially useful tool for hacking web sites. The embedded viewers
are sandboxed by default since they are implemented with an "iframe" tag.
<p>
There are compatibility issues with different web browsers which may interfere with your viewing experience. For all tested
browsers (but not Firefox on WinXP), videos will not scale in a window that is larger than the video. The reason
this happens is because the video URL is being inserted directly into the host container. It is up to the web browser to
make the video work correctly. Unfortunately, browsers do not cooperate fully. However, if the video URL is inserted into
a proper "video" tag (or wrapper) then the video will scale correctly. Use the Wrapper option for this. For a sandbox, use
the Sandbox option (only for windows since the embedded viewers are already sandboxed).
<p>
Note that Edge works differently from the other browsers. Videos will sometimes scale correctly without the video wrapper
though it may take a few seconds for that to happen. Support for m3u8 and mpd is built in. Good point for Edge but the
browser has some issues. It needs to mature for a while. In particular, videos have a strong tendency to pixelate badly.
Google and Brave also have issues with pixelation but to a much lesser extent. Firefox has no such issue. Opera, Maxthon
and Vivaldi were briefly tested. They work but they have some issues with video scaling and pop-up windows.
<p>
If the "Allow Multiple" option is not checked, windows are supposed to get re-used or closed as needed. However, I
have found two cases where the web browser incorrectly blocks the window close function. Edge does not allow a window
opened in Raw mode to be closed. Firefox (on Win10 but not on WinXP) blocks if the window was opened with an HLS
(m3u8/mpd) playback extension.
<p>
Always keep in mind that browsers contain various "security" features that may interfere with Youtube Player. Consider
that YP is able to extract video links from over 20 different sites. Your browser has no idea what is trustworthy and what
is not (even though the content is just a video). You may need to battle with
the site blockers in the browser itself and in whatever add-ons or extensions you may have. Don't blame YP. Your browser
is just trying to "protect" you. Normally, a notice of some sort should appear to warn you about blockage. Sometimes not.
If a video does not play, check the settings in your web browser or pop-up blocker. 'Nuff said. It isn't too bad overall.
<p>
Another new feature: you can pick your proxy from this drop-down list instead of going into the code. The only one which
has been consistently reliable is the default. I have had limited success with the others. Maybe depends on your geographic
location?
<p>
<g_>Pick a Proxy:</g_>&nbsp;
<select id="proxy" class=source size=1>
  <option value="https://cors.io/?" selected>cors.io
  <option value="https://bypasscors.herokuapp.com/api/?url=">bypasscors.herokuapp.com
  <option value="https://cors-anywhere.herokuapp.com/">cors-anywhere.herokuapp.com
  <option value="http://www.whateverorigin.org/get?url=">www.whateverorigin.org
  <option value="https://yacdn.org/serve/">yacdn.org
  <option value="">None
</select>
<p>
I have also picked out an extension which gets rid of the proxy problem altogether. It is available for Firefox and
Chrome-based browsers. I have not found any similar extension for Edge. This extension is just an on/off switch with none
of the confusing options that other extensions have. Is there an issue with just leaving this active always? Youtube
(not Invidious) will block you but that is all I know so far. As for security, you can choose to be
paranoid if you want but I don't see any real cause for concern. If you use this, choose "None" in the above drop-down
list to disable the proxy. Note that DailyMotion does NOT work without this. Also note that the region locking on PBS
can be bypassed ONLY with a proxy. All other sites work fine either way.
<p>
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a>
<p>
Here is an extension for playback of m3u8 and mpd videos. Only Edge has built-in support for these formats. All other
browsers need this extension. It works well but the user interface is a bit flaky. This will NOT work in an embedded
viewer. The video MUST be started in a window with Raw mode.
<p>
<g_>Native MPEG-Dash + HLS Playback</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/native-mpeg-dash-hls-playback/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/native-mpeg-dash-%20-hls-pl/cjfbmleiaobegagekpmlhmaadepdeedn"
  target=_blank>Chrome-based</a>
<p>
For m3u8 playback only: <g_>Native HLS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/native_hls_playback/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof"
  target=_blank>Chrome-based</a>

<div style="width: 90vw; height: 20vw"></div>

<!--
//////////////////////////
////// ENTERTAINMENT /////
//////////////////////////
//-->

<h3><r_>Info + Entertainment</r_></h3>
<p>
<table><tr><td class=textbox>

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadid(5,0)">Play ID</button>
<button onclick="javascript:loadid(5,2)">Clear</button>
<p>
<input type=text id="id5" maxlength=256 class=idspec onfocus="javascript:hidelist(5)"
  onclick="javascript:input_onclick('id5')" onblur="javascript:input_onblur('id5')">
<p>
<select id="stk5" size=1 class=stack><option value=''>Select a video stack</select>
<p>
<select id="src5" size=1 class=other>
  <option value= 0 >YouTube (Invidious)
  <option value= 1 ># mp4 - BitChute
  <option value= 2 ># mp4 - Vimeo
  <option value= 3 >+ mp4 - InfoWars
  <option value= 4 >+ m3u - Brighteon
  <option value= 7 >+ m3u - NatFilmBrd
  <option value= 5 ># m3u - DailyMotion
  <option value= 6 >? mp4 - TEDTalks
  <option value= 12>? mp4 - Facebook
  <option value= 10>? -------- URL Test
</select>
<p>
<input type=checkbox id="mov5f" checked> Format Lookup&nbsp;
<input type=checkbox id="mov5p" checked> Use Proxy
<p>
<select id="fmt5" size=6>
  <option value=18>mp4 - [18] 360p *
  <option value=19>mp4 - [19] 480p *
  <option value=22>mp4 - [22] 720p *
  <option value=43>webm  [43] 360p *
  <option value=44>webm  [44] 480p *
  <option value=45>webm  [45] 720p *
</select>
<p>
<select id="win5" size=1>
  <option value="320:180">[16:9] 320 x 180
  <option value="480:270">[16:9] 480 x 270
  <option value="640:360">[16:9] 640 x 360
  <option value="960:540">[16:9] 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">[4:3] 240 x 180
  <option value="360:270">[4:3] 360 x 270
  <option value="480:360">[4:3] 480 x 360
  <option value="720:540">[4:3] 720 x 540
  <option value="960:720">[4:3] 960 x 720
</select>
<p>
<button id="btn5a" class="is_off" onclick="javascript:buttonpress(5,0)">New Window</button>
<button id="btn5b" class="is_off" onclick="javascript:buttonpress(5,1)">Popup Window</button>
<p>
<input type=checkbox id="mov5m"> Allow Multiple&nbsp;
<input type=checkbox id="mov5n"> No Play
<p></p>
<input type=radio id="mov5a" name="chk5" checked> Raw
<input type=radio id="mov5b" name="chk5"> Wrapper
<input type=radio id="mov5c" name="chk5"> Sandbox

</td><td class=vidbox>

<!-- VIDEO -->
<div class=widevid><h2 id="vid5" class=msgbox>No Video</h2>

<iframe id="mov5" name="mov5" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadid(5,1)">Play URL</button>
<button onclick="javascript:urlcopy(5)">Copy</button>
<button onclick="javascript:digid(5)"><b_>DIG</b_></button>&nbsp;

<input type=text id="line5" maxlength=1024 class=urlspec
  onclick="javascript:input_onclick('line5')" onblur="javascript:input_onblur('line5')">

<p style="text-align:center">
<button class=copy id="stk5-1" onclick="javascript:copylist(5,1)">Stack 1</button>
<button class=copy id="stk5-2" onclick="javascript:copylist(5,2)">Stack 2</button>
<button class=copy id="stk5-3" onclick="javascript:copylist(5,3)">Stack 3</button>
&nbsp;
<button class=copy id="stk5-4" onclick="javascript:copylist(5,4)">BitChute</button>
<button class=copy id="stk5-5" onclick="javascript:copylist(5,5)">Vimeo</button>
<button class=copy id="stk5-6" onclick="javascript:copylist(5,6)">InfoWars</button>
<button class=copy id="stk5-7" onclick="javascript:copylist(5,7)">Misc</button>

<div style="width: 90vw; height: 15vw"></div>

<!--
//////////////////////////////
///// NEWS & PROPAGANDA //////
//////////////////////////////
//-->

<h3><r_>News & Propaganda</r_></h3>
<p>
<table><tr><td class=textbox>

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadnews(6,0)">Play ID</button>
<button onclick="javascript:loadnews(6,2)">Clear</button>
<p>
<input type=text id="id6" maxlength=256 class=idspec onfocus="javascript:hidelist(6)"
  onclick="javascript:input_onclick('id6')" onblur="javascript:input_onblur('id6')">
<p>
<select id="stk6" size=1 class=stack><option value=''>Select a video stack</select>
<p>
<select id="src6" size=1 class=other>
  <option value= 0 >YouTube (Invidious)
  <option value= 1 >+ mp4 - Fox
  <option value= 2 >+ mp4 - ABC
  <option value= 3 >? m3u - CBS
  <option value= 4 >? m3u - CNBC
  <option value= 5 >? m3u - CNN
  <option value= 6 >? m3u - C-SPAN
  <option value= 7 ># m3u - MS/NBC
  <option value= 8 >+ m3u - PBS
  <option value= 11>+ m3u - CBC
  <option value= 12>+ mpd - CTV
  <option value= 13>+ mp4 - Global
  <option value= 14>+ mp4 - TVO
  <option value= 21>+ mpd - BBC
  <option value= 22>+ mp4 - Aljazeera
</select>
<p>
<input type=checkbox id="mov6f" checked> Format Lookup&nbsp;
<input type=checkbox id="mov6p" checked> Use Proxy
<p>
<select id="fmt6" size=6>
  <option value=18>mp4 - [18] 360p *
  <option value=19>mp4 - [19] 480p *
  <option value=22>mp4 - [22] 720p *
  <option value=43>webm  [43] 360p *
  <option value=44>webm  [44] 480p *
  <option value=45>webm  [45] 720p *
</select>
<p>
<select id="win6" size=1>
  <option value="320:180">[16:9] 320 x 180
  <option value="480:270">[16:9] 480 x 270
  <option value="640:360">[16:9] 640 x 360
  <option value="960:540">[16:9] 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">[4:3] 240 x 180
  <option value="360:270">[4:3] 360 x 270
  <option value="480:360">[4:3] 480 x 360
  <option value="720:540">[4:3] 720 x 540
  <option value="960:720">[4:3] 960 x 720
</select>
<p>
<button id="btn6a" class="is_off" onclick="javascript:buttonpress(6,0)">New Window</button>
<button id="btn6b" class="is_off" onclick="javascript:buttonpress(6,1)">Popup Window</button>
<p>
<input type=checkbox id="mov6m"> Allow Multiple&nbsp;
<input type=checkbox id="mov6n"> No Play
<p></p>
<input type=radio id="mov6a" name="chk6" checked> Raw
<input type=radio id="mov6b" name="chk6"> Wrapper
<input type=radio id="mov6c" name="chk6"> Sandbox

</td><td class=vidbox>

<!-- VIDEO -->
<div class=widevid><h2 id="vid6" class=msgbox>No Video</h2>

<iframe id="mov6" name="mov6" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadnews(6,1)">Play URL</button>
<button onclick="javascript:urlcopy(6)">Copy</button>
<button onclick="javascript:dignews(6)"><b_>DIG</b_></button>&nbsp;

<input type=text id="line6" maxlength=1024 class=urlspec
  onclick="javascript:input_onclick('line6')" onblur="javascript:input_onblur('line6')">

<p style="text-align:center">
<button class=copy id="stk6-1" onclick="javascript:copylist(6,-1)">Stack 1</button>
<button class=copy id="stk6-2" onclick="javascript:copylist(6,-2)">Stack 2</button>
<button class=copy id="stk6-3" onclick="javascript:copylist(6,-3)">Stack 3</button>
&nbsp;
<button class=copy id="stk6-4" onclick="javascript:copylist(6,-4)">Fox News</button>

<div style="width: 90vw; height: 30vw"></div>

</body>

<script>

/////////////////////////
///// User Settings /////
/////////////////////////

var list_1 = [
    ":NOZKLtIIUZE" , "Hitler Rant"
  , ":m_MaJDK3VNE" , "Herding Cats"
  , ":hTa1t_9HfFQ" , "Mike Hammer"
  , ":uaPKEbVypRQ" , "Typing Lesson"
  , ":0fDOdzY18XE" , "V - The Miniseries"
  , ":kJAsn_vJyY4" , "Starship Enterprise"
];

var list_2 = [
    ":We-HMZDSWFU" , "Me and You and a Dog Named Boo"
  , ":8Pa9x9fZBtY" , "Sultans of Swing"
  , ":8sPWIrF0oSY" , "Jack Benny meets Perry Mason"
  , ":CGq8Ee2gOe4" , "DooM at QuakeCon"
  , ":6Ath-3JGk8M" , "Flashdance"
];

var list_3 = [
    ":4JIOtUTMGuM" , "Perry Mason in colour"
  , ":onJspmvJr0E" , "Flashdance Love Theme"
  , ":FnV0LqHd3h8" , "Make America Great Again"
  , ":5iV_hB08Uns" , "Boston Dynamics Robot"
];

var list_4 = [
    "b:TOtFnGVssVJO" , "Farm goats"
  , "b:A7jZJfaEJK2p" , "Malice in the Palace"
];

var list_5 = [
    "v:129463420" , "Miniatur Wunderland"
  , "v:166403522" , "Some Kind of Quest"
  , "v:31883614"  , "Star Trek: Aurora"
];

var list_6 = [
    "i:5ca2a1c94b025c001747b176" , "War Room with Owen Shroyer"
  , "i:5ca3adb6be0c561e93cca99d" , "The David Knight Show"
  , "i:5ca26237c88e7100170702b1" , "Kaitlin Bennett"
];

var list_7 = [
    "e:5813257309001" , "Star Trek: Kitumba"
];

var list_8 = [
];

var list_9 = [
];

var news_1 = [
];

var news_2 = [
];

var news_3 = [
];

var news_4 = [
    "fox:6019082804001" , "Sean Hannity"
  , "fox:5986227428001" , "Tucker Carlson"
];

var news_5= [
];

var news_6 = [
];

var news_7 = [
];

var news_8 = [
];

var news_9 = [
];

/////////////////////////////
///// End User Settings /////
/////////////////////////////

var head = "<!DOCTYPE html><html><head><meta charset='utf-8'>" +
           "<title>Downloader</title></head><body><h2>Downloader</h2>";

var tail = "</body></html>", download_doc = head + tail;

var vidwin = null, last_h = last_w = last_raw = last_time = busy = 0, error = "", cors_bypass = "";

var copylist = function (frame, num)
{
  var list, box, i, j;

  if (num > 0)
  {
    if (num == 1) list = list_1; else
    if (num == 2) list = list_2; else
    if (num == 3) list = list_3; else
    if (num == 4) list = list_4; else
    if (num == 5) list = list_5; else
    if (num == 6) list = list_6; else
    if (num == 7) list = list_7; else
    if (num == 8) list = list_8; else
    if (num == 9) list = list_9; else return;
  } else {
    num = -num;
    if (num == 1) list = news_1; else
    if (num == 2) list = news_2; else
    if (num == 3) list = news_3; else
    if (num == 4) list = news_4; else
    if (num == 5) list = news_5; else
    if (num == 6) list = news_6; else
    if (num == 7) list = news_7; else
    if (num == 8) list = news_8; else
    if (num == 9) list = news_9; else return;
  }

  box = document.getElementById ("stk" + frame);

  for (i = box.length - 1; i > 0; i--) box.remove (i);

  for (i = 0, j = 1; i < list.length; i += 2, j++)
  {
    box.options[j] = new Option ("[" + (j < 10 ? "0" : "") + j + "] " + list[i+1], list[i]);
  }

  list = document.getElementById ("stk" + frame + "-" + num).innerText;
  box.options[0].innerText = "Select a video (" + list + ")";
  box.selectedIndex = 0;
}
////////////////////

var hidelist = function (frame)
{
  document.getElementById ("stk" + frame).selectedIndex = 0;
}
////////////////////

var buttonpress = function (frame, num)
{
  var id1, id2, doc1, doc2, chk, txt;

  id1 = "btn" + frame + "a"; id2 = "btn" + frame + "b";

  doc1 = document.getElementById (num ? id2 : id1);
  doc2 = document.getElementById (num ? id1 : id2);

  chk = doc1.checked; doc1.checked = !chk;
  doc1.className = (chk ? "is_off" : "is_on");
  doc2.checked = false; doc2.className = "is_off";
}
////////////////////

var urlcopy = function (frame)
{
  var doc = document.getElementById ("line" + frame);
  doc.select(); document.execCommand ("copy");
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart == doc.selectionEnd) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var clear_video = function (frame)
{
  document.getElementById ("mov" + frame).src = "about:blank";
// this is not working with Edge (see loadwindow)
// document.getElementById ("mov" + frame).removeAttribute ("srcdoc");
}
////////////////////

//////////////////////////
///// ENTERTAINMENT /////
////////////////////////

var loadid = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  clear_video (frame); if (mode == 2) return;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    if (url != "") loadwindow (url, frame, "");
    return;
  }

  if (mode != 0) return;

  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  url = document.getElementById ("stk" + frame).value;
  if (!url) url = document.getElementById ("id" + frame).value;

  src = document.getElementById ("src" + frame).value;
  sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "b") src = 1;
      if (doc == "v") src = 2;
      if (doc == "i") src = 3;
      if (doc == "e") src = 4;
      if (doc == "d") src = 5;
      if (doc == "n") src = 7;

      doc = document.getElementById ("src" + frame);
      if (doc.value != src) for (mode = 0; mode < doc.length; mode++)
        if (doc.options [mode].value == src) { doc.selectedIndex = mode; break; }
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url,-12))) req_bitchute (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -9))) req_vimeo (url, frame, fmt); else
  if (src == 3  && (url = getid (url, 24))) req_infowars (url, frame, fmt); else
  if (src == 4  && (url = getid (url, 13))) req_brighteon (url, frame, fmt); else
  if (src == 5  && (url = getid (url,  7))) req_dailymotion (url, frame, fmt); else
  if (src == 7  && (url = getid (url, 10))) req_natfilmbrd (url, frame, fmt); else
  if (src == 11 && (url = getid (url, 19))) req_twitter (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt);

  else document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

var getid = function (url, len)
{
  var tst = url.substr (-1);

  if (tst == "/") url = url.substr (0, url.length - 1);

  if (len < 0)
  {
    len = -len;
    if (url.length < len - 2) return "";
    if (url.length == len - 2) return url;
    if (url.length == len - 1) return url;
    if (url.length == len) return url;

    url = url.substr (url.length - len, len);
    if ((len = url.search ("/")) > 1) url = "";
    if (len < 0 && (len = url.search ("=")) > 1) url = "";
    if (len < 0 && (len = url.search ("-")) > 1) url = "";

    if (len >= 0) url = url.substr (len + 1);
    return url;
  }

  if (url.length < len) return "";
  if (url.length == len) return url;

  url = url.substr (url.length - len, len);
  if (url.search ("/") >= 0) url = "";
  if (url.search ("=") >= 0) url = "";
  return url;
}
////////////////////

var is_busy = function (frame)
{
  if (busy) return 1;
  document.getElementById ("vid" + frame).innerHTML = "Busy";
  busy = 1; error = ""; return 0;
}
////////////////////

var no_fail = function (frame)
{
  var BUSY = busy; busy = 0;
  if (!BUSY) document.getElementById ("vid" + frame).innerHTML = "Error";
  if (!BUSY && error != "") document.getElementById ("id" + frame).value = "err: " + error;
  return (BUSY);
}
////////////////////

const request = async (id, frame, fmt) =>
{
  var f = new Array (8);

  var tag = "invidious"; if (is_busy (frame)) return;
  var chk = document.getElementById ("mov" + frame + "f").checked;
  var url = cors_bypass + "https://invidio.us/embed/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (chk)
  {
    var response = await fetch (url);
    var textData = await response.text();

    f[0] = textData.search ('&itag=18"') + 1;
    f[1] = textData.search ('&itag=19"') + 1;
    f[2] = textData.search ('&itag=22"') + 1;
    f[3] = textData.search ('&itag=37"') + 1;
    f[4] = textData.search ('&itag=43"') + 1;
    f[5] = textData.search ('&itag=44"') + 1;
    f[6] = textData.search ('&itag=45"') + 1;
    f[7] = textData.search ('&itag=46"') + 1;
  }

} catch (err) { console.log (err); chk = 0; }

  if (!chk) { f[0] = f[1] = f[2] = f[3] = f[4] = f[5] = f[6] = f[7] = -1; }

  chk = getformat (f, fmt); fixformat (f, frame); if (chk) fmt = chk;

  url = "https://invidio.us/latest_version?id=" + id + "&itag=" + fmt;

  no_fail (frame); loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_bitchute = async (id, frame, fmt) =>
{
  var tag = "bitchute"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://www.bitchute.com/video/" + id + "/";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  var response = await fetch (url);
  var textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vimeo = async (id, frame, fmt) =>
{
  var i, j, k, f = new Array (8), r = new Array (4);

  var tag = "vimeo"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://player.vimeo.com/video/" + id + "/config";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  var response = await fetch (url);
  var jsonData = await response.json();

  if (jsonData.request == undefined)   // privacy lock, go long way around
  {
    response = await fetch (cors_bypass + "https://vimeo.com/" + id);
    jsonData = await response.text();

    var s = '"config_url":"';
    var n = jsonData.search (s); if (n < 0) throw ("!!!");

    url = jsonData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    url = url.replace (/\\/g, "");

    response = await fetch (cors_bypass + url);
    jsonData = await response.json();
  }

  url = jsonData.request.files.progressive;
  
  f[0] = f[1] = f[2] = f[3] = f[4] = f[5] = f[6] = f[7] = r[0] = r[1] = r[2] = r[3] = 0;

  for (i = 0; i < url.length; i++)
  {
    k = url[i].quality; k = k.substr (0, k.search ("p"));

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame); if (!fmt) throw ("!!!");

  if (fmt == 18) j = 0;
  if (fmt == 19) j = 1;
  if (fmt == 22) j = 2;

  if ((i = f[j] - 1) < 0) throw ("!!!"); fmt = url[i].height;
  if ((url = url[i].url) == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_infowars = async (id, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  var url = "https://vod-api.infowars.com/embed/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'downloadUrl="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_brighteon = async (id, frame, fmt) =>
{
  load_brightcove ("5762013463001", id, "brighteon", frame, fmt);
}
////////////////////

const req_natfilmbrd = async (id, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  var url = "https://cdnapisec.kaltura.com/p/2081491/sp/208149100/playManifest/entryId/" + id +
    "/flavorIds/1_z997vpzn/format/applehttp/protocol/https/a.m3u8";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (!document.getElementById ("mov" + frame + "f").checked) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_dailymotion = async (id, frame, fmt) =>
{
  var tag = "dailymotion"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://www.dailymotion.com/player/metadata/video/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  var response = await fetch (url);
  var jsonData = await response.json();

  var n; url = jsonData.qualities["auto"][0].url; if (url == undefined) throw ("!!!");

  if (!document.getElementById ("mov" + frame + "f").checked) fmt = 0; else
  {
    response = await fetch (url);
    jsonData = await response.text();

    url = crack_m3u8 (url, jsonData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

  n = url.search ("#"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////
/*
const req_twitter = async (id, frame, fmt) =>
{
//  id = "1106247367177764865";
//  id = "1124002328011575296";
  var tag = "twitter"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://threadreaderapp.com/thread/" + id + ".html";
  document.getElementById ("id" + frame).value = tag;

try
{
  var response = await fetch (url);
  var textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////
*/

const req_twitter = async (id, frame, fmt) =>
{
  id = "1106247367177764865";
  var tag = "twitter"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://api.twitter.com/1.1/videos/tweet/config/" + id + ".json";
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var bearer = "Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw";

try
{
  var response = await fetch (url, { headers: { 'authorization': bearer }, });
  var jsonData = await response.json();

  url = jsonData.track.playbackUrl;
  if (url == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digid = function (frame)
{
  var doc, src, fmt;

  clear_video (frame);

  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 3 ) dig_infowars (doc, frame, fmt); else
  if (src == 4 ) dig_brighteon (doc, frame, fmt); else
  if (src == 6 ) dig_tedtalks (doc, frame, fmt); else
  if (src == 7 ) dig_natfilmbrd (doc, frame, fmt); else
  if (src == 10) dig_test (doc, frame, fmt); else
  if (src == 11) dig_twitter (doc, frame, fmt); else
  if (src == 12) dig_facebook (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_test = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "test"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
//  var response = await fetch (url, { credentials: 'include' } );
  var response = await fetch (url);
//  var textData = await response.text();

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow ("", frame, tag + ": okay");
}
////////////////////

const dig_infowars = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "infowars"; var url = doc;
  if (url.search ("infowars") < 0) url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);
  
  if (n > 0) url = textData.substr (n + s.length, 200); else
  {
    n = textData.search ('<iframe src="'); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200);

    n = url.search ("/embed/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7);
  }

  url = url.substr (0, url.search ('"'));
  if ((n = url.search ("\\?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_infowars (url, frame, fmt);
}
////////////////////

const dig_brighteon = async (doc, frame, fmt) =>
{
  if (doc.search ("counterthink") < 0)
  {
    find_brightcove (doc, "", frame, fmt); return;
  }
  if (is_busy (frame)) return;
  var tag = "brighteon"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "brighteon.com/embed/";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_brighteon (url, frame, fmt);
}
////////////////////

const dig_natfilmbrd = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "natfilmbrd"; var url = doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

  var n = url.search ("\\?");
  if (n > 0) url = url.substr (0, n);
  if (doc.substr (-1) != "/") url = url + "/";
  url = url + "embed/player/?player_mode=&embed_mode=0&context_type=film";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"entry_id": "';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ('"'));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_natfilmbrd (url, frame, fmt);
}
////////////////////

const dig_tedtalks = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "ted"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"file":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_twitter = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "twitter"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "/status/";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ("/"));

  if (url.length != 19) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_twitter (url, frame, fmt);
}
////////////////////

const dig_facebook = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "facebook"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"og:video" content="';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 500);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 420) return 0; else
  if (q > 420 && q <= 540) return 1; else
  if (q > 540 && q <= 800) return 2; else

  return (-1);
}
////////////////////

var getformat = function (f, fmt)
{
  var m = 0, n = fmt;

  if (n == 46) if (f[7]) m = n; else { if (!m) m = 37; n = 45; }
  if (n == 45) if (f[6]) m = n; else { if (!m) m = 22; n = 44; }
  if (n == 44) if (f[5]) m = n; else { if (!m) m = 19; n = 43; }
  if (n == 43) if (f[4]) m = n; else { if (!m) m = 18; n = m;  }

  if (n == 37) { if (f[3]) m = n; else n = 22; }
  if (n == 22) { if (f[2]) m = n; else n = 19; }
  if (n == 19) { if (f[1]) m = n; else n = 18; }
  if (n == 18) { if (f[0]) m = n; else m = 0;}

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else { if (!m) m = 18; n = 44; }
  if (n == 44) if (f[5]) m = n; else { if (!m) m = 19; n = 45; }
  if (n == 45) if (f[6]) m = n; else { if (!m) m = 22; n = 46; }
  if (n == 46) if (f[7]) m = n; else { if (!m) m = 37; n = m;  }

  if (n == 18) { if (f[0]) m = n; else n = 19; }
  if (n == 19) { if (f[1]) m = n; else n = 22; }
  if (n == 22) { if (f[2]) m = n; else n = 37; }
  if (n == 37) { if (f[3]) m = n; else n = m;  }

  return m;
}
////////////////////

var fixlist = function (item, doc, state)
{
  var txt = doc.options[item].text.slice (0,-1);
  if (state < 0) txt = txt + '*'; else if (state > 0) txt = txt + '+'; else txt = txt + '-';
  doc.options[item].text = txt;
}
////////////////////

var fixformat = function (f, frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]); fixlist (2, doc, f[2]);
  fixlist (3, doc, f[4]); fixlist (4, doc, f[5]); fixlist (5, doc, f[6]);

/*
  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]);
  fixlist (2, doc, f[2]); fixlist (3, doc, f[3]);
  fixlist (4, doc, f[4]); fixlist (5, doc, f[5]);
  fixlist (6, doc, f[6]); fixlist (7, doc, f[7]);
*/
}
////////////////////

var no_format = function (frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, -1); fixlist (1, doc, -1);
  fixlist (2, doc, -1); fixlist (3, doc, -1);
  fixlist (4, doc, -1); fixlist (5, doc, -1);
}
////////////////////

//////////////////////////////
///// NEWS & PROPAGANDA //////
//////////////////////////////

var loadnews = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  clear_video (frame); if (mode == 2) return;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    if (url != "") loadwindow (url, frame, "");
    return;
  }

  if (mode != 0) return;

  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  url = document.getElementById ("stk" + frame).value;
  if (!url) url = document.getElementById ("id" + frame).value;

  src = document.getElementById ("src" + frame).value;
  sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "fox") src = 1;
      if (doc == "abc") src = 2;
      if (doc == "cnb") src = 4;
      if (doc == "msn") src = 7;
      if (doc == "pbs") src = 7;
      if (doc == "cbc") src = 11;
      if (doc == "ctv") src = 12;
      if (doc == "glo") src = 13;
      if (doc == "tvo") src = 14;
      if (doc == "bbc") src = 21;
      if (doc == "alj") src = 22;

      doc = document.getElementById ("src" + frame);
      if (doc.value != src) for (mode = 1; mode < doc.length; mode++)
        if (doc.options [mode].value == src) { doc.selectedIndex = mode; break; }
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, 13))) req_fox (url, frame, fmt); else
  if (src == 2  && (url = getid (url,  8))) req_abc (url, frame, fmt); else
//  if (src == 4  && (url = getid (url, 10))) req_cnbc (url, frame, fmt); else
  if (src == 6  && (url = getid (url, -7))) req_cspan (url, frame, fmt); else
  if (src == 7  && (url = getid (url,-13))) req_msnbc (url, frame, fmt); else
  if (src == 8  && (url = getid (url, 10))) req_pbs (url, frame, fmt); else
  if (src == 11 && (url = getid (url, 13))) req_cbc (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  7))) req_ctv (url, frame, fmt); else
  if (src == 13 && (url = getid (url,  7))) req_global (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 13))) req_tvo (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  8))) req_bbc (url, frame, fmt); else
  if (src == 22 && (url = getid (url, 13))) req_aljazeera (url, frame, fmt); else

  if (src == 0 && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_fox = async (id, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  var url = "https://video.foxnews.com/v/feed/video/" + id + ".js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  var response = await fetch (url);
  var jsonData = await response.json();

  if (jsonData.error != undefined)
  {
    response = await fetch ("https://video.foxbusiness.com/v/feed/video/" + id + ".js");
    jsonData = await response.json();
  }

  if (jsonData.error != undefined) throw ("!!!");
  url = jsonData.channel.item["media-content"]["@attributes"].url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_abc = async (id, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://abcnews.go.com/video/itemfeed?id=" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var jsonData = await response.json();

  url = jsonData.channel.item["media-group"]["media-content"][2]["@attributes"].url; 

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////
/*
const req_cnbc = async (id, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  var url = "http://link.theplatform.com/s/gZWlPC/media/guid/2408950221/" + id + "?mbr=true&manifest=m3u";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    var response = await fetch (url);
    var textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////
*/
const req_msnbc = async (id, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://www.msnbc.com/msnbc/embedded-video/mmvo" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '},"videoType":';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  textData = textData.substr (n, 1000);

  var sub = textData.split ('"publicUrl":"');
  url = sub[2].substr (0, sub[2].search ('"'));

  url = url.replace (/\\u002F/g, "/") + "&manifest=m3u&format=redirect";

  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_pbs = async (id, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://player.pbs.org/portalplayer/" + id + "/";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"encodings": \\["';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 1, 200);
  url = url.substr (0, url.search ('"'));

  url = cors_bypass + url + "?format=jsonp&callback=__jp1";

  response = await fetch (url);
  textData = await response.text();

  s = '"url": "'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length);
  url = url.substr (0, url.search ('"'));

  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cbc = async (id, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  var url = "https://link.theplatform.com/s/ExhSPC/media/guid/2655402169/" +
    id + "/meta.smil?format=smil&mbr=true&manifest=m3u";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  url = url.substr (0, url.search ('"'));
 
  if (url.search ("m3u8") < 0 || !document.getElementById ("mov" + frame + "f").checked)
  {
    fmt = 0; no_format (frame);

  } else {

    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_ctv = async (id, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";

  var url = "https://capi.9c9media.com/destinations/ctvnews_web/platforms/desktop/contents/" + id;
  var sub = "?%24include=%5BContentPackages%5D";

try
{ 
  var response = await fetch (url + sub);
  var jsonData = await response.json();

  sub = jsonData.ContentPackages[0].Id;
  url = url + "/contentpackages/" + sub + "/manifest.mpd";

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_global = async (id, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  var url = cors_bypass + "https://globalnews.ca/video/embed/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'sources":\\[\\{"file":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 200);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_tvo = async (id, frame, fmt) =>
{
  load_brightcove ("18140038001", id, "tvo", frame, fmt);
}
////////////////////

const req_bbc = async (id, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  url = cors_bypass + "https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/"
      + id + "/format/xml/atk/";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var sub = textData.split ('href="'); if (sub.length < 2) throw ("!!!");

  for (var i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.search ("https") < 0) continue;
    if (url.search ("mpd") > 0 && url.search ("gda") < 0) break;
  }
  
  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_aljazeera = async (id, frame, fmt) =>
{
  load_brightcove ("665003303001", id, "aljazeera", frame, fmt);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var dignews = function (frame)
{
  var doc, src, fmt;

  clear_video (frame);

  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_fox (doc, frame, fmt); else
  if (src == 2 ) dig_abc (doc, frame, fmt); else
  if (src == 3 ) dig_cbs (doc, frame, fmt); else
  if (src == 4 ) dig_cnbc (doc, frame, fmt); else
  if (src == 5 ) dig_cnn (doc, frame, fmt); else
  if (src == 6 ) dig_cspan (doc, frame, fmt); else
  if (src == 8 ) dig_pbs (doc, frame, fmt); else
  if (src == 11) dig_cbc (doc, frame, fmt); else
  if (src == 12) dig_ctv (doc, frame, fmt); else
  if (src == 13) dig_global (doc, frame, fmt); else
  if (src == 14) dig_tvo (doc, frame, fmt); else
  if (src == 21) dig_bbc (doc, frame, fmt); else
  if (src == 22) dig_aljazeera (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_fox = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "fox"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);

  if (n < 0)
  {
    s = "video_id=";
    n = textData.search (s); if (n < 0) throw ("!!!");
  }
  
  url = textData.substr (n + s.length, 13);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_fox (url, frame, fmt);
}
////////////////////

const dig_abc = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "abc"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-video="'; var x = 0;
  var n = textData.search (s);

  if (n < 0) { s = 'null/video/itemfeed\\?id='; n = textData.search (s); x = 1; }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - x, 100);
  url = url.substr (0, url.search ('"'));

  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_abc (url, frame, fmt);
}
////////////////////

const dig_cbs = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cbs"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  s = '"embedUrl":"'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/\\/g, "");

  if (url != doc)
  {
    response = await fetch (cors_bypass + url);
    textData = await response.text();
  }

  var s = '"video":';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);

  var sub = url.split ('"'); if (sub [0] != "") throw ("!!!");
  url = sub [1];

  if (url.search ("m3u8") < 0 || !document.getElementById ("mov" + frame + "f").checked)
  {
    no_format (frame); fmt = 0;
  }
  else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cnbc = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cnbc"; var url = doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"playbackURL":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  url = "https:" + url.replace (/\\u002F/g, "/");

  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////
/*
const dig_cnbc = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cnbc"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "'content_id' : '";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ("'"));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_cnbc (url, frame, fmt);
}
////////////////////
*/

const dig_cnn = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cnn"; var url = doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = '"embedUrl": "';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  url = url.replace ("fav/?video=", "video?id=");

  response = await fetch (url);
  textData = await response.json();

  url = textData.groupfiles[2].files[0].fileUri;

  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cspan = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cspan"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "sources: \\[\\{file: '";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 100);
  url = url.substr (0, url.search ("'"));

  if (!document.getElementById ("mov" + frame + "f").checked) { no_format (frame); fmt = 0; } else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt);
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_pbs = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "pbs"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "'VideoTPMediaId': '";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ("'"));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_pbs (url, frame, fmt);
}
////////////////////

const dig_cbc = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cbc"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var r = '"'; var s = '"guid":"'; var n = textData.search (s);

  if (n < 0)
  {
    r = "'"; s = "'mediaId': '";
    n = textData.search (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search (r));

  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_cbc (url, frame, fmt);
}
////////////////////

const dig_ctv = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "cbc"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search ('"'));
  }
    
  if (n < 0)
  {
    s = "\\); initPlayer\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length - 2, 100);
      url = url.substr (0, url.search ("\\)"));
    }
  }

  if (n < 0)
  {
    s = "getAuthStates\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 300);
      url = url.substr (0, url.search ('"'));
      sub = url.split (","); if (sub.length == 0) throw ("!!!");
      url = sub [sub.length - 1];
    }
  }

  if (n < 0)
  {
    s = "contentId: ";
    n = textData.search (s); if (n < 0) throw ("!!!");
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search (','));
  }

  if (url.length != 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_ctv (url, frame, fmt);
}
////////////////////

const dig_global = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "global"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-displayinline="';
  var n = textData.search (s);

  if (n < 0)
  {
    s = 'data-miniplayer-video="'; n = textData.search (s);
    if (n < 0) { s = '<iframe src="'; n = textData.search (s); }
    if (n < 0) throw ("!!!");
  }
  url = textData.substr (n, 100);

  s = "/playlist/"; n = url.search (s);
  if (n < 0) { s = "/embed/"; n = url.search (s); }
  if (n < 0) throw ("!!!");

  url = url.substr (n + s.length, 7);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_global (url, frame, fmt);
}
////////////////////

const dig_tvo = async (doc, frame, fmt) =>
{
  find_brightcove (doc, "tvo", frame, fmt);
}
////////////////////

const dig_bbc = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "bbc"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "embed\\\\";
  var n = textData.search (s);

  if (n < 0) { s = "versionID&quot;:&quot;"; n = textData.search (s); }
  if (n < 0) { s = 'data-vpid="'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 20);

  n = url.search ("\\\\"); if (n < 0) n = url.search ("&");
  if (n < 0) n = url.search ('"'); if (n != 8) throw ("!!!");

  url = url.substr (0, 8);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_bbc (url, frame, fmt);
}
////////////////////

const dig_aljazeera = async (doc, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var tag = "aljazeera"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

  var s = "RenderPagesVideo\\('";
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search ("'"));
  }

  if (n < 0)
  {
    s = "RenderGeneralBCVideo\\(";
    n = textData.search (s); if (n < 0) throw ("!!!");
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search (","));
  }

  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_aljazeera (url, frame, fmt);
}
////////////////////

//////////////////////
///// LOADWINDOW /////
//////////////////////

var loadwindow = function (url, frame, site)
{
  var h, w, win, raw, title, insert, specs;

  var time = Date.now(); if (last_time > time - 2000) return; last_time = time;

  var multi = document.getElementById ("mov" + frame + "m").checked;
  var nplay = document.getElementById ("mov" + frame + "n").checked;

  if (document.getElementById ("mov" + frame + "a").checked) raw = 0; else
  if (document.getElementById ("mov" + frame + "b").checked) raw = 1; else
  if (document.getElementById ("mov" + frame + "c").checked) raw = 2; else raw = 0;

  if (url == "")
  {  
    document.getElementById ("vid" + frame).innerHTML = "No Video";
    document.getElementById ("id" + frame).value = site;
    return;
  }

  if (site != "")
  {
    if (typeof (url) != "string" || url.search ("http") != 0)
    {
      document.getElementById ("vid" + frame).innerHTML = "Bad URL";
      return;
    }

    document.getElementById ("id" + frame).value = site;
    document.getElementById ("line" + frame).value = url;

    if (nplay)
    {
      document.getElementById ("vid" + frame).innerHTML = "No Play";
      return;
    }
  }

  if (raw == 1)
  {
    title = "Wrapper";
    insert = "<body style='margin:0;padding:0;background-color:black'><video" +
      " style='position:absolute;width:100%;height:100%;border:none;outline:none'" +
      " autoplay allowfullscreen controls src='" + url + "'></video></body>";
  }

  if (raw == 2)
  {
    title = "Sandbox";
    insert = "<body style='margin:0;padding:0;background-color:black'><iframe" +
      " style='position:absolute;width:100%;height:100%;border:none;outline:none'" +
      " sandbox='allow-scripts allow-same-origin allow-forms'" +
      " autoplay allowfullscreen controls src='" + url + "'></iframe></body>";
  }

  if (document.getElementById ("btn" + frame + "b").checked)
  {
    var lft, top, x = document.getElementById ("win" + frame).value;

    w = x.substr (0, x.search (":"));
    h = x.substr (x.search (":") + 1);

    lft = (window.screen.width - w)  / 2;
    top = (window.screen.height - h) / 3;

    specs = "width=" + w + ",height=" + h + ",top=" + top + ",left=" + lft;
  }

  else if (document.getElementById ("btn" + frame + "a").checked)
  {
    h = w = 0; specs = "";
  }

  else
  {
    win = document.getElementById ("mov" + frame);
    if (raw != 1) win.src = url; else
    {
      // this is not working with Edge
      // document.getElementById ("mov" + frame).srcdoc = insert;
      win = win.contentDocument; win.open(); win.write (insert); win.close();
    }
    document.getElementById ("vid" + frame).innerHTML = "No Video";
    return;
  }

  if (multi) vidwin = null; else if (h != last_h || w != last_w || raw != last_raw)
  {
    if (vidwin) vidwin.close(); vidwin = null;
  }
  if (!vidwin || vidwin.closed) vidwin = window.open ("about:blank", "_blank", specs);
  last_h = h; last_w = w; last_raw = raw;

  if (raw == 0) vidwin.location = url; else
  {
    insert = "<!DOCTYPE html><html><head><title>" + title + "</title></head>" + insert + "</html>";
    win = vidwin.document; win.open(); win.write (insert); win.close();
  }
  vidwin.focus(); document.getElementById ("vid" + frame).innerHTML = "";
}
////////////////////

//////////////////////////////
///// GENERIC BRIGHTCOVE /////
//////////////////////////////

const find_brightcove = async (doc, tag, frame, fmt) =>
{
  if (is_busy (frame)) return;
  if (tag == "") tag = "brightcove"; var url = cors_bypass + doc;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  var response = await fetch (url);
  var textData = await response.text();

  var s = 'data-account="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pub = textData.substr (n + s.length, 100);
  pub = pub.substr (0, pub.search ('"'));

  s = 'data-video-id="';
  n = textData.search (s); if (n < 0) throw ("!!!");

  var id = textData.substr (n + s.length, 100);
  id = id.substr (0, id.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) load_brightcove (pub, id, tag, frame, fmt);
}
////////////////////

const load_brightcove = async (pub, id, tag, frame, fmt) =>
{
  var i, j, k, f = new Array (8), r = new Array (4);

  if (is_busy (frame)) return;
  var url = "https://players.brightcove.net/" + pub + "/default_default/index.min.js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  response = await fetch (url);
  textData = await response.text();

  var s = 'accountId:"' + pub + '",policyKey:"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pk = textData.substr (n + s.length, 200);
  pk = pk.substr (0, pk.search ('"'));

  url = "https://edge.api.brightcove.com/playback/v1/accounts/" + pub + "/videos/" + id;

  response = await fetch (url, { headers: { 'Accept': 'application/json;pk=' + pk }, });
  textData = await response.json();

  var url_m3u8 = ""; var dat = textData.sources; if (dat == undefined) throw ("!!!");

  f[0] = f[1] = f[2] = f[3] = f[4] = f[5] = f[6] = f[7] = r[0] = r[1] = r[2] = r[3] = 0;

  for (i = 0; i < dat.length; i++)
  {
    url = dat [i].src; if (url == undefined) continue;
    if (url.search ("m3u8") > 0) { url_m3u8 = url; continue; }
    k = dat [i].height; if (k == undefined) continue;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if ((k = getformat (f, fmt)))
  {
    if (k == 18) j = 0;
    if (k == 19) j = 1;
    if (k == 22) j = 2;

    if ((i = f[j] - 1) < 0) throw ("!!!");
    url = dat [i].src; fmt = dat [i].height; fixformat (f, frame);
  }
  else
  {
    if ((url = url_m3u8) == "") throw ("!!!");
    if (!document.getElementById ("mov" + frame + "f").checked) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt);
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

///////////////////////
///// M3U8 LOADER /////
///////////////////////

var crack_m3u8 = function (path, data, frame, fmt)
{
  var sub, str, url, audio, i, j, f = new Array (8), r = new Array (4);

  f[0] = f[1] = f[2] = f[3] = f[4] = f[5] = f[6] = f[7] = r[0] = r[1] = r[2] = r[3] = 0;

  sub = data.split ("#EXT-X-STREAM-INF");

  for (i = 1; i < sub.length; i++)
  {
    j = sub [i].search ("RESOLUTION"); if (j < 0) continue;

    str = sub [i]; str = str.substr (j);
    j = str.search (","); if (j < 0) j = str.search ("\n");
    str = str.substr (0, j); str = str.substr (str.search ("x") + 1);

    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame); if (!fmt) return (path + "<>");

  if (fmt == 18) j = 0;
  if (fmt == 19) j = 1;
  if (fmt == 22) j = 2;

  audio = sub [0]; sub = sub [f [j]].split ("\n");
  str = sub [1]; url = merge_url (path, str) + str;

  if ((i = audio.search ("#EXT-X-MEDIA:TYPE=AUDIO")) < 0) audio = ""; else
    if ((i = audio.search ('URI="')) < 0) audio = ""; else
    {
      audio = audio.substr (i + 5); audio = audio.substr (0, audio.search ('"'));
    }

  if (document.getElementById ("mov" + frame + "n").checked) make_downloader (url, audio);
  fmt = 0; if (audio != "") url = path; else fmt = r[j];
  return (url + "<>" + fmt);
}
////////////////////

var merge_url = function (path1, path2)
{
  var url = "", sub, i, j, k;

  if (path2.search ("http") == 0) return "";

  sub = path1.split ("/"); j = sub.length - 1;
  if ((k = path2.search ("/")) == 0) --j;

  for (i = 0; i < j; i++) url = url + sub [i] + "/";

  if (k == 0) url = url.substr (0, url.length - 1);

  return url;
}
////////////////////

//////////////////////
///// DOWNLOADER /////
//////////////////////

const make_downloader = async (vid, aud) =>
{
  var i, m, n, p = 0, url, data, name, doc, done = false, plain_text = false;

  url = vid; doc = head; download_doc = head + "Waiting for stream file..." + tail;

try
{ 
  var response = await fetch (url);
  var textData = await response.text();

} catch (err) { download_doc = head + "Could not get stream file." + tail; return; }

  
  if (aud != "") if (plain_text)
    doc = doc + "\n<br>Audio Stream Source<br>\n" + aud + "\n<br>"; else
    doc = doc + "\n<p>\n<a href='" + aud + "'>Audio Stream Source</a>";

  if (plain_text)
    doc = doc + "\n<br>Video Stream Source<br>\n" + url + "\n<br><br>"; else
    doc = doc + "\n<p>\n<a href='" + url + "'>Video Stream Source</a>\n<br><br>";

  var sub = textData.split ("#EXTINF");

  for (i = 1; i < sub.length - 1; i++)
  {
    data = sub [i].split ("\n");
    if (!done) { url = merge_url (url, data [1]); done = true; }
    data = url + data [1];

    name = ++p; if (p < 10) name = "00" + p; else if (p < 100) name = "0" + p;

    if (plain_text)
      data = "\n<p>\n" + data; else
      data = "\nSegment <a href='" + data + "'>" + name + "</a>&nbsp;&nbsp;&nbsp;";

    if (!(p % 5)) data = data + "\n<br><br>";

    doc = doc + data;
  }

  download_doc = doc + "\n<br>\n<div style='width:10vw; height:10vw'></div>" + tail + "\n\n";
}
////////////////////

var open_downloader = function ()
{
  var downloader = window.open ();
  downloader.document.write (download_doc);
  downloader.document.close ();
}
////////////////////

</script>

</html> 
