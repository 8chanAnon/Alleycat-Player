<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="strict-origin">

<title>Alleycat Player</title>

<style type="text/css">

.widevid {
  position: relative;
  width: 72vw;
  max-width: 130vh;
  padding-bottom: calc(56.25% - 1.5px);
  overflow: hidden;
  border: 2px solid red;
  background-color: indigo;
}

.widevid img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: auto;
  margin: auto;
  border: none;
}

.televid {
  position: relative;
  width: 60vw;
  padding-bottom: 45vw;
  overflow: hidden;
  border: 2px solid red;
  background-color: indigo;
}

.televid img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: auto;
  margin: auto;
  border: none;
}

.msgbox {
  position: absolute;
  top: 33%;
  left: 40%;
  right: 40%;
  text-align: center;
  border-radius: 10px;
  font-style: italic;
  background-color: slateblue;
  color: paleturquoise;
}

iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  margin: auto;
  border: none;
  background-color: transparent;
}

.popbox {
  position: absolute;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: -1;
}

.popbox table {
  width: 100%;
  border:none;
  table-layout: fixed;
}

.popbox td {
  padding: 8px 10px 5px 10px;
}

.popbox button {
  width: 100%;
  text-align: left;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  pointer-events: auto;
  font-family: 'segoe ui', serif;
  font-size: 12px;
  line-height: 14px;
  border-width: 1px;
  padding: 2px 5px 2px 5px;
  color: maroon;
}

.ranger button {
  font-size: 0.85em;
  line-height: 14px;
  padding: 1px 3px 1px 3px;
  background-color: lavenderblush;
  color: darkred;
}

.slider input {
 -moz-appearance: none;
 -webkit-appearance: none;
  appearance: none;
  background: whitesmoke;
  width: 12vw;
  height: 8px;
  padding: 0;
  margin: 0px 9px -1px 1px;
  border-radius: 0px;
}

.slider input::-moz-range-thumb {
  width: 2px;
  height: 22px;
  background: lightsteelblue;
  border-radius: 0;
}

.slider input::-webkit-range-thumb {
  width: 2px;
  height: 22px;
  background: lightsteelblue;
  border-radius: 0;
}

select {
  border-width: 2px;
  border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  margin: -3px 0 -3px 0;
  padding: 2px;
  background-color: cornsilk;
  color: brown;
}

select.stack {
  width: 100%;
  max-width: 97%;
  margin: -1px 0 0 5px;
  font-size: 0.9em;
  background-color: papayawhip;
  color: firebrick;
}

select.sites {
  font-size: 0.9em;
  background-color: papayawhip;
  color: red;
}

select.basic {
  font-size: 0.9em;
}

select.small {
  margin: 3px 0 -3px 0;
  padding: 1px 3px 0 0;
  font-size: 0.8em;
}

input {
  border-width: 2px;
  border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 4px 2px 5px;
}

input.idspec {
  width: 100%;
  max-width: 96%;
  margin: -3px 0 -2px 0;
  font-size: 0.9em;
  background-color: cornsilk;
  color: sienna;
}

input.urlspec {
  width: 75vw;
  background-color: cornsilk;
  color: steelblue;
}

input.static {
  text-align: center;
  margin: 0 2px 0 2px;
  padding: 2px 0 2px 0;
  border: 1px solid sandybrown;
  background-color: papayawhip;
  color: firebrick;
}

input.ir {
  margin: 0 5px 6px -2px;
}

th {
  border: 2px solid lightsalmon;
  background-color: pink;
  color:crimson;
}

table {
  border: 3px solid green;
}

td {
  text-align: left;
  vertical-align: top;
  overflow: hidden;
  font-size: 14px;
  line-height: 14px;
  padding: 0 4px 0 6px;
  color: saddlebrown;
}

td.vidbox {
  padding: 0;
  line-height: normal;
  text-align: initial;
  vertical-align: middle;
}

td.textbox {
  text-align: center;
  white-space: nowrap;
  padding: 0px 14px 0 10px;
  width: 30vw;
}

button {
  width: auto;
  height: 100%;
  font-size: 12px;
  line-height: 16px;
  padding-bottom: 1px;
  background-color: powderblue;
  border-color: gainsboro;
}

button.is_off {
  margin-top: 2px;
  border-style: outset;
  background-color: pink;
}

button.is_on {
  margin-top: 2px;
  border-style: inset;
  background-color: lightgreen;
}

button.wrapper {
  width: 60px;
  font-size: 13px;
  line-height: normal;
  padding: 0 2px 0 2px;
  border: 1px solid gold;
  background-color: blanchedalmond;
  color: red;
}

button.copy {
  font-size: 18px;
  line-height: 22px;
  color: darkblue;
  background-color: pink;
}

ul {
  padding: 0 1em 0 1em;
  list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

b_ {color: blue;}
r_ {color: crimson;}
g_ {color: seagreen;}
w_ {color: darkcyan;}

</style></head><body style="color:maroon;background-color:navajowhite;line-height:1.2em" onunload="javascript:clear_all()">

<h1><g_>A</g_><r_>ll</r_><g_>ey</g_><r_>cat</r_> <g_>Pl</g_><r_>ay</r_><g_>er</g_> <r_>v2a</r_></h1>

<p><hr><p>
<g_>Pick a Proxy:</g_>&nbsp;
<select id="proxy" size=1 class=small>
  <option value="https://xyss5.herokuapp.com/">xyss5.herokuapp.com *
  <option value="https://fathomless-cliffs-85079.herokuapp.com/">fathomless-cliffs-85079.herokuapp.com *
  <option value="https://cors-anywhere.herokuapp.com/">cors-anywhere.herokuapp.com
  <option value="https://bypasscors.herokuapp.com/api/?url=">bypasscors.herokuapp.com
  <option value="https://api.allorigins.win/raw?url=">api.allorigins.win
  <option value="http://35.210.173.135/">35.210.173.135
  <option value="LOCAL://localhost:8080/" selected>Local Proxy Server (Kraker)
  <option value="">None
</select>
<b>&nbsp;&nbsp;&nbsp;Go to <a href="#sites">Site list</a> or <a href="#movies">Movie sites</a>
  or <a href="#notes">Special Notes</a> or <a href="#livestream">TV & Radio</a></b>

<p><hr><p>
Install the Local Proxy Server app which is available
<a href="https://archive.org/details/alleycat-player" target=_blank>here</a>. The current version name is "kraker-1c".
<p>
CORS Unblocker:&nbsp;
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a> &nbsp;
<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/"
  target=_blank>Firefox only</a><br>
<p>
Alleycat Player supports playback of HLS/m3u8 and DASH/mpd videos via these two modules (whitelist accordingly):
<p><g_>
cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js<br>
reference.dashif.org/dash.js/v3.0.1/dist/dash.all.min.js
</g_><p><hr><p>
<b>Release notes for v2a (January 12, 2020):</b>
<p>
Big update for YouTube. Additional video formats are now available with the DASH player and the Kraker Local Proxy Server
(version 1c is required). Now, Kraker is indispensable in this process since there are a number of issues involving not
just the usual CORS limitations but also the behaviour of the Google video server. In order to access the video file, DASH
needs to employ byte ranges. That would normally be fine BUT when the web browser sends an OPTIONS request to test whether
byte ranges are permissible, Google answers NO. Bad Google. Byte ranges work fine but you just don't want to allow it.
Alrighty then...Kraker will auto-complete the OPTIONS request and green light it.
<p>
The role of the Kraker server goes further than that. It also is responsible for creating the mpd file for the DASH player.
It retrieves a blank template from the local disk, merges that with data from Alleycat and then makes the file accessible
as a remote resource. The point here is that the video is playable with any video player that supports DASH/mpd playback
(like SMPlayer or VLC). The video data is held only in the Kraker memory so it goes away if the proxy is shut down. Also,
there is a limit of 16 videos available at one time. Note that VLC displays an incorrect progress bar for live streams while
SMPlayer only plays the first 5 seconds. VOD works fine on both. This has to do with the fact that the DASH specs are a
mess and nobody really knows how it is supposed to work. It cost me three days of trial and error to get the native DASH
player to work correctly.
<p>
For most videos, all of these formats are available: 360/480/720p in both mp4 and webm. The thing here is that the audio
and the video are separate files (which is why the DASH player is needed). For mp4, these are the YouTube tag numbers:
#140 (audio), #134 (360p), #135 (480p), #136 (720p). For webm: #251 (audio), #243 (360p), #244 (480p); #247 (720p).
Higher resolutions may be available for some videos but Alleycat does not access them (at least, not at this point in time).
If the DASH formats are not available (rare), Alleycat will revert to the normal formats. Also, the audio and video are
both available for download via the DLoad button.
<p>
At this point, there is hardly any need for the additional YouTube sources, which are decidedly unreliable at best. Still,
they are sometimes useful for bypassing geo-blocks though that doesn't always work. Oh well.
<ul><li>
New brightness controls with a finer adjustment gradient. Also, ability to clear and restore the settings using the
Reset button.
</li><li>
New source for free movies and TV shows: UniqueStream. Note that the site is in a state of flux since I already have had to
update the code before this release. I expect additional changes to occur so be prepared for this site to become
inaccessible at some point (will fix in the next Alleycat update).
</li><li>
VidNode updated because the domain name changed to "vidcloud9.com". Still called VidNode though and the site is still
accessible as "vidnode.net".
</li><li>
OnlyStream, VidCloud and VShare removed. Added ProStream and UpStream.
</li><li>
Many Internet TV channels changed, removed or added. New Canadian channels: CTV News, CFTO, City TV and TVO. Also,
many secondary US channels added or changed. A lot of these secondaries require the Local Proxy Server.
</li></ul>
<p><hr><p>
<b>Tips on using Alleycat Player</b> -- these instructions are not meant to be complete. Alleycat Player is
primarily designed as a hacking tool. Please experiment to determine the limits and capabilities of the tool.
<p>
The original purpose of this tool was to support backdoor access to videos on YouTube for the purpose of downloading or for
transferring the URL of a video file to an external viewer for playback. The tool has expanded considerably since
the first version and it now supports backdoor access to videos on almost 50 different sites.
<p>
There are two ways to play videos embedded in web sites. The first method is to get the ID number of the video if
such is available. Enter the ID number in the line below the "Play ID" button and press. The second method is to
use the DIG option. In this case, you would copy and paste the URL of a web page in the line beside the "DIG" button
and press. For some sites, Alleycat will search the indicated page for the ID number of a video and then apply
the ID lookup function. Some sites do not employ video ID numbers so the DIG option is the only way to get the video.
Many web sites can be problematic due to small or major differences in page design so this may not always work. Also,
sites may sometimes change the page format so that Alleycat can no longer find the video. For this reason, the code
is continuously being tested and will be updated accordingly.
<p>
A complete URL may be entered as the ID number with the caveat that the ID must be the last part of the URL. If a
slash (/) or a dot (.) appears within the last 5 characters (like ".html") then the string will be truncated. A character
count is used to separate the ID from the rest of the URL. For YouTube, an ID is always exactly 11 characters. For some
sites, there is a small range like from 6 to 8 characters. In the event that a known good ID number is rejected, you can
force the ID to be accepted by preceding it with an asterisk (*). This is seldom necessary but might be needed for very
old videos.
<p>
In many cases, you have the option of choosing the resolution of the video. The format/resolution selection box has an odd
appearance due to Alleycat's original purpose of extracting YouTube videos. YouTube, unlike every other video
storage site, uses its own special coding system for resolutions and formats (because it has so many). For example,
#22 refers to mp4-720p and #43 refers to webm-360p. Note that the webm format is only available on YouTube.
The checkbox called "Format" applies to m3u8 playback (not mp4 or mpd). If checked, the video track for the desired
resolution will be extracted from the master m3u8. Note that this cannot be done if the master file contains an audio
track separate from the video.
<p>
The button called DLoad is for m3u8 sites. Both the "No Play" and the "Format" options must be checked. The m3u8 format
(similar to m3u used for mp3) consists of multiple segments, each about 10 seconds long. In order to convert to another
format like mp4, each of these segments must be downloaded. The DLoad button will open a new window with the list
of segments. This has limited functionality. You can change the list format to text by changing the value of the variable
called "plain_text" inside the Alleycat Player code. At some point, I'll figure out what more I can do with this.
<p>
<b>Viewer modes: Raw / Wrapper / Sandbox</b>
<p>
Sandboxing (implemented via the HTML <i>iframe</i> tag) is employed by Alleycat Player to prevent Javascript embeds from
opening windows or popups for advertising. Some pirate video download sites are unsafe when used without a good popup
blocker. However, if you play the URL inside Alleycat Player, these popups are very effectively blocked. Any URL may be
inserted, not just videos. The native viewers are sandboxed by default. However, if you employ
a window option to open the URL, you need to indicate that you want the window to be sandboxed. Just check the Sandbox
option. If you don't want a sandbox but you want to run a non-video URL then check the Raw option. In the default Wrapper
mode, there are three selectable options: <i>Wrapper</i> for playing mp4/ogv/webm videos (or whatever video format your
web browser supports), <i>M3U8</i> for HLS/m3u8 files and <i>DASH</i> for DASH/mpd files.
<p>
<b>Web browser compatibility notes</b>
<p>
Microsoft Edge has native support for m3u8 and mpd. This does not conflict with Alleycat Player. Videos have a strong
tendency to pixelate badly. Google Chrome and Brave also have issues with pixelation but to a much lesser extent.
Firefox has no such issue. Opera, Maxthon and Vivaldi were briefly tested. They work but pop-up windows do not size
correctly.
<p>
If the "Allow Multiple" option is not checked, windows are supposed to get re-used or closed as needed. However, I
have found two cases where the web browser incorrectly blocks the window close function in Alleycat Player. Edge
does not allow a window opened in Raw mode to be closed. Firefox (on Win10 but not on WinXP) blocks in Raw mode
if the window is controlled by an extension (such as for m3u8/mpd playback).
<p>
Always keep in mind that browsers contain various "security" features that may interfere with Alleycat Player. Consider
that Alleycat is able to extract video links from numerous different sites. Your browser has no idea what is trustworthy
and what is not (even though the content is just a video). You may need to battle with the site blockers in the browser
itself and in whatever add-ons or extensions you may have. Don't blame Alleycat. Your browser is just trying to "protect"
you. Normally, a notice of some sort should appear to warn you about blockage. Sometimes not. If a video does not play,
check the settings in your web browser or pop-up blocker. 'Nuff said. It isn't too bad overall.
<p>
<b>Addendum:</b> Microsoft Edge is hopelessly broken. Videos play with only sound because Edge does not support the CSS
filters used for the brightness control. Also, Edge is not allowing connections to the local host (might be an option
somewhere but I can't be bothered to find it). To repair the no-video problem, find and comment out this line of code:
<p>
vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
<p>

<p><hr><p><h3 id="notes">Special Notes</h3>
<ul><li>
Alleycat Player must be saved to your local drive. If you run Alleycat from its download site, it can fail in mysterious
ways. The culprit is the HTTP header "Referer" (set by the web browser) which can cause videos to not play. These sites are
affected: BitChute, DailyMotion, XHamster.
</li><li>
Internet TV (IPTV) channels are subject to downtime of a few hours or a day or a week or even forever. Many of the channel
links offered here can be found via the associated website. If a channel goes down and you want to recover it then search
for the website and extract a fresh link from there. Pirate links are, of course, not easily replaced.
</li><li>
Internet TV channels marked with a double asterisk (**) are only accessible with the Local Proxy Server. Those marked with
a single asterisk (*) are playable with a CORS unblocker. The secondary channels (where available) may or may not need a
CORS unblocker or the Local Proxy Server.
</li><li>
Internet TV channels which are streamed via "ustv.to" (formerly "savitar.tv") are only accessible with the Local Proxy
Server or a CORS unblocker. This is only for channels within the United States.
</li><li>
Only two Invidious sites support live streaming: "invidio.us" and "invidious.snopyta.org".
</li><li>
Vimeo live streaming (m3u8) is supported. Requires the Local Proxy Server or a CORS unblocker.
</li><li>
Brighteon videos will play with the Local Proxy Server and also with the two remote proxies marked with an asterisk.
</li><li>
InfoWars videos play as m3u8 but the mp4 version is available via the DLoad button.
</li><li>
The above is also true for VidNode but you need the Local Proxy Server to play m3u8. If you are not using the proxy then
Alleycat will play an mp4 if it is available but you still need a CORS unblocker.
</li><li>
For Twitter short links (like "https://t.co/..."), use DIG to get the tweet.
</ul><p>
Sites accessible with a Brightcove DIG:<br>
&nbsp;- https://www.stuff.co.nz<br>
&nbsp;- https://www.nzherald.co.nz<br>
&nbsp;- https://www.miamiherald.com<br>
&nbsp;- https://time.com<br>
&nbsp;- https://www.itv.com/goodmorningbritain<br>
&nbsp;- https://www.thesun.co.uk<br>
&nbsp;- https://www.channel4.com/news<br>
&nbsp;- http://webtv.un.org<br>
&nbsp;- https://www.express.co.uk
<p>
Sites accessible with a Podcasts DIG:<br>
&nbsp;- https://podcasts.apple.com<br>
&nbsp;- https://itunes.apple.com<br>
&nbsp;- https://www.stitcher.com<br>
&nbsp;- https://radiopublic.com<br>
&nbsp;- https://overcast.fm<br>
&nbsp;- https://www.podbean.com<br>
&nbsp;- https://www.spreaker.com
<p>
<!--
Sites accessible with a JWPlayer DIG:<br>
&nbsp;- STILL nothing here yet because I lost track of the two sites where this worked.
//-->
<p><hr><p>
There are three symbols used to indicate the options available for a particular site. [#]&nbsp;means no DIG option because
the video ID is always exposed. [?]&nbsp;means that video ID numbers are not available (you have to DIG). [+]&nbsp;means
that both ID numbers and the DIG option are supported.
<p>
Here is a rundown of each site, the available video formats and the site URL (link will open a new tab or window):
<p>
<h3 id="sites"><r_>Site List</r_>
  <small> -- Go to <a href="#info">Info viewer</a> or <a href="#news">News viewer</a>
    or <a href="#free">Movie viewer</a></small></h3>

<table>

<tr><td>YouTube		</td><td>mp4/webm	</td><td>*</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://www.youtube.com">www.youtube.com</a></td>
<td><a target=_blank href="https://www.genyoutube.net">www.genyoutube.net</a></td></tr>

<tr><td>&nbsp; ---			</td><td>		</td><td></td><td></td>
<td><a target=_blank href="https://www.y2meta.net">www.y2meta.net</a></td>
<td><a target=_blank href="https://invidio.us">invidio.us</a> (no proxy)</td></tr>

<tr><td>BitChute	</td><td>mp4		</td><td>varies</td><td>[#] Proxy</td>
<td><a target=_blank href="https://www.bitchute.com">www.bitchute.com</a></td></tr>

<tr><td>Vimeo		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://vimeo.com">vimeo.com</a></td></tr>

<tr><td>InfoWars	</td><td>m3u8/mp4	</td><td>?</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.infowars.com">www.infowars.com</a></td>
<td><a target=_blank href="https://summit.news">summit.news</a></td></tr>

<tr><td>153News		</td><td>mp4		</td><td>*</td><td>[#] Proxy</td>
<td><a target=_blank href="https://153news.net">153news.net</a></td></tr>

<tr><td>LiveLeak	</td><td>mp4		</td><td>*</td><td>[#] No Proxy</td>
<td><a target=_blank href="https://www.liveleak.com">www.liveleak.com</a></td></tr>

<tr><td>Brighteon	</td><td>m3u8		</td><td>?</td><td>[+] KRAK!</td>
<td><a target=_blank href="https://www.brighteon.com">www.brighteon.com</a></td>
<td><a target=_blank href="http://counterthink.com">counterthink.com</a></td></tr>

<tr><td>DailyMotion	</td><td>m3u8		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://www.dailymotion.com">www.dailymotion.com</a></td></tr>

<tr><td>PragerU		</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.prageru.com">www.prageru.com</a></td></tr>

<tr><td>TEDTalks	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.ted.com">www.ted.com</a></td></tr>

<tr><td>Nat. Film Board	</td><td>m3u8		</td><td>*</td><td>[+] No Proxy</td>
<td><a target=_blank href="https://www.nfb.ca">www.nfb.ca</a></td></tr>

<tr><td>Twitter		</td><td>m3u8		</td><td>varies</td><td>[+] KRAK</td>
<td><a target=_blank href="https://twitter.com">twitter.com</a></td>
<td><a target=_blank href="https://threadreaderapp.com">threadreaderapp.com</a></td></tr>

<tr><td>Facebook	</td><td>mp4		</td><td>varies</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.facebook.com">www.facebook.com</a></td>
<td><a target=_blank href="https://www.instagram.com">www.instagram.com</a></td></tr>

<tr><td>SoundCloud	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="https://soundcloud.com">soundcloud.com</a></td></tr>

<tr><td>Fox		</td><td>mp4		</td><td>432p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.foxnews.com">www.foxnews.com</a></td>
<td><a target=_blank href="https://www.foxbusiness.com">www.foxbusiness.com</a></td></tr>

<tr><td>ABC		</td><td>mp4		</td><td>360p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://abcnews.go.com">abcnews.go.com</a></td></tr>

<tr><td>CBS		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.cbsnews.com">www.cbsnews.com</a></td></tr>

<tr><td>CNBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cnbc.com">www.cnbc.com</a></td></tr>

<tr><td>CNN		</td><td>mp4/m3u8	</td><td>*</td><td>[?] No Proxy</td>
<td><a target=_blank href="https://www.cnn.com">www.cnn.com</a></td>
<td><a target=_blank href="https://edition.cnn.com">edition.cnn.com</a></td></tr>

<tr><td>C-SPAN		</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.c-span.org">www.c-span.org</a></td></tr>

<tr><td>MS/NBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.msnbc.com">www.msnbc.com</a></td>
<td><a target=_blank href="https://www.nbcnews.com">www.nbcnews.com</a></td></tr>

<tr><td>PBS		</td><td>m3u8		</td><td>*</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.pbs.org">www.pbs.org</a></td></tr>

<tr><td>CBC		</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.cbc.ca">www.cbc.ca</a></td></tr>

<tr><td>CTV		</td><td>mpd		</td><td>?</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.ctvnews.ca">www.ctvnews.ca</a></td></tr>

<tr><td>Global		</td><td>mp4		</td><td>540p</td><td>[+] Proxy</td>
<td><a target=_blank href="https://globalnews.ca">globalnews.ca</a></td></tr>

<tr><td>TVO		</td><td>mp4		</td><td>360p</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.tvo.org">www.tvo.org</a></td></tr>

<tr><td>BBC		</td><td>mpd		</td><td>?</td><td>[+] Proxy</td>
<td><a target=_blank href="https://www.bbc.com">www.bbc.com</a></td>
<td><a target=_blank href="https://www.bbc.co.uk/sounds">www.bbc.co.uk/sounds</a></td></tr>

<tr><td>Press TV	</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://www.presstv.com">www.presstv.com</a></td></tr>
<tr><td>Press TV Doc	</td><td>mp4		</td><td>720p</td><td>[?] Proxy</td>
<td><a target=_blank href="http://presstvdoc.com">presstvdoc.com</a></td></tr>

<tr><td>Al Jazeera	</td><td>mp4		</td><td>*</td><td>[+] Proxy (DIG)</td>
<td><a target=_blank href="https://www.aljazeera.com">www.aljazeera.com</a></td></tr>

<tr><td>Bloomberg	</td><td>mp4		</td><td>*</td><td>[+] KRAK</td>
<td><a target=_blank href="https://www.bloomberg.com">www.bloomberg.com</a></td></tr>

</table>
<p>

? = unknown or auto-select (m3u8/mpd)<br>
* = user selectable (via format box)<br>
! = use the Sandbox option to embed the video.<br>
KRAK = only accessible with the Local Proxy Server (Kraker)<br>
CORS = only accessible with a CORS unblocker (or Kraker)

<p><hr><p><h3 id="movies"><r_>Movie Sites</r_>
  <small> -- Go to <a href="#free">Movie viewer</a> or <a href="#sites">Info/News</a></small></h3>

<table>

<tr><td>TubiTV		</td><td>m3u8		</td><td>*</td><td>[+] CORS</td>
<td><a target=_blank href="https://tubitv.com">tubitv.com</a></td></tr>

<tr><td>VidNode		</td><td>m3u8/mp4	</td><td>*</td><td>[+] KRAK!</td>
<td><a target=_blank href="https://vidcloud9.com">vidcloud9.com</a> !</td>
<td><a target=_blank href="https://vidnode.net">vidnode.net</a> !</td><tr>

<tr><td>123Movies	</td><td>mp4		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://w2.d123movies.com">w2.d123movies.com</a> !</td>
<td><a target=_blank href="https://0123moviesback.com">0123moviesback.com</a> !</td></tr>

<tr><td>StreamLord	</td><td>mp4		</td><td>?</td><td>[?] KRAK</td>
<td><a target=_blank href="https://www.streamlord.com">www.streamlord.com</a></td><tr>

<tr><td>UniqueStream	</td><td>m3u8		</td><td>*</td><td>[?] Proxy</td>
<td><a target=_blank href="https://uniquestream.net">uniquestream.net</a></td><tr>

<tr><td>XHamster	</td><td>mp4/webm	</td><td>*</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://xhamster.com">xhamster.com</a></td></tr>

<tr><td>ClipWatching	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://clipwatching.com">clipwatching.com</a> !</td></tr>

<tr><td>CloudVideo	</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://cloudvideo.tv">cloudvideo.tv</a> !</td></tr>

<tr><td>GoUnlimited	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://gounlimited.to">gounlimited.to</a> !</td></tr>

<tr><td>Prostream	</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://prostream.to">prostream.to</a> !</td><tr>

<tr><td>UpStream	</td><td>m3u8		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://upstream.to">upstream.to</a> !</td><tr>

<tr><td>VideoBin	</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://videobin.co">videobin.co</a> !</td><tr>

<tr><td>VidLox		</td><td>mp4		</td><td>?</td><td>[#] Proxy!</td>
<td><a target=_blank href="https://vidlox.me">vidlox.me</a> !</td><tr>

<tr><td>Vidoza		</td><td>mp4		</td><td>?</td><td>[#] CORS!</td>
<td><a target=_blank href="https://vidoza.net">vidoza.net</a> !</td></tr>

<tr><td>XStream		</td><td>mp4		</td><td>*</td><td>[#] CORS!</td>
<td><a target=_blank href="https://xstreamcdn.com">xstreamcdn.com</a> !</td>
<td><a target=_blank href="https://www.fembed.com">www.fembed.com</a> !</td></tr>

<tr><td>AudioRealm	</td><td>mp3		</td><td></td><td>[+] Proxy</td>
<td><a target=_blank href="http://audiorealm.com">audiorealm.com</a></td></tr>

</table>
<p>
! on a site url = use caution on these sites due to popup ads<br>
! on Proxy or CORS or KRAK = use the Sandbox option to embed the video.
<p>
Note that quality level (example: [720]) may not be the same as resolution.
<p><hr><p>
These sites are supported under XStream:
<p>
<a target=_blank href="https://www.fembed.com">www.fembed.com</a><br>
<a target=_blank href="https://streamhoe.online">streamhoe.online</a><br>
<a target=_blank href="https://myvidis.top">myvidis.top</a><br>
<p>
These sites are supported under "General DIG":
<p>
<a target=_blank href="https://www.lunchflix.com">www.lunchflix.com</a> (GoUnlimited)<br>
<a target=_blank href="https://watchmoviesfree.org">watchmoviesfree.org</a> (XStream)<br>
<a target=_blank href="https://antmovies.tv">antmovies.tv</a> (XStream)<br>
<p>
Some search sites to get video links from:
<p>
<a target=_blank href="https://ololo.to/">ololo.to</a><br>
<a target=_blank href="https://crocovid.com/">crocovid.com</a><br>
<a target=_blank href="https://www1.swatchseries.to">www1.swatchseries.to</a><br>
<a target=_blank href="https://www.downloads-anymovies.com">www.downloads-anymovies.com</a><br>
<a target=_blank href="http://www2.project-free-tv.ag">www2.project-free-tv.ag</a><br>
<a target=_blank href="https://www.watchepisodes4.com">www.watchepisodes4.com</a><br>
<a target=_blank href="https://streamdreams.org">streamdreams.org</a><br>
<a target=_blank href="http://www.online-movies-free.com">www.online-movies-free.com</a><br>
<a target=_blank href="https://www.cinebloom.org">www.cinebloom.org</a><br>
<a target=_blank href="https://www.primewire.li">www.primewire.li</a><br>
<a target=_blank href="https://two-movies.me">two-movies.me</a><br>
<p>
If you want to play embedded videos, make sure that you use the proper embed URL.
<p>
For example:
<table>
<tr><td>Page: https://openload.co/f/{vid-id}</td><td>Embed: https://openload.co/embed/{vid-id}</td></tr>
<tr><td>Page: https://streamango.com/f/{vid-id}</td><td>Embed: https://streamango.com/embed/{vid-id}</td></tr>
<tr><td>Page: https://xstreamcdn.com/f/{vid-id}</td><td>Embed: https://xstreamcdn.com/v/{vid-id}</td></tr>
</table>

<h3 id="livestream"><r_>Internet TV</r_><small> &nbsp;--&nbsp; TV Guide:&nbsp;
  <a target=_blank href="https://ustv247.tv/tv-guide/">ustv247.tv</a>&nbsp;
  <a target=_blank href="https://ustvgo.tv/tv-guide/">ustvgo.tv</a>&nbsp;
  <a target=_blank href="https://watchnewslive.tv/tv-guide/">watchnewslive.tv</a>
</small></h3>

Go to the <a href="#free">Movie viewer</a>, pick a TV stack and a channel and then press "Play ID". That's it.
All channels are m3u8 live streams and most are not region locked. Some channels require an initial
lookup (thus requiring a CORS proxy or unblocker) to find the direct stream URL. Such URLs are temporary and will
time out (anywhere from a few hours to two days). Alleycat Player will refresh the link after two hours.
<p>
In order to facilitate channel surfing, a new feature has been added. Check the option "Allow Multiple" to activate.
This will present the stack as buttons displayed on top of the viewer. Along with that are 12 buttons for previously
selected channels. The "Copy" button will show and hide the popup. Also, pausing the video (not in full-screen) will
show the popup. You can click a blank entry to hide. All viewers have this feature.
<p>
Some channels have two stream sources. This is indicated with a plus sign (+) after the channel name. A double plus
indicates that the streams are from different local stations. Select "webm" in the format panel to access the
secondary channel.
<p></p>
&nbsp;<r_>Bibliography</r_>

<table><tr><td>
http://ustv247.tv<br>
http://ustvgo.tv<br>
http://watchnewslive.tv<br>
http://www.giniko.com<br>
http://tvtolive.com<br>
https://github.com/exodiver/IPTV<br>
https://publicdomainradio.blogspot.com/p/blog-page.html<br>
</td><td>
https://www.rt.com/on-air<br>
https://www.presstv.com<br>
https://www.aljazeera.com/live<br>
https://www.trtworld.com<br>
https://www.france24.com<br>
https://www3.nhk.or.jp<br>
http://ntv.ca/web-tv<br>
</td><td>
https://www.newsmaxtv.com<br>
https://freespeech.org<br>
https://yournewsnet.com<br>
https://www.redbull.com<br>
http://tbd.com<br>
http://thesoutheasternchannel.com<br>
</td><td>
https://www.nasa.gov/nasalive<br>
https://www.c-span.org<br>
http://www.cpac.ca<br>
http://webtv.un.org<br>
</td></tr></table>

<h3><r_>Internet Radio</r_></h3>

Simply go to the bottom of the page and press a radio button to play the Internet Radio. That's it.
For your convenience, the radio will pause when you play a video. Press the Clear button to unpause.
You can also open a radio station in a popup window.
<p>
You can input your own URL for either an mp4 or an mp3 or whatever your
browser supports. To play a YouTube video in audio-only mode, just enter the 11-character video id.
<p>
To find some radio station URLs, you can use the AudioRealm DIG tool supplied with the <a href="#free">Movie viewer</a>.
Also supplied is a stack with links to iHeartRadio and Virtual DJ. These will pop up a window with an embedded web site.

<div style="width: 90vw; height: 30vh"></div>

<!--
////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////
//-->

<h3 id="info" style="padding-top:5px"><r_>Info + Entertainment</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#news">News viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#info">snap</a> &nbsp; &nbsp;

<select id="ctr5z" size=1 class="small">
  <option value=11>Youtube.com
  <option value=12>Genyoutube.net
  <option value=13>Y2meta.net
  <option value=1 >invidio.us
  <option value=2 >invidious.snopyta.org
  <option value=10 selected>Youtube DASH
</select>

<span class="ranger"> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr5x" class="static" size=6 disabled>
<button onclick="javascript:brightness(5,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr5y" class="static" size=6 disabled>
<button onclick="javascript:brightness(5,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(5,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3><p><table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadid(5,0)">Play ID</button>
<button onclick="javascript:reset_frame(5)">Clear</button>
<p>
<input type=text id="id5" maxlength=256 class="idspec" onfocus="javascript:hidelist(5)"
  onclick="javascript:input_onclick('id5')" onblur="javascript:input_onblur('id5')">
<p>
<select id="stk5" size=1 class="stack"><option value="">Select a video stack</select>
<p>
<select id="src5" size=1 class="sites">
  <option value= 0 >YouTube / Invidious &nbsp; &nbsp;
  <option value= 1 ># mp4 - BitChute
  <option value= 2 ># mp4 - Vimeo
  <option value= 3 >+ m3u - InfoWars
  <option value= 11># mp4 - 153News
  <option value= 13># mp4 - LiveLeak
  <option value= 4 >+ m3u - Brighteon
  <option value= 5 ># m3u - DailyMotion
  <option value= 8 >? mp4 - PragerU
  <option value= 6 >? mp4 - TEDTalks
  <option value= 7 >+ m3u - NatFilmBrd
  <option value= 21>+ m3u - Twitter
  <option value= 22>? mp4 - Facebook
  <option value= 20>+ mp4 - BrightCove
<!--
  <option value= 25>+ m3u - JWPlayer
//-->
  <option value= 24>+ mp3 - SoundCloud
  <option value= 23>? mp3 - Podcasts
  <option value= 10>? -------- URL Test
</select>
<p>
<input type=checkbox id="mov5f" checked> Format (m3u8)&nbsp;
<input type=checkbox id="mov5p" checked> Use Proxy
<p>
<select id="fmt5" size=6 class="basic">
  <option value=18>mp4 - [18] 360p *
  <option value=19>mp4 - [19] 480p *
  <option value=22>mp4 - [22] 720p *
  <option value=43>webm  [43] 360p *
  <option value=44>webm  [44] 480p *
  <option value=45>webm  [45] 720p *
</select>
<p>
<select id="win5" size=1 class="basic">
  <option value="320:180">[16:9] 320 x 180
  <option value="480:270">[16:9] 480 x 270
  <option value="640:360">[16:9] 640 x 360
  <option value="960:540">[16:9] 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">[4:3] 240 x 180
  <option value="360:270">[4:3] 360 x 270
  <option value="480:360">[4:3] 480 x 360
  <option value="720:540">[4:3] 720 x 540
  <option value="960:720">[4:3] 960 x 720
</select>
<p>
<button id="btn5a" class="is_off" onclick="javascript:buttonpress(5,0)">New Window</button>
<button id="btn5b" class="is_off" onclick="javascript:buttonpress(5,1)">Popup Window</button>
<p>
<input type=checkbox id="mov5m"> Allow Multiple&nbsp;
<input type=checkbox id="mov5n"> No Play
<p></p>
<input type=radio id="mov5a" name="chk5"> Raw
<input type=radio id="mov5b" name="chk5" checked><button onclick="javascript:toggle_hls(5,0)"
  class="wrapper" id="hls5">Wrapper</button><input type=radio id="mov5c" name="chk5"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><h2 id="vid5" class="msgbox">No Video</h2><div class="popbox" id="pop5"></div>
<iframe id="mov5" name="mov5" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadid(5,1)">Play URL</button>
<button onclick="javascript:urlcopy(5)">Copy</button>
<button onclick="javascript:digid(5)"><b_>DIG</b_></button>&nbsp;

<input type=text id="line5" maxlength=20000 class="urlspec"
  onclick="javascript:input_onclick('line5')" onblur="javascript:input_onblur('line5')">

<p style="text-align:center">
<button class="copy" id="stk5-1" onclick="javascript:copylist(5,1)">Stack 1</button>
<button class="copy" id="stk5-2" onclick="javascript:copylist(5,2)">Stack 2</button>
<button class="copy" id="stk5-3" onclick="javascript:copylist(5,3)">Stack 3</button>
&nbsp;
<button class="copy" id="stk5-4" onclick="javascript:copylist(5,4)">BitChute</button>
<button class="copy" id="stk5-5" onclick="javascript:copylist(5,5)">Vimeo</button>
<button class="copy" id="stk5-6" onclick="javascript:copylist(5,6)">InfoWars</button>
<button class="copy" id="stk5-7" onclick="javascript:copylist(5,7)">Misc</button>
</p>
<div style="width: 90vw; height: 30vh"></div>

<!--
/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////
//-->

<h3 id="news" style="padding-top:5px"><r_>News & Propaganda</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#info">Info viewer</a> or <a href="#sites">Site list</a>
  &nbsp; | &nbsp; <a href="#news">snap</a> &nbsp; &nbsp;

<select id="ctr6z" size=1 class="small">
  <option value=11>Youtube.com
  <option value=12>Genyoutube.net
  <option value=13>Y2meta.net
  <option value=1 >invidio.us
  <option value=2 >invidious.snopyta.org
  <option value=10 selected>Youtube DASH
</select>&nbsp;

<span class="ranger"> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr6x" class="static" size=6 disabled>
<button onclick="javascript:brightness(6,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr6y" class="static" size=6 disabled>
<button onclick="javascript:brightness(6,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(6,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3><p><table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadnews(6,0)">Play ID</button>
<button onclick="javascript:reset_frame(6)">Clear</button>
<p>
<input type=text id="id6" maxlength=256 class="idspec" onfocus="javascript:hidelist(6)"
  onclick="javascript:input_onclick('id6')" onblur="javascript:input_onblur('id6')">
<p>
<select id="stk6" size=1 class="stack"><option value="">Select a video stack</select>
<p>
<select id="src6" size=1 class="sites">
  <option value= 0 >YouTube / Invidious &nbsp; &nbsp;
  <option value= 1 >+ mp4 - Fox
  <option value= 2 >+ mp4 - ABC
  <option value= 3 >? m3u - CBS
  <option value= 4 >+ mp4 - CNBC
  <option value= 5 >? mp4 - CNN
  <option value= 6 >? m3u - C-SPAN
  <option value= 7 >+ mp4 - MS/NBC
  <option value= 8 >+ m3u - PBS
  <option value= 11>+ mp4 - CBC
  <option value= 12>+ mpd - CTV
  <option value= 13>+ mp4 - Global
  <option value= 14>+ mp4 - TVO
  <option value= 21>+ mpd - BBC
  <option value= 24>? m3u - Press TV
  <option value= 22>+ mp4 - Al Jazeera
  <option value= 25>+ mp4 - Bloomberg
</select>
<p>
<input type=checkbox id="mov6f" checked> Format (m3u8)&nbsp;
<input type=checkbox id="mov6p" checked> Use Proxy
<p>
<select id="fmt6" size=6 class="basic">
  <option value=18>mp4 - [18] 360p *
  <option value=19>mp4 - [19] 480p *
  <option value=22>mp4 - [22] 720p *
  <option value=43>webm  [43] 360p *
  <option value=44>webm  [44] 480p *
  <option value=45>webm  [45] 720p *
</select>
<p>
<select id="win6" size=1 class="basic">
  <option value="320:180">[16:9] 320 x 180
  <option value="480:270">[16:9] 480 x 270
  <option value="640:360">[16:9] 640 x 360
  <option value="960:540">[16:9] 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">[4:3] 240 x 180
  <option value="360:270">[4:3] 360 x 270
  <option value="480:360">[4:3] 480 x 360
  <option value="720:540">[4:3] 720 x 540
  <option value="960:720">[4:3] 960 x 720
</select>
<p>
<button id="btn6a" class="is_off" onclick="javascript:buttonpress(6,0)">New Window</button>
<button id="btn6b" class="is_off" onclick="javascript:buttonpress(6,1)">Popup Window</button>
<p>
<input type=checkbox id="mov6m"> Allow Multiple&nbsp;
<input type=checkbox id="mov6n"> No Play
<p></p>
<input type=radio id="mov6a" name="chk6"> Raw
<input type=radio id="mov6b" name="chk6" checked><button onclick="javascript:toggle_hls(6,0)"
  class="wrapper" id="hls6">Wrapper</button><input type=radio id="mov6c" name="chk6"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><h2 id="vid6" class="msgbox">No Video</h2><div class="popbox" id="pop6"></div>
<iframe id="mov6" name="mov6" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadnews(6,1)">Play URL</button>
<button onclick="javascript:urlcopy(6)">Copy</button>
<button onclick="javascript:dignews(6)"><b_>DIG</b_></button>&nbsp;

<input type=text id="line6" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line6')" onblur="javascript:input_onblur('line6')">

<p style="text-align:center">
<button class="copy" id="stk6-1" onclick="javascript:copylist(6,11)">Stack 1</button>
<button class="copy" id="stk6-2" onclick="javascript:copylist(6,12)">Stack 2</button>
<button class="copy" id="stk6-3" onclick="javascript:copylist(6,13)">Stack 3</button>
&nbsp;
<button class="copy" id="stk6-4" onclick="javascript:copylist(6,14)">Fox</button>
<button class="copy" id="stk6-5" onclick="javascript:copylist(6,15)">PBS</button>
<button class="copy" id="stk6-6" onclick="javascript:copylist(6,16)">BBC</button>
</p>
<div style="width: 90vw; height: 30vh"></div>

<!--
////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////
//-->

<h3 id="free" style="padding-top:5px"><r_>FREE Movies & TV</r_>
  <small>&nbsp;--&nbsp; Go to <a href="#movies">Movie Sites</a> or <a href="#sites">Info/News</a>
  &nbsp; | &nbsp; <a href="#free">snap</a> &nbsp; &nbsp;

<select id="ctr7z" size=1 class="small">
  <option value=11>Youtube.com
  <option value=12>Genyoutube.net
  <option value=13>Y2meta.net
  <option value=1 >invidio.us
  <option value=2 >invidious.snopyta.org
  <option value=10 selected>Youtube DASH
</select>&nbsp;

<span class="ranger"> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr7x" class="static" size=6 disabled>
<button onclick="javascript:brightness(7,2)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr7y" class="static" size=6 disabled>
<button onclick="javascript:brightness(7,4)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:brightness(7,5)">&nbsp;Reset&nbsp;</button>
</span>
</small></h3><p><table><tr><td class="textbox">

<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button>
<button onclick="javascript:loadmovie(7,0)">Play ID</button>
<button onclick="javascript:reset_frame(7)">Clear</button>
<p>
<input type=text id="id7" maxlength=256 class="idspec" onfocus="javascript:hidelist(7)"
  onclick="javascript:input_onclick('id7')" onblur="javascript:input_onblur('id7')">
<p>
<select id="stk7" size=1 class="stack"><option value="">Select a radio/TV stack</select>
<p>
<select id="src7" size=1 class="sites">
  <option value= 0 >YouTube / Invidious &nbsp; &nbsp; &nbsp;
  <option value= 1 >+ m3u - TubiTV
  <option value= 2 >+ m3u - VidNode
  <option value= 3 >? mp4 - 123Movies
  <option value= 4 >? mp4 - StreamLord
  <option value= 5 >? m3u - UniqueStream
  <option value= 8 ># mp4 - XHamster
  <option value= 10>? mp4 - General DIG
  <option value= 16># mp4 - ClipWatching
  <option value= 15># mp4 - CloudVideo
  <option value= 12># mp4 - GoUnlimited
  <option value= 19># mp4 - ProStream
  <option value= 17># m3u - UpStream
  <option value= 14># mp4 - VideoBin
  <option value= 13># mp4 - VidLox
  <option value= 18># mp4 - Vidoza
  <option value= 11># mp4 - XStream
  <option value= 31>+ mp3 - AudioRealm
</select>
<p>
<input type=checkbox id="mov7f" checked> Format (m3u8)&nbsp;
<input type=checkbox id="mov7p" checked> Use Proxy
<p>
<select id="fmt7" size=6 class="basic">
  <option value=18>mp4 - [18] 360p *
  <option value=19>mp4 - [19] 480p *
  <option value=22>mp4 - [22] 720p *
  <option value=43>webm  [43] 360p *
  <option value=44>webm  [44] 480p *
  <option value=45>webm  [45] 720p *
</select>
<p>
<select id="win7" size=1 class="basic">
  <option value="320:180">[16:9] 320 x 180
  <option value="480:270">[16:9] 480 x 270
  <option value="640:360">[16:9] 640 x 360
  <option value="960:540">[16:9] 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">[4:3] 240 x 180
  <option value="360:270">[4:3] 360 x 270
  <option value="480:360">[4:3] 480 x 360
  <option value="720:540">[4:3] 720 x 540
  <option value="960:720">[4:3] 960 x 720
</select>
<p>
<button id="btn7a" class="is_off" onclick="javascript:buttonpress(7,0)">New Window</button>
<button id="btn7b" class="is_off" onclick="javascript:buttonpress(7,1)">Popup Window</button>
<p>
<input type=checkbox id="mov7m"> Allow Multiple&nbsp;
<input type=checkbox id="mov7n"> No Play
<p></p>
<input type=radio id="mov7a" name="chk7"> Raw
<input type=radio id="mov7b" name="chk7" checked><button onclick="javascript:toggle_hls(7,0)"
  class="wrapper" id="hls7">Wrapper</button><input type=radio id="mov7c" name="chk7"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><h2 id="vid7" class="msgbox">No Video</h2><div class="popbox" id="pop7"></div>
<iframe id="mov7" name="mov7" sandbox="allow-scripts allow-same-origin allow-forms"
  autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadmovie(7,1)">Play URL</button>
<button onclick="javascript:urlcopy(7)">Copy</button>
<button onclick="javascript:digmovie(7)"><b_>DIG</b_></button>&nbsp;

<input type=text id="line7" maxlength=2048 class="urlspec"
  onclick="javascript:input_onclick('line7')" onblur="javascript:input_onblur('line7')">

<p style="text-align:center">
<button class="copy" id="stk7-1" onclick="javascript:copylist(7,-21)">Radio</button>
<button class="copy" id="stk7-2" onclick="javascript:copylist(7,-22)">Dance</button>
&nbsp;
<button class="copy" id="stk7-3" onclick="javascript:copylist(7,-23)">TV US1</button>
<button class="copy" id="stk7-4" onclick="javascript:copylist(7,-24)">TV US2</button>
<button class="copy" id="stk7-5" onclick="javascript:copylist(7,-25)">TV US3</button>
&nbsp;
<button class="copy" id="stk7-6" onclick="javascript:copylist(7,-26)">TV UK+</button>
<button class="copy" id="stk7-7" onclick="javascript:copylist(7,-27)">TV Alt</button>
&nbsp;
<button class="copy" id="stk7-8" onclick="javascript:copylist(7,-28)">Int'l 1</button>
<button class="copy" id="stk7-9" onclick="javascript:copylist(7,-29)">Int'l 2</button>
</p>

<div style="width: 90vw; height: 30vh"></div>

<!--
//////////////////////////
///// INTERNET RADIO /////
//////////////////////////
//-->

<h1 style="text-align:center"><r_>Internet Radio</r_></h1>

<div align=center>
<button onclick="javascript:ir_action(0)">Stop</button>
<button onclick="javascript:ir_action(1)">Pause</button>
<button onclick="javascript:ir_action(2)">Play</button> &nbsp;
<input type=text value="Stopped" size=10 class="static" id="ir_status" disabled> &nbsp;
<button onclick="javascript:ir_action(3)" class="is_off" id="ir_popup">Popup</button>
&nbsp;&nbsp; Volume :&nbsp;
<button onclick="javascript:ir_action(4)" style="font-size:13px">&lt;</button>
<input type=text value="50" size=3 class="static" id="ir_volume" disabled>
<button onclick="javascript:ir_action(5)" style="font-size:13px">&gt;</button>
</div>
<p>

<table style="width:100%">

 <tr><th>Talk Radio
</th><th>Cool Music
</th><th>Funky Music
</th><th>Just Garbage
</th><th>More Garbage
</th></tr><tr><td style="padding:4px"></td></tr><tr>

<td><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://streaming-ent.shoutcast.com/foxnews')">Fox News Talk
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://radio.talkradio.co.uk/stream')">Talk Radio UK
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://20803.live.streamtheworld.com/CFRBAMAAC_SC')">Conservative Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://216.240.133.178:3005/;')">Republic Broadcasting
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://mediaserver3.afa.net:8443/talk.mp3')">American Family Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://edge2-b.exa.live365.net/a81754')">Good Talk Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://stream.infowars.com/;')">InfoWars Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://18593.live.streamtheworld.com/BLZE_1AAC.aac')">The Blaze Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://s2.radio.co/s572ad25f7/listen')">Red State Talk
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://streamer.radio.co/s43edd6852/listen')">The Fringe FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://tfrlive.net:8000/stream')">Truth Frequency Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://live1.darkmatterdigitalnetwork.com:8303/stream')">Dark Matter Digital
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://darnwi.com:8000/stream')">Devil's Advocates Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://cast.bbstalkradio.com/proxy/bbsradio2?mp=/stream')">BBS Talk Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://ice8.securenetsystems.net/VARIETY')">Voice America
</td>

<td><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://85.25.43.55/rock_classics.mp3')">Star FM Rock Classics
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://91.121.222.81:8416/listen.mp3')">Rock Radio Beograd
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://shoutcastunlimited.com:8890/;')">Lynx Classic Rock
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://jamfm.hoerradar.de/jamfm-mp3-128')">Jam FM Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://62.210.10.4:8928/stream/1/')">Gem Radio New Wave
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://149.56.183.178:8090/;')">Retro Hits
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://stream.dancewave.online:8080/dance.mp3')">Dance Wave
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://192.99.18.107:8106/;')">Salsa Mexico
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://82.78.191.161:8010/;')">Doctor FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://nl1.lounge-radio.com:8010/;')">Lounge Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://fr3.1mix.co.uk:8000/stats/;')">1Mix Radio Trance
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://centova.radioservers.biz:8021/;')">Starlite Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel1.mp3')">Virtual DJ: ClubZone
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel2.mp3')">Virtual DJ: TheGrind
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel3.mp3')">Virtual DJ: Hypnotica
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel4.mp3')">Virtual DJ: PowerBase
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://janus.cdnstream.com:5140/live')">Radio Free Americana
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://sc01.warpradio.com:8212/;')">Smooth Jazz Expressions
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://109.123.116.202:8016/;')">Venice Classic Radio Italia
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://tropicalisima.org:9002/;')">Tropicalisma FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://lin3.ash.fastserv.com:6026/stream_96')">Rockabilly Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://91.121.91.172:9414/;stream/1')">Dandelion Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://hi.entranced.fm:80/;')">Entranced FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://46.105.118.14:17500/;')">Spexx FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1_mf_q')">BBC Radio 1
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1xtra_mf_q')">BBC Radio 1-Extra
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio2_mf_q')">BBC Radio 2
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio3_mf_q')">BBC Radio 3
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4fm_mf_q')">BBC Radio 4
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4extra_mf_q')">BBC Radio 4-Extra
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio5live_mf_q')">BBC Radio 5-Live
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bbcmedia.ic.llnwd.net/stream/bbcmedia_6music_mf_p')">BBC Radio 6-Music
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://server-14.stream-server.nl:8300/;')">Nashville FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://cp9.serverse.com:7362/autodj')">Bluegrass Jamboree
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://shoutcast.countrypowerstation.net:8000/;')">Country Power Station
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://s10.voscast.com:8872/;')">Wu World Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('8tilKaOINmE')"><w_>Danheim: <i>Mannavegr</i></w_>
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('RM_J5cFy70M')"><w_>Audiomachine: <i>Decimus</i></w_>
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('w6MiJUTZ6n8')"><w_>Classic Rock - Greatest Hits</w_>
</td>

<td><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('https://el-dorado.stream.laut.fm/el-dorado')">Radio El Dorado
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://111.223.51.7:8000/;stream/1/')">COOL fahrenheit
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://bluford.torontocast.com:8519/;')">Asia Dream Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://hi5.streamingsoundtracks.com:80/;')">Streaming Sound Tracks
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://136.0.17.26:8000/;')">Radio Africa Online
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://195.154.217.103:8123/;')">Radio Mi Amigo Int'l
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://jakarta.nagaswarafm.com:8088/stream')">Nagaswara FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://46.105.118.14:7550/;')">BeMyRadio Schlager
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://174.37.159.206:8118/;')">iRie Rockers
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://162.244.80.106:8108/;')">Tune Disney Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://94.23.148.11:8130/;')">SRC FM
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('http://217.146.71.146:8000/live2')">Rahva Radio
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('I-opRM8v0p8')"><w_>Johnny Cash</w_>
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('JMmpmHdnXK4')"><w_>Creedence Clearwater Revival</w_>
<br><input type=radio name="ir" class="ir" onclick="javascript:radio
  ('kW0Fy88ilEs')"><w_>Beatles: <i>White Album</i></w_>
</td>

<tr><td></td></tr></table>

<p><div align=center>
<audio id="internet_radio" controls style="width:85vw;height:45px" onerror="javascript:ir_action(-2)"></audio>
<p><input type=text class="urlspec" id="ir_url"
  onclick="javascript:input_onclick('ir_url')" onblur="javascript:input_onblur('ir_url')">
<p><a href="#info">Info</a>&nbsp; | &nbsp;<a href="#news">News</a>&nbsp; | &nbsp;<a href="#free">Movies</a>
<p>

</div><div style="width: 90vw; height: 3vh"></div>

</body>

<!--
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="https://reference.dashif.org/dash.js/v2.5.0/dist/dash.all.min.js"></script>
<script src="https://players.akamai.com/hls/dist/hls.min.js"></script>

HLS version downgraded because latest version does not play Akamai videos
DASH version upgraded to latest version as of December 2019
//-->

<script src="https://cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js"></script>
<script src="https://reference.dashif.org/dash.js/v3.0.1/dist/dash.all.min.js"></script>
<script id="cryptojs"></script>  <!-- dynamically loaded script -->
<script>

/////////////////////////
///// User Settings /////
/////////////////////////

var invidious_site = [
  "https://invidio.us",			// default
  "https://invidio.us",
  "https://invidious.snopyta.org"
];

var invidious_url = invidious_site [0];

//  "https://invidiou.sh",		// no livestream + bot blocker
//  "https://yewtu.be",			// api blocked

// these are non-functional
//  "https://invidious.mastodon.host",
//  "https://invidious.kabi.tk",
//  "https://invidious.enkirton.net",
//  "https://watch.nettohikari.com",
//  "https://invidious.drycat.fr",
//  "https://invidious.13ad.de",
//  "https://invidious.nixnet.xyz",
//  "https://tube.poal.co",
//  "https://vid.wxzm.sx",
//  "https://yt.elukerio.org"

var list_1 = [
    ":NOZKLtIIUZE" , "Hitler Rant"
  , ":m_MaJDK3VNE" , "Herding Cats"
  , ":hTa1t_9HfFQ" , "Mike Hammer"
  , ":uaPKEbVypRQ" , "Typing Lesson"
  , ":0fDOdzY18XE" , "V - The Miniseries"
  , ":kJAsn_vJyY4" , "Starship Enterprise"
];

var list_2 = [
    ":We-HMZDSWFU" , "Me and You and a Dog Named Boo"
  , ":8Pa9x9fZBtY" , "Sultans of Swing"
  , ":6Ath-3JGk8M" , "Flashdance: What A Feeling"
  , ":onJspmvJr0E" , "Flashdance: Love's Theme"
  , ":FnV0LqHd3h8" , "Make America Great Again"
  , ":xB4iFysPm9Q" , "Karolina Protsenko"
];

var list_3 = [
    ":8sPWIrF0oSY" , "Jack Benny meets Perry Mason"
  , ":CGq8Ee2gOe4" , "DooM at QuakeCon"
  , ":5iV_hB08Uns" , "Boston Dynamics Robot"
  , ":0pKfxbCHLoU" , "AKB48: Sustainable"
  , ":rqU_gsBYdr0" , "Ajisai Al Ai Monogatani"
];

var list_4 = [
    "b:fmOZPrv27xs"  , "Dil Jaaniye"
  , "b:6wNFJIbTxNk"  , "Batla House"
  , "b:sSKnCoWAbDos" , "Brother Nathaniel"
  , "b:A7jZJfaEJK2p" , "Malice in the Palace"
  , "b:Ol2plIF2otcI" , "QAnon Proofs"
];

var list_5 = [
    "v:129463420" , "Miniatur Wunderland"
  , "v:166403522" , "Some Kind of Quest"
  , "v:31883614"  , "Star Trek: Aurora"
  , "v:322694559" , "Great Martian War"
  , "v:175806163" , "Martian American"
];

var list_6 = [
    "i:5d4c9fd22ec69a001858eb60" , "Alex Jones"
  , "i:5d4a339571d8e00017f8afaf" , "Owen Shroyer"
  , "i:5d4c54aae936660017aee3c0" , "Kaitlin Bennett"
];

var list_7 = [
    "e:*5813257309001" , "Star Trek: Kitumba"
];

var list_8 = [
];

var list_9 = [
];

var news_1 = [
];

var news_2 = [
];

var news_3 = [
];

var news_4 = [
    "fox:6041387345001" , "Steve Hilton"
  , "fox:6035600008001" , "Judge Jeanine Pirro"
];

var news_5= [
    "pbs:3007398789" , "Nova: Bird Brain (2018) [region lock]"
  , "pbs:2365338020" , "Austin City Limits: 40 Years (2014)"
  , "pbs:1946795242" , "Frontline: WikiSecrets (2011)"
];

var news_6 = [
    "bbc:p035dt58" , "Dragonfly"
  , "bbc:p076m7sh" , "Desert Art"
  , "bbc:p07bj7pv" , "Follow the Food"
];

var news_7 = [
];

var news_8 = [
];

var news_9 = [
];

var free_1 = [
    "a:" , "majic-100-7483"
  , "a:" , "chum-1045-6270"
  , "a:" , "iheartradio-top-20-7556"
  , "a:" , "the-hit-mix-7553"
  , "a:" , "z1035-7757"
  , "a:" , "canadian-rock-7552"
  , "a:" , "971-the-eagle-2241"
  , "a:" , "heavy-rock-7554"
  , "a:" , "z100-1469"
  , "a:" , "1027-kiis-fm-los-angeles-185"
  , "a:" , "y100-561"
  , "a:" , "1017-the-bull-6586"
  , "a:" , "1035-kiss-fm-849"
  , "a:" , "alt-987-los-angeles-201"
  , "a:" , "1035-ktu-1473"
  , "a:" , "1067-lite-fm-1477"
  , "a:" , "smooth-jazz-4242"
  , "a:" , "the-vinyl-experience-6878"
  , "a:" , "iheart80s-radio-5060"
  , "a:" , "lone-star-925-3379"
  , "a:" , "q1043-1465"
  , "b:clubzone"  , "Virtual DJ: ClubZone"
  , "b:thegrind"  , "Virtual DJ: TheGrind"
  , "b:hypnotica" , "Virtual DJ: Hypnotica"
  , "b:powerbase" , "Virtual DJ: PowerBase"
];

var free_2 = [
    "8:http://akaram.zecast.net/akaram-live/akarammix1/playlist.m3u8"		, "Akaram Mix (India)"
  , "/1/0/0 7:http://51.15.236.137/hls/stream.m3u8"				, "AVA Music (Afghanistan)"
  , "8:http://vcndstv.teleosmedia.com/stream/dstv/dstv/playlist.m3u8"		, "DanceStar TV (US)"
  , "8:http://azroe0x-lh.akamaihd.net/i/test_1@775856/master.m3u8"		, "Ditty TV (US)"
  , "/1/540.1/0 8:https://www.djing.com/tv/animation.m3u8"			, "DJing: Animation (UK)"
  , "/1/540.1/1 8:https://www.djing.com/tv/session_electro-rock.m3u8"		, "DJing: Electro Rock (UK)"
  , "/1/540.1/0 8:https://www.djing.com/tv/underground.m3u8"			, "DJing: Underground (UK)"
  , "/0/540.1/0 7:http://live.dogannet.tv/S1/HLS_LIVE/dreamtv/1000/prog_index.m3u8" , "Dream TV (Turkey)"
  , "8:http://vcnindiewave.teleosmedia.com/stream/indiewave/indiewave/playlist.m3u8" , "Indie Wave (US)"
  , "8:http://bitcdn-kronehit.bitmovin.com/v2/hls/index.m3u8"			, "KroneHit TV (Austria)"
  , "8:http://186.155.200.118:1935/live/MelodyChannel/playlist.m3u8"		, "Melody Channel (Colombia)"
  , "8:http://live-edge01.telecentro.net.ar/live/smil:musictop.smil/index.m3u8" , "Music Top (Argentina)"
  , "8:http://nancy-webtv.vedge.infomaniak.com/livecast/nancy-webtv/playlist.m3u8" , "Nancy Web TV (France)"
  , "0:HS7ulzLL034"								, "Nature TV (YouTube)"
  , "8:http://live.streams.ovh:1935/NGradio/NGradio/playlist.m3u8"		, "NG Radio (Greece)"
  , "8:https://5be019f0d8c6e.streamlock.net/ngroup/ngrp:NRJHitsTV_all/playlist.m3u8" , "NRJ Hits (France)"
  , "8:http://ocko-live.ssl.cdn.cra.cz/channels/ocko_expres/playlist.m3u8"	, "Ocko Expres (Czech Republic)"
  , "8:http://pablogott.videocdn.scaleengine.net/pablogott-live/play/ooftv1/playlist.m3u8" , "Out Of Focus TV (US)"
  , "8:http://vcp1.myplaytv.com:1935/oxigenotv/oxigenotv/playlist.m3u8"		, "Oxigeno TV (US)"
  , "8:https://593b04c4c5670.streamlock.net/portalfoxmix/portalfoxmix/playlist.m3u8" , "Portal Fox Mix (Chile)"
  , "8:http://livetv.powerapp.com.tr/powertv/powerhd.smil/chunklist.sltur.m3u8"	, "Power HD (Turkey)"
  , "8:http://capital_tv-lh.akamaihd.net/i/CapitalTv_1@183098/master.m3u8"	, "Radio Capital (Italy)"
  , "8:http://wms.shared.streamshow.it/carinatv/mp4:carinatv/playlist.m3u8"	, "Radio Carina (Italy)"
  , "8:http://web.onair-radio.eu:1935/video/video/index.m3u8"			, "Reload TV (Greece)"
  , "8:http://stream.mediawork.cz/retrotv/retrotvHQ1/playlist.m3u8"		, "Retro Music (Czech Republic)"
  , "8:http://uk4.streamingpulse.com:1935/RTVZiK/RTVZiK/playlist.m3u8"		, "RTV Zeri (Denmark)"
  , "0:UX1cdPqW5M8"								, "Shuffle Dance Music (YouTube)"
  , "8:http://cdn25.live247stream.com/steelbirdmusic/tv/playlist.m3u8"		, "Steelbird Music (India)"
  , "8:http://live.stranafm.cdnvideo.ru/stranafm/smil:stranafm.smil/playlist.m3u8" , "Strana FM (Russia)"
  , "8:http://vcndstv.teleosmedia.com/stream/dstv/sunburn/playlist.m3u8"	, "Sunburn TV (US)"
  , "8:http://186.155.200.118:1935/live/telemusica_web/index.m3u8"		, "TeleMusica (US)"
  , "8:http://online.radiodifusion.net:1935/livetv/latinoSD.stream/index.m3u8"	, "Top Latino TV (Colombia)"
  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_africa/5/prog_index.m3u8"   , "Trace Africa (France)"
  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_tropical/5/prog_index.m3u8" , "Trace Tropical (France)"
  , "8:https://content.uplynk.com/channel/36953f5b6546464590d2fcd954bc89cf.m3u8" , "VH-1 (Europe-UK)"
];

var free_3 = [
    "/1/0/0/2/0/0 1a:stream=ABC 7:http://87.120.36.62:8080/hls/streama113642/index.m3u8" , "ABC ++"
  , "8:http://content.uplynk.com/channel/3324f2467c414329b3b0cc5cd987b6be.m3u8" , "ABC News"
  , "/1/0/0/2/0/0 1a:stream=AMC 1:live/amc"					, "AMC +"
  , "8:http://liveproduseast.global.ssl.fastly.net/btv/desktop/us_live.m3u8"	, "Bloomberg US"
  , "/1/0/0/2/0/0 1a:stream=CBS 7:http://87.120.36.62:8080/hls/streama111418/index.m3u8" , "CBS ++"
  , "8:https://cbsn-us-cedexis.cbsnstream.cbsnews.com/out/v1/55a8648e8f134e82a470f83d562deeca/master.m3u8" , "CBS News"
  , "/1/0/0/0/432.2/2 1a:stream=CNBC 8:https://d3sjmtxha86r3t.cloudfront.net/nbc/smil:cnbc.smil/index.m3u8" , "CNBC +"
  , "/1/0/0/2/2/2 1a:stream=CNN 8:http://1128700637.rsc.cdn77.org/LS-ATL-54548-9/index.m3u8" , "CNN +"
  , "8:http://etlive-mediapackage-fastly.cbsaavideo.com/live/manifest.m3u8"	, "ET Live"
  , "/1/0/0/2/0/0 1a:stream=FOX 7:http://87.120.36.62:8080/hls/streama113821/index.m3u8" , "Fox ++"
  , "/1/0/0/2/0/0 1a:stream=FoxBusiness 1:live/fbn"				, "Fox Business +"
  , "/1/0/0/2/2/2 1a:stream=FoxNews 8:http://1128700637.rsc.cdn77.org/LS-ATL-54548-4/index.m3u8" , "Fox News +"
  , "1c:stream=Freeform"							, "Freeform *"
  , "/1/0/0/2/0/0 1a:stream=FX 1:live/fx"					, "FX +"
  , "1b:stream=FXMovie"								, "FXM *"
  , "1b:stream=FXX"								, "FXX *"
  , "8:http://mgm-ssai.akamaized.net/amagi_hls_data_mgmAAAAAA-theworks/CDN/master.m3u8" , "MGM Sci-Fi"
  , "/1/0/0/0/0/2 1a:stream=MSNBC 8:http://1128700637.rsc.cdn77.org/LS-ATL-54548-15/index.m3u8" , "MSNBC +"
  , "/1/0/0/0/432.2/2 1a:stream=NBC 8:https://d3sjmtxha86r3t.cloudfront.net/nbc/smil:nbc.smil/index.m3u8" , "NBC ++"
  , "/1/0/0/0/2/0 1a:stream=OAN 8:http://190.80.3.29/OAN/OAN.isml/index.m3u8"	, "OAN +"
  , "/1/0/0/2/0/0 1a:stream=PBS 8:http://190.80.3.29/PBS/PBS.isml/index.m3u8"	, "PBS ++"
  , "/0.1/0.1/0.1 7:https://live-poptv-fastly-prod.global.ssl.fastly.net/pop/master.m3u8" , "Pop TV"
  , "8:https://dotstudio.vo.llnwd.net/v1/livestreams/popstar/master/ec9207ed6819582289cfdc7569d8065cc8aca126/Popstar_-_Frequency/playlist.m3u8"
    , "PopStar!"
  , "1b:stream=SundanceTV"							, "Sundance *"
  , "/1/0/0/2/0/0 1a:stream=SYFY 1:live/syfy"					, "Syfy +"
  , "/1/0/0/2/0/0 1a:stream=TBS 1:live/tbs"					, "TBS +"
  , "/1/0/0/2/0/0 1b:stream=CW 1:live/cw"					, "The CW +"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1234A-tmz/CDN/master.m3u8" , "TMZ"
  , "/1/0/0/2/0/0 1a:stream=TNT 1:live/tnt"					, "TNT +"
  , "/1/0/0/2/0/0 1a:stream=USANetwork 1:live/usa"				, "USA Network +"
  , "8:http://voa-lh.akamaihd.net/i/voa_mpls_tvmc6@320298/master.m3u8"		, "Voice of America"
  , "1b:stream=WETV"								, "We TV *"
  , "8:http://weather-lh.akamaihd.net/i/twc_1@92006/master.m3u8"		, "Weather Channel"
  , "8:http://cdnapi.kaltura.com/p/931702/sp/93170200/playManifest/entryId/1_oorxcge2/format/applehttp/protocol/http/uiConfId/28428751/a.m3u8"
    , "WeatherNation TV"
  , "8:http://wgntribune-lh.akamaihd.net/i/WGNPrimary_1@304622/master.m3u8"	, "WGN Tribune"
];

var free_4 = [
    "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-adventuresportsnetwork/CDN/master.m3u8"
    , "Adventure Sports"
  , "/1/0/0/2/0/0 1b:stream=DIY 1:live/diy"					, "DIY Network +"
  , "8:https://imgedge.akamaized.net/amagi_hls_data_imgAAA2AA-edgesports/CDN/playlist.m3u8" , "EDGE Sport"
  , "8:https://broadcaster1.prolivestream.net:8083/onair/ezwaytv/playlist.m3u8" , "EZWay TV"
  , "8:http://bozztv.com/36bay2/gin/giniko_fashionone_800kb_36bay2/index.m3u8" , "Fashion One"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-food52/CDN/master.m3u8" , "Food 52"
  , "/1/0/0/2/0/0 1a:stream=HGTV 1:live/hgtv"					, "HGTV +"
  , "8:http://1111296894.rsc.cdn77.org/LS-ATL-56868-1/index.m3u8"		, "Hunt Channel"
  , "8:http://173.199.158.79:1935/roku/myStream/playlist.m3u8"			, "Kool TV"
  , "8:http://ott.mobcrush.com/hls/0/ott.m3u8"					, "Mobcrush"
  , "1b:stream=MotorTrend"							, "Motor Trend *"
  , "8:http://rbmn-live.akamaized.net/hls/live/590964/BoRB-AT/master.m3u8"	, "Red Bull TV"
  , "8:http://dcunilive28-lh.akamaihd.net/i/dclive_1@624563/master.m3u8"	, "Rev'n TV"
  , "8:https://d2klx6wjx7p5vm.cloudfront.net/Rooster-teeth/ngrp:Rooster-teeth_all/playlist.m3u8" , "Rooster Teeth"
  , "8:http://runway-hls.secdn.net/runway-live/play/runway/playlist.m3u8"	, "Runway TV"
  , "8:http://tastemadessai.akamaized.net/amagi_hls_data_tastemade-tastemade/CDN/master.m3u8" , "Tastemade"
  , "8:http://trinity-lh.akamaihd.net/i/ttmain_d@82127/master.m3u8"		, "Tastytrade"
  , "8:http://content.uplynk.com/channel/1831163f97674328ad9f4b4814ed39c5.m3u8" , "TBD (Sinclair)"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/1524/streams/live/iphone/playlist.m3u8" , "TWiT"
  , "8:http://web.onair-radio.eu:1935/wixlar/wixlar/playlist.m3u8"		, "Wixlar TV"
  , "8:http://vcnxcorps.teleosmedia.com/stream/xcorps/xcorps/playlist.m3u8"	, "Xcorps TV"
  , "8:https://imavex2.mmdlive.lldns.net/imavex2/46320b2319cf49d7bf68f70cc4a10c98/playlist.m3u8" , "You Too America"
  , "1a:stream=ESPN"								, "ESPN 1 *"
  , "1b:stream=ESPN2"								, "ESPN 2 *"
  , "/1/0/0/2/0/0 1b:stream=FS1 1:live/fs1"					, "Fox Sports 1 +"
  , "/1/0/0/2/0/0 1b:stream=FS2 1:live/fs2"					, "Fox Sports 2 +"
  , "1a:stream=GOLF"								, "Golf Channel *"
  , "/1/0/0/2/0/0 1b:stream=NBA 1:live/nbatv"					, "NBA TV +"
  , "/1/0/0/2/0/0 1b:stream=NBCSN 1:live/nbcsn"					, "NBC Sports +"
  , "/1/0/0/2/0/0 1c:stream=NFL 1:live/nfltv"					, "NFL Network +"
  , "/1/0/0 1:live/nhltv"							, "NHL TV **"
  , "/0/432.1/0 7:http://ott-live.olympicchannel.com/out/u/OC1_3.m3u8"		, "Olympic Channel"
  , "8:http://bcovlive-a.akamaihd.net/6b4f1a5aed2b46d6a139e3cb83f8dc42/us-east-1/5994000126001/8036529875f74c81b5f50851bffbc421/playlist_ssaiM.m3u8"
    , "Stadium TV"
  , "8:https://playoutengine.sinclairstoryline.com/playout/9f87522c-5a0e-4ff4-b82c-d5564216132f.m3u8" , "Tennis Channel"
  , "/1/0/0/2/0/0 1b:stream=WWE 1:live/wwe"					, "WWE Network +"
];

var free_5 = [
    "8:http://247retrotv.com:1935/live/smil:247retro.smil/playlist.m3u8"	, "24/7 Retro TV"
  , "/1/0/0 1:live/ahc"								, "American Heroes **"
  , "8:http://170.178.189.66:1935/live/Stream1/playlist.m3u8"			, "American Horrors"
  , "8:*,,*http://video.blivenyc.com/broadcast/prod/2061/22/desktop-playlist.m3u8" , "American Kennel Club *"
  , "/1/0/0/2/0/0 1a:stream=Animal 1:live/animalplanet"				, "Animal Planet +"
  , "8:http://livecdnh3.tvanywhere.ae/hls/boomerang/index.m3u8"			, "Boomerang (UK)"
  , "/1/0/0/2/0/0 1a:stream=CN 1:live/ctnw"					, "Cartoon Network +"
  , "8:http://classicarts.global.ssl.fastly.net/live/cas/master.m3u8"		, "Classic Arts Showcase"
  , "1a:stream=Comedy"								, "Comedy Central *"
  , "8:http://content.uplynk.com/channel/87c82188ea944bcb961c34236b9648b0.m3u8" , "Court TV"
  , "8:https://cbsta49f-dabl68fc.global.ssl.fastly.net/out/v1/dfecb53fbf434b6bbbfd91d8a2549381/manifest.m3u8"
    , "Dabl Lifestyle"
  , "/1/0/0/2/0/0 1a:stream=Discovery 1:live/discovery"				, "Discovery Channel +"
  , "1a:stream=Disney"								, "Disney Channel *"
  , "8:http://livecdnh3.tvanywhere.ae/hls/docubox/index.m3u8"			, "Docubox Live"
  , "8:https://cinedigm.vo.llnwd.net/conssui/amagi_hls_data_xumo1234A-docuramaA/CDN/master.m3u8" , "Docurama Channel"
  , "8:https://cinedigm.vo.llnwd.net/conssui/amagi_hls_data_xumo1234A-dovenow/CDN/master.m3u8" , "Dove Channel"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmriseclassictv/CDN/master.m3u8"
    , "FilmRise Classic TV"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-filmrisefreemovies/CDN/master.m3u8"
    , "FilmRise Free Movies"
  , "1a:stream=HMM"								, "Hallmark Movies & Mysteries *"
  , "/1/0/0/2/0/0 1a:stream=HBO 1:live/hbo"					, "HBO - Home Box Office +"
  , "/1/0/0/2/0/0 1a:stream=History 1:live/history"				, "History Channel +"
  , "1b:stream=HLN"								, "HLN - Headline News *"
  , "/1/0/0/2/0/0 1a:stream=ID 1:live/id"					, "Investigation Discovery +"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1234A-lawcrime/CDN/master.m3u8" , "Law & Crime"
  , "1b:stream=LifetimeM"							, "Lifetime Movies *"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo_people/index.m3u8"		, "Nat Geo People (UK)"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo_wild/index.m3u8"		, "Nat Geo Wild (UK)"
  , "8:http://livecdnh1.tvanywhere.ae/hls/nat_geo/index.m3u8"			, "National Geographic (UK)"
  , "/1/0/0/2/0/0 1a:stream=Nickelodeon 1:live/nick2"				, "Nickelodeon +"
  , "/1/0/0/2/0/0 1b:stream=Science 1:live/sci"					, "Science Channel +"
  , "8:http://vcnleomarkstudios.teleosmedia.com/stream/leomarkstudios/screamfest/playlist.m3u8" , "Scream Fest"
  , "/1/0/0/2/0/0 1a:stream=Showtime 1:live/showtime"				, "Showtime +"
  , "8:https://streamingserver001.viewtvgroup.com/kapanglivetv-uksat-truemovies/index.m3u8" , "Sony Movies"
  , "1a:stream=TCM"								, "TCM - Turner Classic Movies *"
  , "/1/432.1/1 8:http://dai2.xumo.com/xumocdn/p=roku/amagi_hls_data_xumo1212A-theasylum/CDN/master.m3u8" , "The Asylum"
];

var free_6 = [
    "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=14"				, "BBC 1"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=25"				, "BBC 2"
  , "/0/1/0 7:https://streamonion.com/manager/uk/fo/fo_fw.m3u8?cid=27"				, "BBC News"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-channel4/index.m3u8"	, "Channel 4"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-channel5/index.m3u8"	, "Channel 5"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-dave/index.m3u8"		, "Dave TV"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-itv1/index.m3u8"		, "ITV 1"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-itv2/index.m3u8"		, "ITV 2"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-itv3/index.m3u8"		, "ITV 3"
  , "8:http://streamingserver003.viewtvgroup.com/kapanglivetv-uksat-itv4/index.m3u8"		, "ITV 4"
  , "8:http://d59pscns5ugc8.cloudfront.net/cdhls/skynewsamericas/1013/live/index.m3u8"		, "Sky News UK"
  , "8:https://stream.skynewsarabia.com/hls/sna.m3u8"						, "Sky News Arabia"
  , "8:http://securecontributions.sechls01.visionip.tv/live/securecontributions-securecontributions-spotlighttv-hsslive-25f-SD/master.m3u8"
    , "Spotlight TV"
  , "8:http://csm-e.cds1.yospace.com/csm/live/74246610.m3u8" , "TG 4 (Ireland)"
  , "8:http://live.alsace20.fr/live/alsace20/ngrp:alsace20_all/playlist.m3u8" , "Alsace 20 (France)"
  , "8:http://mv2.tvfrancophonie.org/live/Stream1/index.m3u8" , "TV Francophonie (France)"
  , "8:http://streamcast.oc3n.net:1935/TVPI/myStream700.sdp/live.m3u8" , "TVPI (France)"
  , "8:http://static.france24.com:80/live/F24_EN_HI_HLS/live_tv.m3u8" , "France 24 - English"
  , "8:http://static.france24.com:80/live/F24_FR_HI_HLS/live_tv.m3u8" , "France 24 - French"
  , "8:http://static.france24.com:80/live/F24_AR_HI_HLS/live_tv.m3u8" , "France 24 - Arabic"
  , "/0/540.1/0 7:http://livecbcdai-i.akamaihd.net/hls/live/567245/event2/CBCNN/master1.m3u8" , "CBC News (Canada)"
  , "/0/540.1/0 7:http://cbclivedai5-i.akamaihd.net/hls/live/567235/event2/CBOT/master1.m3u8" , "CBOT (Ottawa)"
  , "8:**https://www.streamaway.net/us/ctvnews/index.m3u8"	, "CTV News **"
  , "8:**https://www.streamaway.net/us/space/index.m3u8"	, "CTV Sci-Fi Channel **"
  , "/404.1/0/0 3a:id=205"					, "CFTO (Toronto) *"
  , "/404.1/0/0 3a:id=207"					, "City TV (Toronto) *"
  , "/404.1/0/0 3a:id=208"					, "TV Ontario *"
  , "8:http://teleqmmd.mmdlive.lldns.net/teleqmmd/f386e3b206814e1f8c8c1c71c0f8e748/master.m3u8" , "Tele-Quebec"
  , "8:https://2-fss-2.streamhoster.com/pl_138/201748-1282640-1/playlist.m3u8" , "Newfoundland TV"
  , "8:http://knstream1.azureedge.net/knlive/knlive.m3u8" , "Knowledge Network (BC)"
];

var free_7 = [
    "8:http://rt-news-gd.secure2.footprint.net/1103.m3u8" , "RT News"
  , "8:http://rt-doc-gd.secure2.footprint.net/1101.m3u8"  , "RT Documentary"
  , "8:https://live2.presstv.com/liveprs/smil:liveprs.smil/playlist.m3u8" , "Press TV"
  , "8:http://aljazeera-eng-hd-live.hls.adaptive.level3.net/aljazeera/english2/index.m3u8" , "Al Jazeera"
  , "8:https://api.trtworld.com/livestream/v1/WcM3Oa2LHD9iUjWDSRUI335NkMWVTUV351H56dqC/master.m3u8" , "TRT World"
  , "8:https://news.cgtn.com/resource/live/english/cgtn-news.m3u8" , "CGTN News"
  , "8:https://news.cgtn.com/resource/live/document/cgtn-doc.m3u8" , "CGTN Documentary"
  , "8:https://live.chdrstatic.com/cbn/primary/index.m3u8" , "Cheddar News"
  , "8:https://live.chdrstatic.com/cheddar/index.m3u8" , "Cheddar Business"
  , "8:http://broadcastny.yournewsnet.com:8081/master/newsnetweb/playlist.m3u8" , "NewsNet Live"
  , "8:http://nmxlive.akamaized.net/hls/live/529965/Live_1/index.m3u8" , "NewsMax TV"
  , "8:http://edge.free-speech-tv-live.top.comcast.net/out/u/fstv.m3u8" , "Free Speech TV"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream-infostream/_definst_/live.m3u8" , "InfoWars Live"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream2-infostream2/_definst_/live.m3u8" , "InfoWars 2"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream3-infostream3/_definst_/live.m3u8" , "InfoWars 3"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream4-infostream4/_definst_/live.m3u8" , "InfoWars 4 [down]"
  , "8:http://infostream.secure.footprint.net/hls-live/infostream5-infostream5/_definst_/live.m3u8" , "InfoWars 5"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC1_1@500806/master.m3u8" , "C-SPAN 1"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC2_1@500807/master.m3u8" , "C-SPAN 2"
  , "/108.1/0/0 7:http://skystreams-lh.akamaihd.net/i/SkyC3_1@500808/master.m3u8" , "C-SPAN 3"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680602/1242843915001_1/master.m3u8" , "CPAC - English"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680604/1242843915001_3/master.m3u8" , "CPAC - French"
  , "8:https://bcsecurelivehls-i.akamaihd.net/hls/live/680603/1242843915001_2/master.m3u8" , "CPAC - Bilingual"
  , "8:https://w1.013.gostreaming.tv/Knesset/myStream/playlist.m3u8" , "Knesset Channel"
  , "8:http://bcliveunivsecure-lh.akamaihd.net/i/un150_A1_1@575439/master.m3u8" , "UN Web TV"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253565/NASA-NTV1-Public/master.m3u8" , "NASA Official **"
  , "8:*www.nasa.gov,,*https://nasa-i.akamaihd.net/hls/live/253566/NASA-NTV2-Media/master.m3u8" , "NASA Media **"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/6540154/streams/live/iphone/playlist.m3u8" , "NASA Official"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/10414700/streams/live/iphone/playlist.m3u8" , "NASA Media"
  , "/0.1/0.1/0.1 7:http://iphone-streaming.ustream.tv/uhls/17074538/streams/live/iphone/playlist.m3u8" , "NASA ISS"
];

var free_8 = [
    "8:https://nhkworld.webcdn.stream.ne.jp/www11/nhkworld-tv/global/2003458/live.m3u8" , "NHK World Japan"
  , "8:http://ebsonair.ebs.co.kr:1935/ebs2familypc/familypc1m/index.m3u8" , "EBS-2 (South Korea)"
  , "8:http://rthklive2-lh.akamaihd.net/i/rthk32_1@168450/master.m3u8" , "RTHK-32 (Hong Kong)"
  , "0:e1GRWeLfBPM" 		, "Kompas TV (Indonesia, YouTube)"
  , "8:https://1345225764.rsc.cdn77.org/LS-50041-SIN-2/index.m3u8" , "PNN (Cambodia)"
  , "0:vCDDYb_M2B4" 		, "CCTV-4 (China, YouTube)"
  , "/0/576.1/0 7:*,,*http://zhibo.hkstv.tv/livestream/mutfysrq/playlist.m3u8" , "HKS TV (China) *"
  , "/0/1/0 7:http://live.ntdimg.com/live400/playlist.m3u8" , "NTD (US-China)"
  , "8:http://103.14.38.107:1935/live/mnb.stream/playlist.m3u8" , "MNB (Mongolia)"
  , "8:http://kazakhtvru.ultraiptv.com/live_ru/playlist.m3u8" , "Kazakh TV (Kazakhstan)"
  , "8:http://iptv.tapesh.tv/tapesh/playlist.m3u8" , "PBC Tapesh (US-Iran)"
  , "8:http://dmisxthvll.cdn.mangomolo.com/dubaitv/smil:dubaitv.stream.smil/playlist.m3u8" , "Dubai TV (UAE)"
  , "8:http://trtcanlitv-lh.akamaihd.net/i/TRTTURK_1@182144/master.m3u8" , "TRT Turk (Turkey)"
  , "8:http://bozztv.com/36bay2/gin/giniko_armenia1tv_800kb_36bay2/index.m3u8" , "Public TV Armenia"
  , "8:http://live-echotv.cdnvideo.ru/echotv/echotv.sdp/playlist.m3u8" , "Echo TV (Russia)"
  , "8:http://hls.mirtv.cdnvideo.ru/mirtv-parampublish/mirtv3_2500/playlist.m3u8" , "Mir TV (Russia)"
  , "8:http://tvchannelstream1.tvzvezda.ru/cdn/tvzvezda/playlist.m3u8" , "Zvezda TV (Russia)"
  , "0:10NB1uujndM" 		, "Lubelska TV (Poland, YouTube)"
  , "8:https://nn.geo.joj.sk/live/jojplus-index.m3u8" , "JOJ Plus (Slovakia)"
  , "/0/0/1 7:http://stream.fs1.tv:8080/hls/webstream.m3u8" , "FS1 Salzburg (Austria)"
  , "8:http://rfo.iptv-playoutcenter.de:1935/rfo/rfo.stream_2/playlist.m3u8" , "RFO (Germany)"
  , "8:http://livestartover.atresmedia.com/antena3/master.m3u8" , "Antena-3 (Spain)"
  , "/0/1/0 7:https://live-edge-sxb-1.cdn.enetres.net/9E9557EFCEBB43A89CEC8FBD3C500247022/llive-500/index.m3u8"
    , "TeleValencia (Spain)"
  , "8:http://b2everyrai-lh.akamaihd.net/i/rai5_1@182695/master.m3u8" , "Rai-5 (Italy)"
  , "8:http://b2everyrai-lh.akamaihd.net/i/raigulp_1@66350/master.m3u8" , "Rai-Gulp (Italy)"
  , "8:http://live.streams.ovh:1935/tvfilopoli/tvfilopoli/playlist.m3u8" , "TV Filopoli (Greece)"
  , "8:http://cdnamd-hls-globecast.akamaized.net/live/ramdisk/al_aoula_inter/hls_snrt/al_aoula_inter.m3u8"
    , "Al Aoula (Morocco)"
  , "8:http://ss6.domint.net:2082/202_str/orbittv/playlist.m3u8" , "Orbit TV (Dominican Republic)"
  , "8:http://558bd16067b67.streamlock.net/nos_pais_24_7/smil:livestream.stream.smil/playlist.m3u8"
    , "Nos Pais (Curacao)"
  , "8:http://mdstrm.com/live-stream-playlist/5a7b1e63a8da282c34d65445.m3u8" , "Multimedios Costa Rica"
  , "8:http://cdn.elsalvadordigital.com:1935/wowtv/wowtv/playlist.m3u8" , "Wow! TV (El Salvador)"
  , "/0/0/1 8:http://live.canaloncelive.tv:1935/livepkgr2/smil:internacional.smil/playlist.m3u8" , "Canal Once (Mexico)"
  , "8:http://streamingcws20.com:1935/lobodurango/videolobodurango/playlist.m3u8" , "TV Lobo (Mexico)"
  , "1b:stream=Telemundo"		, "Telemundo (US)"
  , "1b:stream=Univision"		, "Univision (US)"
];

var free_9 = [
    "8:http://unlimited1-us.dps.live/atv/atv.smil/playlist.m3u8" , "Antofagasta TV (Chile)"
  , "/1/0/0 7:http://cdnh4.iblups.com/hls/OVJNKV4pSr.m3u8" , "Chicos iPe (Peru)"
  , "8:http://mdstrm.com/live-stream-playlist/57d01d6c28b263eb73b59a5a.m3u8" , "Canal Capital (Colombia)"
  , "8:http://d2ajt1gpdtnw25.cloudfront.net/mbliveMain/480p/playlist.m3u8" , "TeleSur (Venezuela)"
  , "8:https://v7.ciclano.io:1443/tvmar/tvmar/playlist.m3u8" , "TV Mar (Brazil)"
  , "8:http://wse5.player.tv.br:1935/tvmcj/tvmcj/playlist.m3u8" , "TV MCJ (Brazil)"
  , "8:http://bozztv.com/36bay2/gin/giniko_rts1_900kb_36bay2/index.m3u8" , "RTS-1 (Senegal)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti1.smil/playlist.m3u8" , "RTI-1 (Ivory Coast)"
  , "/1/0/0 7:https://www.enovativecdn.com:4433/rticdn/smil:rti2.smil/playlist.m3u8" , "RTI-2 (Ivory Coast)"
  , "8:http://bozztv.com/36bay2/gin/giniko_jordan_900kb_36bay2/index.m3u8" , "Jordan TV"
  , "/0/1/0 7:http://roya-live.ercdn.net/roya/roya_480p.m3u8" , "Roya TV (Jordan)"
  , "/0/1/0 7:http://mn-nl.mncdn.com/fanatik_livestream/smil:fanatik.smil/chunklist_b996000.m3u8" , "Fanatik Sports (Turkey)"
  , "8:http://stream.ioniantv.gr:8081/ionian/live/playlist.m3u8" , "Ionian TV (Greece)"
  , "8:http://wms.shared.streamshow.it:1935/supertv/supertv/live.m3u8" , "Super TV (Italy)"
  , "8:http://cld03wz.tv2000.it/tv2000_main.m3u8" , "TV 2000 (Italy)"
  , "8:https://rmtv24hweblive-lh.akamaihd.net/i/rmtv24hweben_1@300662/master.m3u8" , "Real Madrid TV (Spain)"
  , "8:https://tvo.vedge.infomaniak.com/livecast/tvo/playlist.m3u8" , "TV Ostschweiz (Switzerland)"
  , "8:https://5857499ee635b.streamlock.net/radiowesertv-live/_definst_/mp4:livestreamTV/playlist.m3u8"
    , "Radio Weser TV (Germany)"
  , "8:http://unilivemtveu-lh.akamaihd.net/i/mtvno_1@346424/master.m3u8" , "MTV (Norway)"
  , "8:http://mrlive.1tvcrimea.ru:8080/1tvcrimea.m3u8" , "Crimea TV (Russia)"
  , "8:http://tnv.bonus-tv.ru/cdn/tnvplanet/index.m3u8" , "Planeta TNV (Russia)"
  , "8:http://live.ugratv.cdnvideo.ru/ugratv/smil:ugrastream1.smil/playlist.m3u8" , "Ugra TV (Russia)"
  , "8:http://stream1.rtkit.com:1935/rtk4stream/rtk4.stream/playlist.m3u8" , "RTK-4 (Kosovo)"
  , "/0/540.1/0 7:http://85.132.81.184:8080/arbkepez/live/index.m3u8" , "Kepez TV (Azerbaijan)"
  , "8:http://livecdnh3.tvanywhere.ae/hls/duck/index.m3u8" , "Duck TV (Slovakia)"
  , "8:https://nn.geo.joj.sk/live/joj-index.m3u8" , "JOJ (Slovakia)"
  , "/406.1/0/0 7:http://alpha.tv.online.tm/hls/ch007_720/index.m3u8" , "Turkmenistan TV"
  , "8:http://akaram.zecast.net/akaram-live/akaramnew2/playlist.m3u8" , "Akaram TV (India)"
  , "8:http://akaram.zecast.net/akaram-live/akaramkidz/playlist.m3u8" , "Akaram Kidz (India)"
  , "8:http://bozztv.com/36bay2/gin/giniko_angeltv_900kb_36bay2/index.m3u8" , "Angel TV (India)"
  , "8:http://thaipbs-live.cdn.byteark.com/live/playlist.m3u8" , "Thai PBS (Thailand)"
  , "/0/540.1/0 7:http://weblive.hebtv.com/live/hbws_bq/index.m3u8" , "Hebei TV (China)"
  , "8:http://rthklive1-lh.akamaihd.net/i/rthk31_1@167495/master.m3u8" , "RTHK-31 (Hong Kong)"
  , "8:http://ebsonair.ebs.co.kr/groundwavefamilypc/familypc1m/master.m3u8" , "EBS-1 (South Korea)"
  , "8:http://ebsonair.ebs.co.kr:1935/ebsutablet500k/tablet500k/playlist.m3u8" , "EBS Kids (South Korea)"
];

/*

  , "8:https://wfcint.mediacdn.ru/cdn/wfcint/playlist.m3u8"			, "World Fashion Channel"
  , "8:http://147.174.13.196/live/live.m3u8"					, "Southeastern Channel"
  , "/0/1/0 7:http://jiocgehub.jio.ril.com/Dsports_HD/Dsports_HD_800.m3u8" , "Discovery Sport"
  , "/0.1/0.1/0.1 7:http://edge.linknetott.swiftserve.com/live/BSgroup/amlst:mixch/playlist.m3u8" , "MiX Music (Indonesia)"
  , "8:http://tv02.logicahost.com.br:1935/itutv/itutv/live.m3u8" , "Canal ITV (Brazil)"
  , "/0/540.1/0 7:http://d2ktlibtvvj8vp.cloudfront.net/trace_naija/5/prog_index.m3u8"    , "Trace Naija (France)"

  , "8:http://173.236.10.10:1935/redeatividade/redeatividade/playlist.m3u8" , "Rede Minas (Brazil)" big buck bunny
  , "8:http://panel.dattalive.com:1935/8250/8250/playlist.m3u8" , "Multivision Federal (Argentina)"

  , "/288.1/504.1/1 8:http://mlblive-akc.mlb.com/ls01/mlbam/mlb_network/NETWORK_LINEAR_1/master_wired.m3u8" , "MLB Network"
  , "8:http://vcnstargazemuzik.teleosmedia.com/stream/stargazemuzik/asianmusic/playlist.m3u8" , "StarGaze Musik (US)"
  , "8:http://edge.music-choice-play-chaina1.top.comcast.net/PlayMetadataInserter/play/index.m3u8" , "Music Choice (US)"
  , "8:http://live.planeta-online.tv:1935/public/channel_4/playlist.m3u8" , "Fresh TV (Russia)"
  , "8:http://v8.ciclano.io:1935/visionmusica/_definst_/visionmusica/playlist.m3u8" , "Vision Musica (Peru)"
  , "8:https://itpolly.iptv.digijadoo.net/live/nagorik_tv/chunks.m3u8" , "Nagorik TV (Bangladesh)"
  , "8:http://streamengine.wosn.tv:1935/live/WOSNLive_1/playlist.m3u8" , "West Ohio Sports Network"
  , "8:https://s1.tntendirect.com/hd1/live/playlist.m3u8" , "TF1 (France)"
  , "7:http://locomotiontv.com/envivo/loco_channel/stream.m3u8" , "Locomotion TV (Mexico, 480p)"
  , "8:http://rtm2mobile.secureswiftcontent.com/Origin02/ngrp:RTM2/index.m3u8" , "RTM Sports (Malaysia)"
  , "8:http://e0.myovn.com/s1/cache/radiozu/index.m3u8" , "ZU Radio (Romania)"

  , "/1/0/0/0/2/2 1a:stream=ABC 8:http://190.80.3.28/ABC/ABC.isml/index.m3u8" , "ABC ++"
  , "/1/0/0/0/2/0 1a:stream=CBS 8:http://190.80.3.28/CBS/CBS.isml/index.m3u8" , "CBS ++"
  , "/1/0/0/0/2/0 1a:stream=CNN 7a:stream_farecnn" , "CNN +"
  , "/1/0/0/0/2/2 1a:stream=FOX 6a:watch/fox-network 8:http://190.80.3.28/FOX/FOX.isml/index.m3u8" , "Fox ++"
  , "/1/0/0/0/2/0 1a:stream=FoxNews 7a:fox_newsstreamfare" , "Fox News +"
  , "/1/0/0/0/2/0 1a:stream=MSNBC 7a:stream_faremsnbc" , "MSNBC +"
  , "/1/0/0/0/2/2 1a:stream=NBC 8:http://190.80.3.28/NBC/NBC.isml/index.m3u8" , "NBC ++"
  , "/1/0/0/2/0/0 1a:stream=PBS 8:http://190.80.3.28/PBS/PBS.isml/index.m3u8" , "PBS ++"

    "/288.1/0/0 7:*https://waw.easyview.eu/hls/bbc-1.m3u8"				, "BBC 1 *"
  , "/288.1/0/0 7:*https://waw.easyview.eu/hls/bbc-two.m3u8"				, "BBC 2 *"
  , "/288.1/0/0 7:*https://waw.easyview.eu/hls/bbc-four.m3u8"				, "BBC 4 *"
  , "/288.1/0/0 7:*https://uk.easyview.eu/hls/nbcb.m3u8"				, "BBC News *"

  , "0:21X5lGlDOfg" , "NASA Official"  no longer working with Invidious
  , "0:nA9UZF-SZoQ" , "NASA Media"  no longer working with Invidious

  , "/1/0/0 1:live/enw" , "E! Network"
  , "/1/0/0 6a:watch/logo-tv" , "Logo TV"
  , "/1/0/0 6a:watch/mtv" , "MTV"
  , "/1/0/0 6a:watch/paramount-network-spike" , "Spike TV"
  , "/1/0/0 1:live/trutv" , "TruTV"
  , "/1/0/0 6a:watch/vh1" , "VH-1"

http://cbsnewshd-lh.akamaihd.net/i/CBSNHD_7@199302/master.m3u8
http://skydvn-nowtv-atv-prod.skydvn.com/atv/skynews/1404/live/index.m3u8
https://www.rthk.hk/feeds/dtt/rthktv32_https.m3u8 
http://ebsonair.ebs.co.kr/plus3familypc/familypc1m/playlist.m3u8
https://content.uplynk.com/channel/92c7be9fb47143a58683d202e321e571.m3u8 court tv

*/

////////////////////////////////
///// End of User Settings /////
////////////////////////////////

var head = "<!DOCTYPE html><html><head><meta charset='utf-8'>" +
           "<title>Downloader</title></head><body><h2>Downloader</h2>";

var tail = "</body></html>", download_doc = head + tail;

var last_h = last_w = last_raw = last_time = the_time = busy = 0;
var cors_bypass = cors_kraker = error = "", vidwin = null;
var freetv = new Object (), cookies = new Object ();
var response, textData, jsonData;

var clear_all = function ()
{
  var win; ir_action (0);
  // destroy iframes so browser won't try to reload them on page refresh
  win = document.getElementById ("mov5"); win.parentNode.removeChild (win);
  win = document.getElementById ("mov6"); win.parentNode.removeChild (win);
  win = document.getElementById ("mov7"); win.parentNode.removeChild (win);
}

var copylist = function (frame, num)
{
  var name, list, box, val, txt, i, j;

  var iptv = num < 0; if (iptv) num = -num; if (!num) return;

  if (num < 10)
  {
    name = "video";
    if (num == 1) list = list_1; else
    if (num == 2) list = list_2; else
    if (num == 3) list = list_3; else
    if (num == 4) list = list_4; else
    if (num == 5) list = list_5; else
    if (num == 6) list = list_6; else
    if (num == 7) list = list_7; else
    if (num == 8) list = list_8; else
    if (num == 9) list = list_9; else return;
  }
  else if (num < 20)
  {
    name = "video"; num -= 10;
    if (num == 1) list = news_1; else
    if (num == 2) list = news_2; else
    if (num == 3) list = news_3; else
    if (num == 4) list = news_4; else
    if (num == 5) list = news_5; else
    if (num == 6) list = news_6; else
    if (num == 7) list = news_7; else
    if (num == 8) list = news_8; else
    if (num == 9) list = news_9; else return;
  }
  else if (num < 30)
  {
    name = "station"; num -= 20;
    if (num == 1) list = free_1; else
    if (num == 2) list = free_2; else
    if (num == 3) list = free_3; else
    if (num == 4) list = free_4; else
    if (num == 5) list = free_5; else
    if (num == 6) list = free_6; else
    if (num == 7) list = free_7; else
    if (num == 8) list = free_8; else
    if (num == 9) list = free_9; else return;
  }
  else return;

  box = document.getElementById ("stk" + frame);

  for (i = box.length - 1; i > 0; i--) box.remove (i);

  for (i = 0, j = 1; i < list.length; i += 2, j++)
  {
    txt = list [i+1];
    if (!(val = list [i])) val = txt; 
    if (val [0] != "~") if (iptv) val = "~" + val;
    if (val [val.length - 1] == ":") val = val + txt;
    box.options[j] = new Option ("[" + (j < 10 ? "0" : "") + j + "] " + txt, val);
  }

  list = document.getElementById ("stk" + frame + "-" + num).innerText;
  box.options[0].innerText = "Select a " + name + " (" + list + ")";
  box.selectedIndex = 0;
  popper (frame, 0);
}
////////////////////

var hidelist = function (frame)
{
  document.getElementById ("stk" + frame).selectedIndex = 0;
}
////////////////////

var toggle_hls = function (frame, state)
{
  if (state < 0) return;

  var doc = document.getElementById ("hls" + frame);
  var hls = doc.checked; if (hls == undefined) hls = 0;

  var txt = "Wrapper"; if (++hls > 2) hls = 0; if (state > 0) hls = state - 1;
  if (hls == 1) txt = "M3U8"; else if (hls == 2) txt = "DASH";

  doc.checked = hls; doc.innerHTML = txt;

  if (!state) document.getElementById ("mov" + frame + "b").checked = true;
}

var buttonpress = function (frame, num)
{
  var id1, id2, doc1, doc2, chk, txt;

  id1 = "btn" + frame + "a"; id2 = "btn" + frame + "b";

  doc1 = document.getElementById (num ? id2 : id1);
  doc2 = document.getElementById (num ? id1 : id2);

  chk = doc1.checked; doc1.checked = !chk;
  doc1.className = (chk ? "is_off" : "is_on");
  doc2.checked = false; doc2.className = "is_off";
}
////////////////////

var brightness = function (frame, mode)
{
  var LVL = document.getElementById ("ctr" + frame + "x");
  var SAT = document.getElementById ("ctr" + frame + "y");
  var vid = document.getElementById ("mov" + frame);

  var lvl = LVL.value.substr (5) * 1;
  var sat = SAT.value.substr (5) * 1;
  var con, lo = -9, hi = 9;

  if (mode == 1) if ((lvl -= 1) < lo) lvl = lo;
  if (mode == 2) if ((lvl += 1) > hi) lvl = hi;
  if (mode == 3) if ((sat -= 1) < lo) sat = lo;
  if (mode == 4) if ((sat += 1) > hi) sat = hi;
  if (mode == 5)
  {
    var x = LVL.step, y = SAT.step, z = lvl || sat;
    if (z) { LVL.step = lvl; lvl = 0; } else lvl = x ? x : 0;
    if (z) { SAT.step = sat; sat = 0; } else sat = y ? y : 0;
  }

  LVL.value = "Brt:  " + (lvl > 0 ? "+" : "") + lvl;
  SAT.value = "Sat:  " + (sat > 0 ? "+" : "") + sat;

  lvl = lvl * 0.075; lvl = (2 + lvl) * lvl * 0.555 + 1.0;
  sat = sat * 0.075; sat = (2 + sat) * sat * 0.778 + 1.0;

  sat = (5.0 - lvl) * sat / 4.0; con = (3.0 - lvl) * (2.5 + sat) / 7.0;

  lvl = lvl.toFixed (2); sat = sat.toFixed (2); con = con.toFixed (2);

  vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
}

var urlcopy = function (frame)
{
  if (!document.getElementById ("mov" + frame + "m").checked)
  {
    document.getElementById ("line" + frame).select();
    document.execCommand ("copy"); return;
  }
  popper (frame, 1);
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var is_busy = function (frame)
{
  if (busy) return 1;
  document.getElementById ("vid" + frame).innerHTML = "Busy";
  busy = 1; error = ""; return 0;
}
////////////////////

var no_fail = function (frame)
{
  if (busy) toggle_hls (frame, busy); else
  {
    document.getElementById ("vid" + frame).innerHTML = "Error";
    if (error != "") document.getElementById ("id" + frame).value = "err: " + error;
  }
  var Busy = busy; busy = 0; return (Busy);
}
////////////////////

var stream_all = function (frame, type)
{
  if (busy) busy = type + 1;
  if (type < 2) return (!document.getElementById ("mov" + frame + "f").checked);
  return 1;
}
////////////////////

var reset_frame = function (frame)
{
  if (!busy) { clear_video (frame); ir_action (-1); }
}
////////////////////

var clear_video = function (frame)
{
  loadwindow ("", frame, ""); brightness (frame, 0); popper (frame, 2);
}
////////////////////

var setup_cors = function (frame)
{
  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);
}
////////////////////

var get_time = function ()
{
  the_time = Date.now() / 500; return (the_time);
}

////////////////////////////////
///// INFO + ENTERTAINMENT /////
////////////////////////////////

var loadid = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "b") src = 1;
      if (doc == "v") src = 2;
      if (doc == "i") src = 3;
      if (doc == "e") src = 4;
      if (doc == "d") src = 5;
      if (doc == "n") src = 7;

      doc = document.getElementById ("src" + frame);
      if (doc.value != src) for (mode = 0; mode < doc.length; mode++)
        if (doc.options [mode].value == src) { doc.selectedIndex = mode; break; }
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url,-12))) req_bitchute (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -9))) req_vimeo (url, frame, fmt); else
  if (src == 3  && (url = getid (url, 24))) req_infowars (url, frame, fmt); else
  if (src == 11 && (url = getid (url, 12))) req_153news (url, frame, fmt); else
  if (src == 13 && (url = getid (url,-16))) req_liveleak (url, frame, fmt); else
  if (src == 4  && (url = getid (url,  0))) req_brighteon (url, frame, fmt); else
  if (src == 5  && (url = getid (url, -7))) req_dailymotion (url, frame, fmt); else
  if (src == 7  && (url = getid (url, 10))) req_natfilmbrd (url, frame, fmt); else
  if (src == 25 && (url = getid (url,  8))) req_jwplayer (url, frame, fmt); else
  if (src == 24 && (url = getid (url, -9))) req_soundcloud (url, frame, fmt); else
  if (src == 21 && (url = getid (url,-19))) req_twitter (url, frame, fmt); else

  if (src == 20) load_brightcove ("", url, "", frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

var getid = function (url, len)
{
  if (!len) return (url);

  tst = url.substr (url.length - 5, 5);
  var n = tst.search ("\\."); if (n < 0) n = tst.search ("/");
  if (n >= 0) url = url.substr (0, url.length + n - 5);

  if ((tst = url.search ("\\*")) >= 0) return (url.substr (tst+1));
  if (!len) return (url);

  if (len < 0)
  {
    len = -len;
    if (url.length < len - 2) return "";
    if (url.length == len - 2) return url;
    if (url.length == len - 1) return url;
    if (url.length == len) return url;

    url = url.substr (url.length - len, len);
    if ((len = url.search ("/")) > 1) url = "";
    if (len < 0 && (len = url.search ("=")) > 1) url = "";
    if (len < 0 && (len = url.search ("-")) > 1) url = "";

    if (len >= 0) url = url.substr (len + 1);
    return url;
  }

  if (url.length < len) return "";
  if (url.length == len) return url;

  url = url.substr (url.length - len, len);
  if (url.search ("/") >= 0) url = "";
  if (url.search ("=") >= 0) url = "";
  return url;
}
////////////////////

var request = function (id, frame, fmt)
{
  if (document.getElementById ("mov" + frame + "c").checked)
  {
    var url = "https://www.youtube.com/embed/" + id;
    if (!busy) loadwindow (url, frame, "youtube: " + id);
    return;
  }

  var src = document.getElementById ("ctr" + frame + "z").value;

  if (src == 10) if (fmt < 0) src = 0; else { request_youtube (id, frame, -fmt); return; }
  if (src == 11) if (fmt < 0) src = 0; else { request_youtube (id, frame, fmt); return; }
  if (src == 12) if (fmt < 0) src = 0; else { request_genyoutube (id, frame, fmt); return; }
  if (src == 13) if (fmt < 0) src = 0; else { request_y2meta (id, frame, fmt); return; }

  if (!src && cors_kraker) { request_youtube (id, frame, fmt); return; }

  invidious_url = invidious_site [src]; request_invidious (id, frame, (fmt < 0 ? -fmt : fmt));
}
////////////////////

const request_invidious = async (id, frame, fmt) =>
{
  var i, j, n, f = [0,0,0,0,0,0,0,0];

  var tag = "invidious"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = invidious_url + "/api/v1/videos/" + id + "?fields=formatStreams,hlsUrl";

try
{
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var sub = jsonData.formatStreams; if (!sub) throw ("!!!"); n = sub.length;

  for (i = 0; i < n; i++)
  {
    if ((j = argformat (sub[i].itag)) >= 0) f[j] = i + 1;
  }
    
  if ((n = getformat (f, fmt)))
  {
    fmt = n; fixformat (f, frame); n = f[argformat(n)] - 1;
    url = (sub[n].url.search ("&gcr=") > 0) ? "local=true&" : "";  // geo-restricted?
    url = invidious_url + "/latest_version?" + url + "itag=" + fmt + "&id=" + id;
  }
  else   // live stream
  {
    url = jsonData.hlsUrl; if (!url) throw ("!!!");
    if (url.substr (0,1) == "/") url = invidious_url + url;
    sub = url = url + "?local=true";

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const request_genyoutube = async (id, frame, fmt) =>
{
  var i, j, f = [0,0,0,0,0,0,0,0];

  var tag = "genyoutube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://video.genyoutube.net/" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  i = textData.search ('id="viddownloads"');
  j = textData.search ('id="viddescription"');
  if (i < 0 || j < i) throw ("!!!");

  textData = textData.substr (i, j - i);
  var sub = textData.split ('<a href="');
  if (sub.length < 2) throw ("!!!");

  for (i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.substr (0, 4) != "http") continue;
    url = url.substr (url.search ("&itag=") + 6);
    url = url.substr (0, url.search ("&"));
    if ((j = argformat (url)) >= 0) f[j] = i;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || !(j = f[j])) throw ("!!!");

  url = sub [j];
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const request_y2meta = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0];

  var tag = "y2meta"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.y2meta.net/dlink.php?id=" + id;

try
{
//  var data = "id=" + id;
//  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
//  var response = await fetch (url, { method: 'POST', headers: header, body: data } );

  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  for (i = 0; i < jsonData.length; i++)
  {
    k = jsonData [i].l; if (!k) continue;
    if (k.search ("itag=18&") > 0) f[0] = i + 1;
    if (k.search ("itag=22&") > 0) f[2] = i + 1;
    if (k.search ("itag=43&") > 0) f[4] = i + 1;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || !(j = f[j])) throw ("!!!");

  url = jsonData [j-1].l;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const request_youtube = async (id, frame, fmt) =>
{
  var i, j, n, s, key, sig, f = [0,0,0,0,0,0,0,0,0,0], d = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_bypass + "https://www.youtube.com/get_video_info?video_id=" + id + "&el=";

try
{
  response = await fetch (url + "leanback");
  textData = await response.text();

  var sub = textData.split ("%22itag%22");

  if (sub.length < 2)
  {
    response = await fetch (url + "previewpage");
    textData = await response.text();

    sub = textData.split ("%22itag%22"); if (sub.length < 2) throw ("!!!");
  }

  for (i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.search ("%3A") != 0) continue;
    s = url.substr (3, url.search ("%2C") - 3);
    if ((j = argformat (s)) >= 0) f[j] = i;
    if ((j = isdashfmt (s)) >= 0)
     if (url.search ("index") > 0 || url.search ("_live_") > 0) d[j] = i;
  }

  if (fmt < 0)
  {
    if (!d[8]) d[0] = d[1] = d[2] = 0;
    if (!d[9]) d[4] = d[5] = d[6] = 0;
    fmt = -fmt; n = getformat (d, fmt);
    if (cors_kraker) if (n) { f = d; tag = ""; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0 || !(n = f[n])) throw ("!!!");

  s = yt_split (sub[n]); dat = s.split ("|"); url = dat[0]; sig = dat[1];

  if (sig.length > 99)  // some videos require a signature; usually 105 or 109 bytes long
  {
    response = await fetch (cors_bypass + "https://www.youtube.com/embed/" + id);
    textData = await response.text();

    url = textData.substr (textData.search ("base\\.js") - 100, 107);
    url = url.substr (url.search ('src=') + 5);

    if (!(key = cookies [url]))
    {
      response = await fetch (cors_kraker + "https://www.youtube.com" + url);
      textData = await response.text();

      key = yt_algo (textData); cookies [url] = key;
    }

    eval (key); url = dat[0] + "&sig=" + sig;
  }

  if (!tag)
  {
    if ((i = argformat (fmt)) < 4) j = 8; else j = 9;
    s = yt_split (sub [f[j]]) + "|" + dat[2];
    var dat = s.split ("|"); j = j & 1;

    sig = dat[1];
    if (sig) { eval (key); sig = "&sig=" + sig; }
    sig = dat[0] + sig;

    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
      "<a href='" + sig + "'>Audio</a> &nbsp;" +
      "<a href='" + url + "'>Video</a>" + tail;

    s = url.substr (url.search ("&dur=") + 5); s = s.substr (0, s.search ("&")) * 1;
    var v = dat[2] + "," + dat[3]; var w = "wanna_boot_dash";

    if (!s)
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url, { method: 'GET' } );
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";

    s = s + "|" + (j ? "audio/webm" : "audio/mp4") + "|" + (j ? "opus" : "mp4a.40.2");
    s = s + "|" + (j ? "video/webm" : "video/mp4") + "|" + (j ? "vp9" : "avc1.4d401e");
    s = s + "|" + v + "|" + tag + "|" + sig + "|" + url + "|";

    await fetch (cors_kraker + w, { method: 'POST', body: s } );
    url = cors_kraker + "_" + w + "_" + tag;
    tag = "yt-dash"; stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var yt_split = function (t)
{
  var n, p, q, s;

  n = t.search ("%7D%5D");
  s = t.substr (0, (n < 0 ? t.length : n));
  s = s.replace (/%5Cu0026/g, "&");
  s = s.replace (/%25/g, "%");
  s = s.replace (/%25/g, "%");
  s = decodeURIComponent (s);

  n = s.search ("&s="); if (n < 0) n = s.search ('"s=');

  if (n < 0) p = ""; else
  {
    p = s.substr (n + 3, 300);
    n = p.search ("&"); if (n > 0) p = p.substr (0, n);
    n = p.search ('"'); if (n > 0) p = p.substr (0, n);
  }

  q = s.replace (/\\/g, "");
  n = q.search ("\\]");  if (n > 0) q = q.substr (0, n);
  q = q.split ('"start":"');

  if (q.length < 3) q = ""; else
  {
    q[1] = q[1].substr (0, q[1].search ('"\\}'));
    q[2] = q[2].substr (0, q[2].search ('"\\}'));
    q[1] = q[1].replace ('","end":"', "-");
    q[2] = q[2].replace ('","end":"', "-");
    q = q[1] + "," + q[2];
  }

  s = s.substr (s.search ("http")); s = s.substr (0, s.search ('"'));
  n = s.search ("&sp="); if (n > 0) s = s.substr (0, n);
  n = s.search ("&s=");  if (n > 0) s = s.substr (0, n);

  return (s + "|" + p + "|" + q);
}

var yt_algo = function (data)
{
  var n = data.search ('a=a\\.split\\(""\\)'); if (n < 0) return "";
  var s = data.substr (n + 14, 300); s = s.substr (0, s.search ("return"));
  var v = "var " + s.substr (0, 2) + "=\\{"; if ((n = data.search (v)) < 0) return "";
  v = data.substr (n, 300); v = v.substr (0, v.search ("\\};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

const req_bitchute = async (id, frame, fmt) =>
{
  var tag = "bitchute"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.bitchute.com/embed/" + id + "/";

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vimeo = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "vimeo"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.vimeo.com/video/" + id + "/config";

try
{
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  if (jsonData.request == undefined)   // privacy lock, go long way around
  {
    response = await fetch (cors_bypass + "https://vimeo.com/" + id);
    textData = await response.text();

    var s = '"config_url":"';
    var n = textData.search (s); if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    url = url.replace (/\\/g, "");

    response = await fetch (cors_bypass + url);
    jsonData = await response.json();
  }

  if (!(url = jsonData.request.files.progressive))  // https://vimeo.com/378870053 live stream
  {
    if (!(url = jsonData.request.files.hls)) throw ("!!!");
    if (!(url = jsonData.request.files.hls.cdns)) throw ("!!!");
    if (!(s = url.fastly_live)) s = url.akamai_live; url = s.url;
    if (cors_kraker) url = cors_kraker + "~" + url;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();
      url = response.url;

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }
  else
  {
    for (i = 0; i < url.length; i++)
    {
      k = url[i].quality; k = k.substr (0, k.search ("p"));
      if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
    }
    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = url[j].height; if ((url = url[j].url) == undefined) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_infowars = async (id, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vod-api.infowars.com/embed/" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'downloadUrl="';
  var n = textData.search (s);

  if (n < 0) url = ""; else
  {
    url = textData.substr (n + s.length, 100);
    url = url.substr (0, url.search ('"'));
  }

  download_doc = head + "InfoWars download link: ";

  if (url.search ("http") == 0)
    download_doc = download_doc + "<a href='" + url + "'>" + url + "</a>" + tail; else
    download_doc = download_doc + "Not available" + tail;

  s = '<source src="';
  n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_153news = async (id, frame, fmt) =>
{
  var tag = "153news"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://153news.net/watch_video.php?v=" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 1000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.search ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_liveleak = async (id, frame, fmt) =>
{
  var tag = "liveleak"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.liveleak.com/e/" + id;

try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.search ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 1000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.search ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_brighteon = async (id, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  var url = getid (id, 36); if (!url) url = getid (id, 13);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  id = url; url = "https://www.brighteon.com/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/&#x3D;/g, "=");

  if (url.search ("m3u8") < 0) throw ("!!!");
  url = (cors_kraker ? cors_kraker + "~*" : cors_bypass) + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_dailymotion = async (id, frame, fmt) =>
{
  var tag = "dailymotion"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.dailymotion.com/embed/video/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://www.dailymotion.com/player/metadata/video/" + id;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  var n; url = jsonData.qualities.auto[0].url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + url);
    textData = await response.text();

    url = response.url.substr (cors_kraker.length);
    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

  n = url.search ("#"); if (n > 0) url = url.substr (0, n);  // for SMPlayer
  if (cors_kraker) url = cors_kraker + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_natfilmbrd = async (id, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdnapisec.kaltura.com/p/2081491/sp/208149100/playManifest/entryId/" + id +
    "/flavorIds/1_z997vpzn/format/applehttp/protocol/https/a.m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_twitter = async (id, frame, fmt) =>
{
  var tag = "twit"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_kraker + "*https://twitter.com*https://api.twitter.com/1.1/"; 

if (!cors_kraker) busy = 0; else
try
{
  var b = "Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h" +
    "%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw";

  var u = url + "guest/activate.json";
  response = await fetch (u, { method: 'POST', headers: { 'Authorization': b } });
  jsonData = await response.json();

  var g = jsonData.guest_token; if (!g) throw ("!!!");

  u = url + "videos/tweet/config/" + id + ".json";
  response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
  jsonData = await response.json();

  url = jsonData.track.playbackUrl; if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_jwplayer = async (id, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdn.jwplayer.com/manifests/" + id + ".m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_soundcloud = async (id, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://w.soundcloud.com/player/?url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "/progressive";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  var sub = textData.substr (n - 200, 200 + s.length);
  sub = sub.substr (sub.search ('"url":"') + 7);

  n = textData.search ("/widget-"); if (n < 0) throw ("!!!");

  url = textData.substr (n - 40, 100);
  url = url.substr (url.search ('"') + 1);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("client_id"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 200);
  url = url.substr (url.search ('":"') + 3);
  url = url.substr (0, url.search ('"'));
  url = sub + "?client_id=" + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.url; if (url == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digid = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 10) dig_test (doc, frame, fmt); else
  if (src == 3 ) dig_infowars (doc, frame, fmt); else
  if (src == 4 ) dig_brighteon (doc, frame, fmt); else
  if (src == 8 ) dig_prageru (doc, frame, fmt); else
  if (src == 6 ) dig_tedtalks (doc, frame, fmt); else
  if (src == 7 ) dig_natfilmbrd (doc, frame, fmt); else
  if (src == 21) dig_twitter (doc, frame, fmt); else
  if (src == 22) dig_facebook (doc, frame, fmt); else
  if (src == 25) dig_jwplayer (doc, frame, fmt); else
  if (src == 24) dig_soundcloud (doc, frame, fmt); else
  if (src == 23) dig_podcast (doc, frame, fmt); else

  if (src == 20) find_brightcove (doc, "", frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_test = async (doc, frame, fmt) =>
{
  var tag = "test"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
  if (doc.substr (0,4) != "http") console.log (window.atob (doc)); else
  {
    response = await fetch (url);
    textData = await response.text();
    console.log ('(' + textData + ')');
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow ("", frame, tag + ": okay");
}
////////////////////

var testit = function (p,a,c,k,e,d)
{
  console.log(p);

  while (c--) if (k[c]) p = p.replace (RegExp ('\\b'+c.toString(a)+'\\b','g'), k[c]);

  console.log(p);
}

const dig_infowars = async (doc, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; if (url.search ("infowars") < 0) url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);
  
  if (n > 0) url = textData.substr (n + s.length, 200); else
  {
    n = textData.search ('<iframe src="'); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200);

    n = url.search ("/embed/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7);
  }

  url = url.substr (0, url.search ('"'));
  if ((n = url.search ("\\?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_infowars (url, frame, fmt);
}
////////////////////

const dig_brighteon = async (doc, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/embed/"; var n = textData.search (s);
  if (n < 0) { s = '"videoKey":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_brighteon (url, frame, fmt);
}
////////////////////

const dig_prageru = async (doc, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "prageru"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:image" content="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ("poster") - 1);

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.playlist[0].sources; if (url == undefined) throw ("!!!");
 
  for (i = 0; i < url.length; i++)
  {
    if (url[i].type != "video/mp4") continue;

    k = url[i].height;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");

  fmt = url[j].height; if ((url = url[j].file) == undefined) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_tedtalks = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "tedtalks"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"nativeDownloads"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);

  s = '"medium":"http'; if ((n = url.search (s)) > 0) f[0] = n + s.length - 4;
  s = '"high":"http'; if ((n = url.search (s)) > 0) f[1] = n + s.length - 4;

  if (!f[0] && !f[1])
  {
    s = '"bitrate":180,"file":"'; if ((n = textData.search (s)) < 0) throw ("!!!");
    url = textData.substr (n, 300); f[0] = s.length;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 288;
  if (n == 1) fmt = 480;

  url = url.substr (f[n]); url = url.substr (0, url.search ('"'));

  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_natfilmbrd = async (doc, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

  var n = url.search ("\\?");
  if (n > 0) url = url.substr (0, n);
  if (doc.substr (-1) != "/") url = url + "/";
  url = url + "embed/player/";

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"entry_id": "';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ('"'));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_natfilmbrd (url, frame, fmt);
}
////////////////////

const dig_twitter = async (doc, frame, fmt) =>
{
  var tag = "twitter"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/status/";
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 19);

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) req_twitter (url, frame, fmt);
}
////////////////////

const dig_facebook = async (doc, frame, fmt) =>
{
  var tag = "facebook"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"og:video" content="'; var n = textData.search (s);
  if (n < 0) { s = '"sd_src_no_ratelimit":"'; n = textData.search (s); }
  if (n < 0) { s = '"video_url":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_jwplayer = async (doc, frame, fmt) =>
{
  var tag = "jwplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"video_id":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.search ('"'));
  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_jwplayer (url, frame, fmt);
}
////////////////////

const dig_soundcloud = async (doc, frame, fmt) =>
{
  var tag = "soundcloud"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "soundcloud.com/tracks/";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 12);
  if ((n = url.search ('"')) < 0) n = url.search ("/");
  if (n < 0) throw ("!!!"); url = url.substr (0, n);

  if (url.length < 6 || url.length > 9) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_soundcloud (url, frame, fmt);
}
////////////////////

const dig_podcast = async (doc, frame, fmt) =>
{
  var tag = "podcast"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"assetUrl":"'; var n = textData.search (s);         		// Apple Podcast
  if (n < 0) n = textData.search (s = 'enclosureUrl":"');		// Radio Public
  if (n < 0) n = textData.search (s = 'episodeURL: "');			// Stitcher
  if (n < 0) n = textData.search (s = '<source src="');			// Overcast
  if (n < 0) n = textData.search (s = 'data-uri="');	   		// Podbean
  if (n < 0) n = textData.search (s = 'download" href="');		// Spreaker
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 500);
  n = url.search ('"'); if (n > 0) url = url.substr (0, n);
  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 420) return 0;
  if (q > 420 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixlist = function (item, doc, state)
{
  var txt = doc.options[item].text.slice (0,-1);
  if (state < 0) txt = txt + '*'; else if (state > 0) txt = txt + '+'; else txt = txt + '-';
  doc.options[item].text = txt;
}
////////////////////

var fixformat = function (f, frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]); fixlist (2, doc, f[2]);
  fixlist (3, doc, f[4]); fixlist (4, doc, f[5]); fixlist (5, doc, f[6]);

/*
  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]);
  fixlist (2, doc, f[2]); fixlist (3, doc, f[3]);
  fixlist (4, doc, f[4]); fixlist (5, doc, f[5]);
  fixlist (6, doc, f[6]); fixlist (7, doc, f[7]);
*/
}
////////////////////

var no_format = function (frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, -1); fixlist (1, doc, -1);
  fixlist (2, doc, -1); fixlist (3, doc, -1);
  fixlist (4, doc, -1); fixlist (5, doc, -1);
}
////////////////////

/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////

var loadnews = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      if (doc == "fox") src = 1;
      if (doc == "abc") src = 2;
      if (doc == "cnb") src = 4;
      if (doc == "msn") src = 7;
      if (doc == "pbs") src = 8;
      if (doc == "cbc") src = 11;
      if (doc == "ctv") src = 12;
      if (doc == "glo") src = 13;
      if (doc == "tvo") src = 14;
      if (doc == "bbc") src = 21;
      if (doc == "alj") src = 22;

      doc = document.getElementById ("src" + frame);
      if (doc.value != src) for (mode = 1; mode < doc.length; mode++)
        if (doc.options [mode].value == src) { doc.selectedIndex = mode; break; }
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, 13))) req_fox (url, frame, fmt); else
  if (src == 2  && (url = getid (url,  8))) req_abc (url, frame, fmt); else
  if (src == 4  && (url = getid (url, 10))) req_cnbc (url, frame, fmt); else
  if (src == 7  && (url = getid (url,-13))) req_msnbc (url, frame, fmt); else
  if (src == 8  && (url = getid (url, 10))) req_pbs (url, frame, fmt); else
  if (src == 11 && (url = getid (url,-13))) req_cbc (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  7))) req_ctv (url, frame, fmt); else
  if (src == 13 && (url = getid (url,  7))) req_global (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 13))) req_tvo (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  8))) req_bbc (url, frame, fmt); else
  if (src == 22 && (url = getid (url, 13))) req_aljazeera (url, frame, fmt); else
  if (src == 25 && (url = getid (url, 22))) req_bloomberg (url, frame, fmt); else

  if (src == 0 && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_fox = async (id, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://video.foxnews.com/v/feed/video/" + id + ".js";

try
{
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  if (jsonData.error != undefined)
  {
    response = await fetch ("https://video.foxbusiness.com/v/feed/video/" + id + ".js");
    jsonData = await response.json();
  }

  if (jsonData.error != undefined) throw ("!!!");
  url = jsonData.channel.item["media-content"]["@attributes"].url;
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_abc = async (id, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://abcnews.go.com/video/itemfeed?id=" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  url = jsonData.channel.item["media-group"]["media-content"][2]["@attributes"].url; 

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cnbc = async (id, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/gZWlPC/media/guid/2408950221/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_msnbc = async (id, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//var url = "https://www.msnbc.com/msnbc/embedded-video/mmvo" + id;
  var url = "https://www.nbcnews.com/news/embedded-video/mmvo" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '},"videoType":'; var n = textData.search (s);
  if (n < 0) { s = '"videoType":'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n, 2000);
  var sub = url.split ('"publicUrl":"'); if (sub.length < 2) throw ("!!!");
  url = sub [sub.length - 1]; url = url.substr ('"');

  n = url.search ("\\?"); if (n > 0) url = url.substr (0, n);
  if (url == "") throw ("!!!");

  url = url.replace (/\\u002F/g, "/");
  url = url + "?mbr=true&format=smil";
	
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_pbs = async (id, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.pbs.org/portalplayer/" + id + "/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '"encodings": \\["';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 1, 200);
  url = url.substr (0, url.search ('"'));

  url = url + "?format=jsonp&callback=__jp1";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  s = '"url": "'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length);
  url = url.substr (0, url.search ('"'));

  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cbc = async (id, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/ExhSPC/media/guid/2655402169/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");

  var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_ctv = async (id, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://capi.9c9media.com/destinations/ctvnews_web/platforms/desktop/contents/" + id;
  var sub = "?%24include=%5BContentPackages%5D";

try
{ 
  response = await fetch (cors_kraker + url + sub);
  jsonData = await response.json();

  sub = jsonData.ContentPackages[0].Id;
  url = url + "/contentpackages/" + sub + "/manifest.mpd";

  stream_all (frame, 2);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_global = async (id, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://globalnews.ca/video/embed/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = 'sources":\\[\\{"file":"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 200);
  url = url.substr (0, url.search ('"'));
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_tvo = async (id, frame, fmt) =>
{
  load_brightcove ("18140038001", id, "tvo", frame, fmt);
}
////////////////////

const req_bbc = async (id, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/" + id + "/format/xml/atk/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var sub = textData.split ('href="'); if (sub.length < 2) throw ("!!!");

  for (var i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.search ("https") < 0) continue;
    if (url.search ("mpd") > 0 && url.search ("gda") < 0) break;
  }

  url = url.substr (0, url.search ('"'));
  url = url.replace (/amp;/g, "");

  if (url.search ("mp4") < 0) stream_all (frame, 2);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_aljazeera = async (id, frame, fmt) =>
{
  load_brightcove ("665003303001", id, "aljazeera", frame, fmt);
}
////////////////////

const req_bloomberg = async (id, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], u = [], n;

  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://www.bloomberg.com/multimedia/api/embed?id=" + id;

if (!cors_kraker) busy = 0; else try
{
  response = await fetch (cors_kraker + "*" + url);
  jsonData = await response.json();
  var sub = jsonData.downloadURLs;

  if ((url = sub["600"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["700"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["800"])  != undefined) { f[1] = 540; u[1] = url; }
  if ((url = sub["1200"]) != undefined) { f[2] = 720; u[2] = url; }

  if ((n = getformat (f, fmt)))
  {
    fixformat (f, frame); n = argformat (n); fmt = f[n]; url = u[n];
  }
  else
  {
    url = jsonData.streams[0].url; if (!url) throw ("!!!");

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var dignews = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_fox (doc, frame, fmt); else
  if (src == 2 ) dig_abc (doc, frame, fmt); else
  if (src == 3 ) dig_cbs (doc, frame, fmt); else
  if (src == 4 ) dig_cnbc (doc, frame, fmt); else
  if (src == 5 ) dig_cnn (doc, frame, fmt); else
  if (src == 6 ) dig_cspan (doc, frame, fmt); else
  if (src == 7 ) dig_msnbc (doc, frame, fmt); else
  if (src == 8 ) dig_pbs (doc, frame, fmt); else
  if (src == 11) dig_cbc (doc, frame, fmt); else
  if (src == 12) dig_ctv (doc, frame, fmt); else
  if (src == 13) dig_global (doc, frame, fmt); else
  if (src == 14) dig_tvo (doc, frame, fmt); else
  if (src == 21) dig_bbc (doc, frame, fmt); else
  if (src == 24) dig_presstv (doc, frame, fmt); else
  if (src == 22) dig_aljazeera (doc, frame, fmt); else
  if (src == 25) dig_bloomberg (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_fox = async (doc, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="'; var n = textData.search (s);
  if (n < 0) { s = "video_id="; n = textData.search (s); }

  if (n > 0) url = textData.substr (n + s.length, 13); else
  {
    s = 'data-url="'; n = textData.search (s);
    if (n > 0)
    {
      url = textData.substr (n + s.length, 200);
      url = url.substr (url.search ("/v/") + 3, 13);
    }
    else
    {
      s = "redirect.mp3"; n = textData.search (s); if (n < 0) throw ("!!!");
      url = textData.substr (n + s.length + 2, 200);
      url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");
      url = "https://" + url.replace (/\\/g, "");
      busy = -busy;
    }
  }
  busy = -busy;

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    no_fail (frame); loadwindow (url, frame, tag + ": id-none");
  }
  else if (no_fail (frame)) req_fox (url, frame, fmt);
}
////////////////////

const dig_abc = async (doc, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video="'; var x = 0;
  var n = textData.search (s);

  if (n < 0) { s = 'null/video/itemfeed\\?id='; n = textData.search (s); x = 1; }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - x, 100);
  url = url.substr (0, url.search ('"'));

  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_abc (url, frame, fmt);
}
////////////////////

const dig_cbs = async (doc, frame, fmt) =>
{
  var tag = "cbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"embedUrl":"'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 300);
    url = url.substr (0, url.search ('"'));
    url = url.replace (/\\/g, "");

    if (url != doc)
    {
      if (url.search ("/live/") > 0) throw ("!!!");
      response = await fetch (cors_bypass + url);
      textData = await response.text();
    }
  }

  n = textData.search ("defaultPayload");
  if (n > 0) textData = textData.substr (n);

  s = '"video":"';
  n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  
  if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cnbc = async (doc, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = "'"; var s = "'content_id' : '";
  var n = textData.search (s);

  if (n < 0)
  {
    r = '"'; s = 'data-vilynx-id="';
    n = textData.search (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search (r));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cnbc (url, frame, fmt);
}
////////////////////

const dig_cnn = async (doc, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0];

  var tag = "cnn"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  s = 'data-video-id="'; n = textData.search (s);
  if (n < 0) { s = 'videoid="'; n = textData.search (s); }
  if (n < 0) { s = 'videoId":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));

  url = "https://ht.cdn.turner.com/cnn/big/" + url + ".smil";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
  n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  url = "http://ht.cdn.turner.com/" + url;

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cspan = async (doc, frame, fmt) =>
{
  var tag = "cspan"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "sources: \\[\\{file: '";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length - 2, 100);
  url = url.substr (0, url.search ("'"));

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_msnbc = async (doc, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'video":{"id":"mmvo';
  var n = textData.search (s);

  if (n > 0) url = textData.substr (n + s.length, 20); else
  {
    n = textData.search ('"embedURL":');
    if (n < 0) n = textData.search ('"embedUrl":');
    if (n < 0) throw ("!!!");

    url = textData.substr (n, 200); n = url.search ("/mmvo");   // today.com
    if (n > 0) url = url.substr (n + 5);
  }

  if (n > 0)
  {
    url = url.substr (0, url.search ('"'));
    busy = -busy; if (url.length < 11 || url.length > 13) throw ("!!!");
  }
  else
  {
    s = url.substr (url.search ("/p/") + 3);
    s = s.substr (0, s.search ("/")); n = url.search ("/guid/");

    if (n < 0) { busy = -busy; n = url.search ("media/"); }
    if (n < 0) throw ("!!!");

    url = url.substr (n + 6); url = url.substr (0, url.search ("\\?"));
    if (s == "" || url == "") throw ("!!!");

    s = "https://link.theplatform.com/s/" + s + "/media/";

    if (busy < 0)
    {
  // www.nbcsports.com
      busy = -busy; url = s + url + "?format=smil";

      response = await fetch (cors_kraker + url);
      textData = await response.text();

      url = crack_smil (textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
    else
    {
  // www.nbc.com/dateline
      url = s + "guid/" + url + "/meta.smil?manifest=m3u";  // mp4 does not work

      if (stream_all (frame, 1)) fmt = 0; else
      {
        response = await fetch (url);
        textData = await response.text();

        url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
        n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
      }
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    if (!fmt) no_format (frame); no_fail (frame);
    loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
  }
  else if (no_fail (frame)) req_msnbc (url, frame, fmt);
}
////////////////////

const dig_pbs = async (doc, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<iframe src="https://player'; var n = textData.search (s);

  if (n < 0)
  {
    var r = "'"; s = "'VideoTPMediaId': '"; n = textData.search (s);
    if (n < 0) { r = '"'; s = 'data-coveid="'; n = textData.search (s); }
    if (n < 0) { r = '"'; s = 'data-coveId="'; n = textData.search (s); }
    if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search (r));
  }
  else
  {
    url = textData.substr (n, 100);
    n = url.search ("player/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7); url = url.substr (0, url.search ('"'));
    n = url.search ("/"); if (n > 0) url = url.substr (0, n);
  }

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_pbs (url, frame, fmt);
}
////////////////////

const dig_cbc = async (doc, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var r = '"'; var s = '"guid":"'; var n = textData.search (s);

  if (n < 0)
  {
    r = "'"; s = "'mediaId': '";
    n = textData.search (s); if (n < 0) throw ("!!!");
  }

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search (r));

  if (url.length < 10 || url.length > 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cbc (url, frame, fmt);
}
////////////////////

const dig_ctv = async (doc, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 20);
    url = url.substr (0, url.search ('"'));
  }

  if (n < 0)
  {
    s = "\\); initPlayer\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length - 2, 100);
      url = url.substr (0, url.search ("\\)"));
    }
  }

  if (n < 0)
  {
    s = "getAuthStates\\(";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 300);
      url = url.substr (0, url.search ('"'));
      sub = url.split (","); if (sub.length == 0) throw ("!!!");
      url = sub [sub.length - 1];
    }
  }

  if (n < 0)
  {
    s = "contentId: ";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.search (','));
    }
  }

  if (n < 0)
  {
    s = "currentId=";
    if ((n = textData.search (s)) > 0)
    {
      url = textData.substr (n + s.length, 20);
      url = url.substr (0, url.search ('&'));
    }
  }

  if (n < 0 || url.length != 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_ctv (url, frame, fmt);
}
////////////////////

const dig_global = async (doc, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-displayinline="';
  var n = textData.search (s);

  if (n < 0)
  {
    s = 'data-miniplayer-video="'; n = textData.search (s);
    if (n < 0) { s = '<iframe src="'; n = textData.search (s); }
    if (n < 0) throw ("!!!");
  }
  url = textData.substr (n, 100);

  s = "/playlist/"; n = url.search (s);
  if (n < 0) { s = "/embed/"; n = url.search (s); }
  if (n < 0) throw ("!!!");

  url = url.substr (n + s.length, 7);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_global (url, frame, fmt);
}
////////////////////

const dig_tvo = async (doc, frame, fmt) =>
{
  find_brightcove (doc, "tvo", frame, fmt);
}
////////////////////

const dig_bbc = async (doc, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "embed\\\\";
  var n = textData.search (s);

  if (n < 0) { s = "versionID&quot;:&quot;"; n = textData.search (s); }
  if (n < 0) { s = 'data-vpid="'; n = textData.search (s); }
  if (n < 0) { s = 'data-id="'; n = textData.search (s); }
  if (n < 0) { s = '"vpid":"'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 20);

  n = url.search ("\\\\"); if (n < 0) n = url.search ("&");
  if (n < 0) n = url.search ('"'); if (n != 8) throw ("!!!");

  url = url.substr (0, 8);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bbc (url, frame, fmt);
}
////////////////////

const dig_presstv = async (doc, frame, fmt) =>
{
  var tag = "presstv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '<source src="'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 200);
    url = url.substr (0, url.search ('"'));
    fmt = 0; if (url == "") throw ("!!!");
  }
  else
  {
    n = textData.search ("og:video:url'"); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200); url = url.substr (url.search ("http"));
    url = url.substr (0, url.search ("'")); if (url == "") throw ("!!!");

    if (url.search ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_aljazeera = async (doc, frame, fmt) =>
{
  var tag = "aljazeera"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "RenderPagesVideo\\('";
  var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search ("'"));
  }

  if (n < 0)
  {
    s = "RenderGeneralBCVideo\\(";
    n = textData.search (s); if (n < 0) throw ("!!!");
    url = textData.substr (n + s.length - 1, 20);
    url = url.substr (0, url.search (","));
  }

  if (url.length != 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_aljazeera (url, frame, fmt);
}
////////////////////

const dig_bloomberg = async (doc, frame, fmt) =>
{
  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + "*" + doc;

if (!cors_kraker) busy = 0; else try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-url="'; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    
    response = await fetch (cors_kraker + "*" + url);
    textData = await response.text();
  }

  s = '"resourceId":"'; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 50);
  url = url.substr (0, url.search ('"'));
  if (url.length != 22) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bloomberg (url, frame, fmt);
}
////////////////////

////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////

var loadmovie = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value;
    url = url.replace (/\\u002F/g, "/"); url = url.replace (/\\/g, "");
    if (url [0] == "~") open_livestream (url, frame, fmt); else loadwindow (url, frame, "");
    return;
  }

  if (mode == 2) url = error; else
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value;
  }

  if (url [0] == "~") { open_livestream (url, frame, fmt); return; }

  src = document.getElementById ("src" + frame).value;
  sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];

      doc = document.getElementById ("src" + frame);
      if (doc.value != src) for (mode = 0; mode < doc.length; mode++)
        if (doc.options [mode].value == src) { doc.selectedIndex = mode; break; }
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, -7))) req_tubitv (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -8))) req_vidnode (url, frame, fmt); else
  if (src == 8  && (url = getid (url, -8))) req_xhamster (url, frame, fmt); else
  if (src == 16 && (url = getid (url, 12))) req_clipwatching (url, frame, fmt); else
  if (src == 15 && (url = getid (url, 12))) req_cloudvideo (url, frame, fmt); else
  if (src == 12 && (url = getid (url, 12))) req_gounlimited (url, frame, fmt); else
  if (src == 19 && (url = getid (url, 12))) req_prostream (url, frame, fmt); else
  if (src == 17 && (url = getid (url, 12))) req_upstream (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 12))) req_videobin (url, frame, fmt); else
  if (src == 13 && (url = getid (url, 12))) req_vidlox (url, frame, fmt); else
  if (src == 18 && (url = getid (url, 12))) req_vidoza (url, frame, fmt); else
  if (src == 11 && (url = getid (url,  0))) req_xstream (url, frame, fmt); else
  if (src == 31 && (url = getid (url, -6))) req_audiorealm (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  document.getElementById ("id" + frame).value = (url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_tubitv = async (id, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://tubitv.com/oz/videos/" + id + "/content";

try
{ 
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();
  url = jsonData.url; if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    var n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_vidnode = async (id, frame, fmt) =>
{
  var i, j, k, doc = "", f = [0,0,0,0,0,0,0,0], r = [360,480,720,0];

  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://vidcloud9.com"; var url = src + "/load.php?id=" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else try
{
  response = await fetch (cors_kraker + src + "/download?id=" + id);
  textData = await response.text();

  k = textData.substr (textData.search ('"dowload"'), 2000);
  var sub = k.split ('href="');

  for (i = 1; i < sub.length; i++)
  {
    k = sub[i];
    if (k.search ("360P") > 0) f[0] = i;
    if (k.search ("480P") > 0) f[1] = i;
    if (k.search ("720P") > 0) f[2] = i;
    if (k.search ("orginalP") > 0) f[3] = i;
  }

  for (i = 0; i < 4; i++)
  {
    if (!(j = f[i])) continue;
    k = sub[j]; k = k.substr (0, k.search ("&title"));
    sub[j] = k.replace (/&amp;/g, "&"); j = r[i];

    doc = doc + "&nbsp; <a href='" + k + "'>" + (j ? j + "p" : "Original") + "</a> ";
  }

  download_doc = head + "VidNode download links (" + id + "):" + doc + tail;
  i = getformat (f, fmt); if ((j = argformat (i)) < 0) i = 0; else i = f[j];

  if (!cors_kraker) if (!i) url = ""; else
  {
    url = sub[i]; fmt = r[j]; fixformat (f, frame);
  }

} catch (err) { console.log (err); }

if (fmt) if (!cors_kraker) { if (!doc || !url) busy = 0; } else try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = "sources:\\[\\{file:"; var n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 300);
    n = url.search ("\\.m3u8");
  }

  if (n < 0)
  {
    response = await fetch (cors_kraker + src + "/streaming.php?id=" + id);
    textData = await response.text();

    s = "window.urlVideo = '"; n = textData.search (s);
    url = textData.substr (n + s.length, 300);
    n = url.search ("\\.m3u8");
  }

  if (n < 0) throw ("!!!"); url = url.substr (0, url.search ("'"));

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + "~*" + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
    n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
  }
  url = cors_kraker + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_xhamster = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0,0,0,0,0];

  var tag = "xhamster"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://xhamster.com/embed/" + id;

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '"standard":';
  var n = textData.search (s); if (n < 0) throw ("!!!");
  var sub = textData.substr (n + s.length);
  sub = sub.substr (0, sub.search ("\\}\\]\\}") + 3);
  sub = JSON.parse (sub);

  if (sub.mp4 && (n = sub.mp4.length)) for (i = 0; i < n; i++)
  {
    k = sub.mp4[i].quality; k = k.substr (0, k.search ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if (sub.vp9 && (n = sub.vp9.length)) for (i = 0; i < n; i++)
  {
    k = sub.vp9[i].quality; k = k.substr (0, k.search ("p"));
    if ((j = chkformat (k) + 4) >= 4) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");

  if (j < 4)
    { url = sub.mp4[n].url; fmt = r[j] + "m"; } else
    { url = sub.vp9[n].url; fmt = r[j] + "w"; }

  if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_clipwatching = async (id, frame, fmt) =>
{
  var tag = "clipwatch"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://clipwatching.com/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:"; var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 500); url = url.substr (url.search ("http"));
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cloudvideo = async (id, frame, fmt) =>
{
  var tag = "cloudvideo"; if (is_busy (frame)) return;
  var url = "https://cloudvideo.tv/embed-" + id + ".html";
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

  if (url.search ("m3u8") > 0) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_gounlimited = async (id, frame) =>
{
  var tag = "gounlimited"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://gounlimited.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("'\\|\\|\\|"); if (n < 0) throw ("!!!");

  url = textData.substr (n - 3, 2000);
  url = url.substr (url.search ("\\|mp4\\|") + 5);
  var sub = url.split ("|");

  url = "https://" + sub[1] + ".gounlimited.to/" + sub[0] + "/v.mp4";

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_prostream = async (id, frame, fmt) =>
{
  var tag = "prostream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://prostream.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.search ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 1500);
  sub = sub.substr (0, sub.search ("script") - 4);
  eval ("sub=" + sub); url = sub.substr (sub.search ("http"));

  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");
  if (url.search ("m3u8") > 0) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_upstream = async (id, frame, fmt) =>
{
  var tag = "upstream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://upstream.to/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();
/*
  var n = textData.search ("'n','"); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + 5, 150); url = url.substr (0, url.search ("'"));
  url = "https://upstream.to/dl?op=download_orig&id=" + id + "&mode=n&hash=" + url;

  if (cors_kraker) url = "*" + url;

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  n = textData.search ('<span><a href="'); if (n < 0) throw ("!!!");

  url = textData.substr (n + 15, 200); url = url.substr (0, url.search ('"'));
*/
  var n = textData.search ("file:"); if (n < 0) throw ("!!!");

  url = textData.substr (n + 6, 200);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

  if (url.search ("m3u8") > 0) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_videobin = async (id, frame, fmt) =>
{
  var tag = "videobin"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://videobin.co/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.search ("sources:"); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); var sub = url.split ("http");
  var s = ""; if (sub.length < 2) throw ("!!!");

  for (n = 1; n < sub.length; n++)
  {
    url = sub[n];
    if (url.search ("m3u8") > 0) s = url;
    if (url.search ("\\.mp4") > 0) { n = 0; break; }
  }

  if (n) if (s) url = s; else throw ("!!!");
  url = "http" + url.substr (0, url.search ('"'));
  if (n) stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidlox = async (id, frame, fmt) =>
{
  var tag = "vidlox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidlox.me/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "sources:";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000);
  var sub = url.split ("http"); if (sub.length < 2) throw ("!!!");

  if (sub [1].search ("mp4")  > 0) n =  1; else
  if (sub [2].search ("mp4")  > 0) n =  2; else
  if (sub [1].search ("m3u8") > 0) n = -1; else
  if (sub [2].search ("m3u8") > 0) n = -2; else throw ("!!!");

  if (n < 0) { n = -n; stream_all (frame, 1); }

  url = "http" + sub [n];
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_vidoza = async (id, frame, fmt) =>
{
  var tag = "vidoza"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidoza.net/embed-" + id + ".html";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.search ('"'));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_xstream = async (id, frame, fmt) =>
{
  var i, j, k, sub, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "xstream"; if (is_busy (frame)) return;
  var url = getid (id, 15); if (!url) url = getid (id, 11);
  if (!url) { document.getElementById ("id" + frame).value = "Invalid ID"; return; }

  id = url; url = "https://xstreamcdn.com/v/" + id;
  document.getElementById ("id" + frame).value = tag + " (ID)";

if (document.getElementById ("mov" + frame + "c").checked) fmt = 0; else
try
{
  url = "https://xstreamcdn.com/api/source/" + id;

  response = await fetch (cors_kraker + url, { method: 'POST' } );
  jsonData = await response.json();
  
  sub = jsonData.data; if (!jsonData.success) throw ("!!!");

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].label; k = k.substr (0, k.search ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (k = f[j] - 1) < 0) throw ("!!!");
  fmt = r[j]; if (!(url = sub[k].file)) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_audiorealm = async (id, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "http://audiorealm.com/station/listen/id/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "'listenurl'>";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.search ("<"));
  if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digmovie = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.options[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value;

  if (src == 1 ) dig_tubitv (doc, frame, fmt); else
  if (src == 2 ) dig_vidnode (doc, frame, fmt); else
  if (src == 3 ) dig_123movies (doc, frame, fmt); else
  if (src == 4 ) dig_streamlord (doc, frame, fmt); else
  if (src == 5 ) dig_unistream (doc, frame, fmt); else
  if (src == 10) dig_general (doc, frame, fmt); else
  if (src == 31) dig_audiorealm (doc, frame, fmt); else

  document.getElementById ("id" + frame).value = "Not supported";
}
////////////////////

const dig_tubitv = async (doc, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  var url = doc; var n = url.search (":");
  if (n > 0) url = url.substr (n + 3);
  url = url.split ("/"); url = url [url.length - 2];
  if (url.length < 5 || url.length > 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_tubitv (url, frame, fmt);
}
////////////////////

const dig_vidnode = async (doc, frame, fmt) =>
{
  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "<iframe src=";
  var n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 100);
  url = url.substr (url.search ("id=") + 3);
  if ((n = url.search ("=")) > 0) url = url.substr (0, n);
  if ((n = url.search ("&")) > 0) url = url.substr (0, n);

  if (url.length < 6 || url.length > 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_vidnode (url, frame, fmt);
}
////////////////////

const dig_123movies = async (doc, frame, fmt) =>
{
  var s, n, epi, srv, pid, f = [0,0,0,0,0,0,0,0];

  var tag = "123movies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  n = textData.search ("type: 'POST'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 800);

  if ((n = url.search ("Player")) > 0)
  {
    s = url.substr (n + 8); s = s.split (",");
    epi = s[0]; epi = epi.substr (0, epi.length - 1);
    srv = s[1].substr (1); pid = s[2].substr (1);
  }
  else
  {
    n = textData.search ("halim-info"); if (n < 0) throw ("!!!");
    s = textData.substr (n, 100); s = s.split ('="');

    pid = s[1]; pid = pid.substr (0, pid.search ('"'));
    srv = s[2]; srv = srv.substr (0, srv.search ('"'));
    epi = s[3]; epi = epi.substr (0, epi.search ('"'));
  }

  url = url.substr (url.search ("nonce"));
  url = url.substr (url.search ("'") + 1);
  url = url.substr (0, url.search ("'"));

  var id = url + "-" + pid + "-" + srv + "-" + epi;
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=halim_ajax_player&nonce=" + url + "&episode=" + epi + "&server=" + srv + "&postid=" + pid;
  url = doc.substr (doc.search ("//") + 2); url = url.substr (0, url.search ("/"));
  url = cors_bypass + "https://" + url + "/wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  s = '360p","u":"'; n = textData.search (s); if (n > 0) f[0] = n + s.length;
  s = '480p","u":"'; n = textData.search (s); if (n > 0) f[1] = n + s.length;
  s = '720p","u":"'; n = textData.search (s); if (n > 0) f[2] = n + s.length;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  if (n == 0) fmt = 360;
  if (n == 1) fmt = 480;
  if (n == 2) fmt = 720;

  url = textData.substr (f[n], 1000);
  url = url.substr (0, url.search ('"'));
  url = window.atob (url);
  
} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_streamlord = async (doc, frame, fmt) =>
{
  var tag = "streamlord"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

if (!cors_kraker) busy = 0; else try
{
  response = await fetch (url, allow_cookie (tag, ""));
  textData = await response.text();

  var s, n = textData.search ("redirected");
  
  if (n > 0 && n < 100)
  {
    s = crack_cloudproxy (textData); if (!s) throw ("!!!");
    response = await fetch (url, allow_cookie (tag, s));
    textData = await response.text();
  }

  s = 'return\\("'; n = textData.search (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length - 1, 500);
    url = url.substr (0, url.search ('"'));
    if (url == "") throw ("!!!");
  }
  else
  {
    n = textData.search ("'com\\|8080\\|"); if (n < 0) throw ("!!!");
    url = textData.substr (n+1, 500); url = url.substr (0, url.search ("'"));

    var sub = url.split ("|"); if (sub.length < 12) throw ("!!!");
    for (n = 1; n < 10; n++) if (!sub[n]) break;
    s = n < 10 ? n : sub[n]; sub.splice (n, 1);

    url = "http://" + sub[3] + ".streamlord.com:8080/" + sub[5] + "/" + sub[6];
    url = url + "/" + s + "/" + sub[9] + ".mp4?wmsAuthSign=" + sub[10] + "=";
  }

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_unistream = async (doc, frame, fmt) =>
{
  var s, n, f = [0,0,0,0,0,0,0,0];

  var tag = "unistream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc; var src = "https://uniquestream.net/";

if (!cors_kraker) busy = 0; else
try
{ 
  response = await fetch (url);
  textData = await response.text();

  n = textData.search ("'player-option-1'"); if (n < 0) throw ("!!!");
  url = textData.substr (n, 150); s = url.split ("='");

  var typ = s[2]; typ = typ.substr (0, typ.search ("'"));
  var pid = s[3]; pid = pid.substr (0, pid.search ("'"));
  var num = s[4]; num = num.substr (0, num.search ("'"));

  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "action=doo_player_ajax&post=" + pid + "&nume=" + num + "&type=" + typ;
  url = doc.substr (doc.search ("//") + 2); url = url.substr (0, url.search ("/"));
  url = cors_kraker + src + "wp-admin/admin-ajax.php";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.search ("src='") + 5);
  url = url.substr (0, url.search ("'")); if (url == "") throw ("!!!");
  n = url.search ("&"); if (n > 0) url = url.substr (0, n);

  response = await fetch (cors_kraker + "*" + src + "*https:" + url);
  textData = await response.text();

  n = textData.search ("progressive:"); if (n < 0) throw ("!!!");
  url = textData.substr (n, textData.search ("poster:") - n);
  var sub = url.split ('"url":"'); if (sub.length < 2) throw ("!!!");

  for (n = 1; n < sub.length; n++)
  {
    url = sub[n];
    if (url.search ("360p") > 0) f[0] = n;
    if (url.search ("480p") > 0) f[1] = n;
    if (url.search ("720p") > 0) f[2] = n;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0) throw ("!!!");

  n = f[n]; url = sub [n]; fmt = pixformat (n);
  url = url.substr (0, url.search ('"')); if (url == "") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_general = async (doc, frame, fmt) =>
{
  var s, n, src;
  var source = ["gounlimited.to","www.fembed.com"];

  var tag = "general"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();
/*
  s = '<source src="'; n = textData.search (s);

  if (n > 0)  // lunchflix.com
  {
    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.search ('"'));
    if (url != "") busy = -busy;
  }
  if (busy > 0) for (src = 0; src < source.length; src++)
*/

  for (src = 0; src < source.length; src++)
  {
    s = "/" + source [src] + "/"; n = textData.search (s);

    if (n > 0)
    {
      url = textData.substr (n, 100);
      url = url.substr (0, url.search ('"'));

      s = "/e/"; n = url.search (s);
      if (n < 0) { s = "/v/"; n = url.search (s); }
      if (n < 0) { s = "/embed-"; n = url.search (s); }
      if (n < 0) { s = "/stream/"; n = url.search (s); }
      if (n < 0) continue;

      url = url.substr (n + s.length);
      n = url.search ("/"); if (n > 0) url = url.substr (0, n);
      n = url.search ("\\."); if (n > 0) url = url.substr (0, n);
      if (url != "") break;
    }
  }

  if (busy > 0 && src >= source.length) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (busy < 0)
  {
    no_fail (frame); no_format (frame);
    loadwindow (url, frame, tag + ": id-none");
    return;
  }
  busy = -busy; if (!no_fail (frame)) return;

  if (src == 0) req_gounlimited (url, frame, fmt);
  if (src == 1) req_xstream (url, frame, fmt);
}
////////////////////

const dig_audiorealm = async (doc, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var url = doc.substr (doc.search ("play") + 5);
  url = url.substr (0, url.search ("/"));

  if (url.length < 3 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_audiorealm (url, frame, fmt);
}
////////////////////

//////////////////////////////
///// INTERNET TV (IPTV) /////
//////////////////////////////

var open_livestream = function (url, frame, fmt)
{
  var n, z = frame, f = [0,0,0,0,0,0,0,0]; if (busy) return;

  if (url [0] == "~") url = url.substr (1);

  if (url [0] == "/")
  {
    var s = url.split (" "); var t = (s[0] + "/////").split ("/");
    f[0] = t[1] * 1; f[1] = t[2] * 1; f[2] = t[3] * 1;
    f[4] = t[4] * 1; f[5] = t[5] * 1; f[6] = t[6] * 1;
    fmt = getformat (f, fmt); if ((n = argformat (fmt)) < 0) return;
    n = f[n]; if (n != Math.trunc (n)) n = (n * 10) % 10;
    url = s[n]; if (n <= 0 || !url) return;
  }

  n = url.search (":"); if (n > 3) return;
  var src = url.substr (0, n); url = url.substr (n+1);

  if (src == "a") { open_radio ("https://www.iheart.com/live/" + url + "/?embed=true"); return; }
  if (src == "b") { open_radio ("http://virtualdjradio.com/" + url + "/"); return; }

  if (src == "0") { request (url, frame, -fmt); return; }

  document.getElementById ("id" + frame).value = "Tuning...";

  if (src == "1") open_tv0 (z, 0, f, fmt, "*http://123tvnow.com*http://docs-8.gogleusercontent.host/" + url + "/playlist.m3u8");

  if (src == "7") open_tv0 (z, 0, f, fmt, url);
  if (src == "8") open_tv0 (z, 1, f, fmt, url);
  if (src == "9") open_tv0 (z, 1, f, fmt, cors_bypass + url);

  if (src == "1a") open_tv1 (z, 1, f, fmt, url, "ustv247.tv");
  if (src == "1b") open_tv1 (z, 1, f, fmt, url, "ustvgo.tv");
  if (src == "1c") open_tv1 (z, 1, f, fmt, url, "watchnewslive.tv");
  if (src == "2a") open_tv2 (z, 1, f, fmt, url, "http://www.freeintertv.com");
  if (src == "3a") open_tv3 (z, 0, f, fmt, url, "http://www.arconaitv.us");
  if (src == "4a") open_tv4 (z, 0, f, fmt, url, "https://www.streamlive.to");
  if (src == "5a") open_tv5 (z, 0, f, fmt, url, "https://ustreamix.su");
  if (src == "6a") open_tv6 (z, 0, f, fmt, url, "http://123tvnow.com");
  if (src == "7a") open_tv7 (z, 0, f, fmt, url, "https://www.janjua.tv");
}
////////////////////

var open_radio = function (url)
{
  var w = 360, h = 480;

  var specs = "width=" + w + ",height=" + h + ",top=100" + ",left=100";

  var win = window.open (url, "radiobox", specs); win.focus();
}
////////////////////

const open_tv0 = async (frame, mode, f, fmt, url) =>
{
  var n; if (is_busy (frame)) return;

  if (url.substr (0,1) == "*") if (cors_kraker) url = cors_kraker + "~" + url; else
  {
    url = url.substr (1); n = url.search ("\\*"); if (n >= 0) url = url.substr (n + 1);
  }

if (stream_all (frame, 1)) fmt = mode = 0; else
{
  var x = 0; n = getformat (f, fmt);
  if ((n = argformat (n)) >= 0)
  {
    x = pixformat (n); n = f[n];
    if (n != Math.trunc (n)) x = Math.trunc (n);
  }
  if (mode) mode = (x ? x : 2); else { fmt = x; mode = 1; }
}

if (mode > 1) try
{
  response = await fetch (url);
  textData = await response.text();

  var sub = crack_m3u8 (url, textData, frame, fmt); if (sub == "") throw ("!!!");
  n = sub.search ("<>"); fmt = sub.substr (n + 2); url = sub.substr (0, n);

  fmt = fmt * 1; if (fmt && mode > 2) fmt = mode; else mode = 0;

} catch (err) { console.log (err); busy = 0; }

  if (mode) fixformat (f, frame); else if (!fmt) no_format (frame);
  fmt = " [" + fmt + "]"; if (no_fail (frame)) loadwindow (url, frame, "Internet TV" + fmt);
}
////////////////////

const open_tv1 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = cors_kraker + "https://" + src + "/player.php?" + url;

  response = await fetch (url);
  textData = await response.text();

  n = textData.search ("file: "); if (n < 0) throw ("!!!");
  url = textData.substr (n + 6, 500); s = url.substr (0,1);
  url = url.substr (1); url = url.substr (0, url.search (s));

  if (!url) throw ("!!!"); freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.freeintertv.com  format: ????????  360p
const open_tv2 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "chname=" + url + "&html5=11";

  sub = url; url = cors_kraker + src + "/myAjax/get_item_m3u8/";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.search ("http"));
  url = url.substr (0, url.search ("'"));
  if (url == "") throw ("!!!");

  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.arconaitv.us  format: id=###  360p
const open_tv3 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/stream.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("eval\\("); if (n < 0) throw ("!!!");
  url = textData.substr (n + 5); n = url.search ("\\}\\)\\)");
  url = url.substr (0, n + 2); eval ("s=" + url);

  url = s.substr (s.search ("http"));
  url = "*,,*" + url.substr (0, url.search ("'"));
  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.streamlive.to  format: view/#####  360p
const open_tv4 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "player="; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n, 1000); url = url.substr (url.search ("return") + 6);
  n = url.search ("join") + 4; s = url.substr (0, n) + "(''))";
  url = url.substr (n); eval ("src='https:'+" + s);

  n = url.search ("join"); s = url.substr (0, n - 1); url = url.substr (n + 8);
  url = url.substr (url.search ('"') + 1); url = url.substr (0, url.search ('"'));

  s = "var " + s.substr (s.search ("\\+") + 2);
  n = textData.search (s); if (n < 0) throw ("!!!");

  s = textData.substr (n, 1000); s = s.substr (s.search ("\\["));
  s = s.substr (0, s.search ("\\]") + 1); src = src + eval ("s=" + s + ".join('')");

  s = "id=" + url + ">"; n = textData.search (s); if (n < 0) throw ("!!!");
  s = textData.substr (n + s.length, 60); src = src + s.substr (0, s.search ("<"));

  url = "**" + src; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://ustreamix.su  format: id=####  720p
const open_tv5 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/embed.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "window.open\\("; n = textData.search (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = src + url.substr (0, url.search ("&"));

  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  n = textData.search ("eval\\("); if (n < 0) throw ("!!!");
  url = textData.substr (n + 5); url = url.substr (0, url.search ("<\/script>") - 2);

  eval ("s=" + url); url = s.substr (s.search ("http"));
  url = url.substr (0, url.search ('"'));

  var response = await fetch (cors_kraker + url);
  var textData = await response.text();

  if ((n = textData.search ("\\|m3u8\\|")) < 0) throw ("!!!");
  url = textData.substr (n - 1000, 1500);

  if ((n = url.search ("eval\\(")) < 0) throw ("!!!");
  url = url.substr (n + 5); url = url.substr (0, url.search ("<\/script>") - 2);

  eval ("s=" + url); eval (s + "url = 'https://' + host_tmg + '/' + file_name + '?token=' + jdtk");

  url = "*" + src + ",,png*" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://123tvnow.com  format: watch/?????  360p
const open_tv6 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = src + "/" + url + "/";

  // dynamically load the cryptography module
  // this will happen as we wait for the fetch
  // original source: https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js

  var crypto = document.getElementById ("cryptojs");
  if (!crypto.src) crypto.src = cors_kraker + "crypto.js";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("E\\.d\\('"); if (n < 0) throw ("!!!");
  url = textData.substr (n + 5, 1500); n = url.search ("'");

  s = url.substr (0, n); var t = url.substr (n + 3); t = t.substr (0, t.search ("'"));
  url = url.substr (url.search ("\\+='") + 3); url = url.substr (0, url.search ("'"));

  // decryption algo found in http://123tvnow.com/min/82964.js

  var e = JSON.parse (window.atob (s));
  var o = CryptoJS.enc.Hex.parse (e.salt);
  var p = CryptoJS.enc.Hex.parse (e.iv);
  n = e.iterations; s = e.ciphertext;

  var q = CryptoJS.PBKDF2 (t, o, { hasher: CryptoJS.algo.SHA512, keySize: 8, iterations: n });
  var r = CryptoJS.AES.decrypt (s, q, { mode: CryptoJS.mode.CBC, iv: p });

  url = "~*" + src + "/*" + r.toString (CryptoJS.enc.Utf8) + url;

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData[0].file; if (!url) throw ("!!!");
  url = "*" + src + "/,,*" + url; freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://www.janjua.tv  format:stream_fare?????  480p
const open_tv7 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub; if (is_busy (frame)) return;

if (!cors_kraker) busy = 0; else if ((sub = saved_path (url))) url = sub; else try
{
  sub = url; url = "*" + src + "/hembedplayer/" + url + "/4/600/400";

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("loadbalancer"); if (n < 0) throw ("!!!");
  var id = textData.substr (n + 13, 30); id = id.substr (0, id.search ('"'));
  n = textData.search ("enableVideo"); if (n < 0) throw ("!!!");
  var pk = textData.substr (n + 13, 90); pk = pk.substr (0, pk.search ('"'));

  n = textData.search ("janjua.js"); if (n < 0) throw ("!!!");
  url = textData.substr (n - 40, 100); url = url.substr (url.search ("http"));
  url = url.substr (0, url.search ("'"));

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.search ("\\{return"); if (n < 0) throw ("!!!");
  s = textData.substr (n + 7, 100); s = s.substr (0, s.search ("\\}"));

  eval ("var a=pk;pk=" + s); url = "https://tvportremote.com/loadbalancer?" + id;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = textData.substr (textData.search ("=") + 1);
  url = "https://" + url.substr (0, url.search ("\\.")) + ".janjua.pw:8088/live/";
  url = url + sub + "/playlist.m3u8?id=" + id + "&pk=" + pk;

  freetv [sub] = the_time + " " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

var saved_path = function (name)
{
  var n, time, path;

  if (!(path = freetv [name])) path = ""; else
  {
    n = path.search (" "); time = path.substr (0, n) * 1;
    path = path.substr (n + 1); if (time < the_time - 15000) path = "";
  }
  return (path);
}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});

  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];

  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

var crack_cloudproxy = function (data)
{
  var n, s, x, url;

try
{
  n = data.search ("S='"); if (n < 0) throw ("");

  data = data.substr (n + 3);
  data = data.substr (0, data.search ("'"));
  data = window.atob (data);

  s = ";document.cookie="; n = data.search (s); if (n < 0) throw ("");
  url = eval (data.substr (2, n - 2));

  data = data.substr (n + s.length); n = data.search ('"="');
  url = eval (data.substr (0, n + 3)) + url;

} catch (err) { url = ""; }

  return (url);
}
////////////////////

/*
var crack_cloudflare = function (data)
{
  var n, s, p, q, x, form, action;

try
{
  form = data.substr (data.search ("<form")); if (!form) throw ("???");
  action = form.substr (form.search ("action=") + 8);
  action = action.substr (0, action.search ('"')) + "?";
  form = form.split (' name="');

  for (n = 0; n < form.length; n++)
  {
    q = form[n]; x = q.search ('" value="'); if (x < 0) continue;
    p = q.substr (0, x); q = q.substr (x + 9); q = q.substr (0, q.search ('"'));
    action = action + p + "=" + q + "&";
  }

  n = data.search ("k,i,n,g,f, "); if (n < 0) throw ("err2");

  s = data.substr (n + 11, 1000);
  data = data.substr (n, data.search ("a\\.value") - n);

  n = s.search (":"); p = s.substr (0, n - 1); s = s.substr (n + 1);
  n = p.search ("="); p = p.substr (0, n) + "." + p.substr (n + 3);
  s = s.substr (0, s.search ("\\}"));

  x = eval (s); q = data.split (p);
  for (n = 1; n < q.length; n++) x = eval ("x" + q[n]);

  action = action + "jschl_answer=" + x.toFixed (10);

} catch (err) { console.log (err); action = ""; }

  return (action);
}
////////////////////
*/

//////////////////////////
///// INTERNET RADIO /////
//////////////////////////

var radio = function (url)
{
  document.getElementById ("ir_url").value = url;
  ir_action (0); if (url) ir_action (2);
}
////////////////////

var ir_action = function (mode)
{
  var win = document.getElementById ("internet_radio");
  var pop = document.getElementById ("ir_popup");
  var sts = document.getElementById ("ir_status");
  var vol = document.getElementById ("ir_volume");
  var url = document.getElementById ("ir_url").value;

  var src_ok = (win.src && win.src != "file:///");
  var volume = vol.value * 1;

  if (mode == 3)
  {
    sts = pop.checked; pop.checked = !sts;
    pop.className = (sts ? "is_off" : "is_on");
    return;
  }

  if (mode == 2 && url.length == 11 && url.search (":") < 0)
  {
    url = invidious_url + "/latest_version?local=true&itag=251&id=" + url;
    document.getElementById ("ir_url").value = url;
  }

  if (mode == 2 && pop.checked && url)
  { loadwindow (url, -volume, "Internet Radio"); return; }

  if (mode == 2 && !src_ok) if (url)
  {
    if (last_time > get_time() - 2) mode = 0; else win.src = url; last_time = the_time;
  }
  else
  {
    url = document.getElementsByName ("ir");
    for (var i = 0; i < url.length; i++) if (url[i].checked) url[i].onclick();
    return;
  }

  if (mode == 0 || (mode == -2 && src_ok))
  { sts.value = (mode ? "ERROR" : "Stopped"); win.pause(); win.src = "file:///"; }

  if (mode == 2 || (mode == -1 && src_ok))
  { sts.value = "Playing"; win.play(); }

  if (mode == 1 && src_ok)
  { sts.value = "Paused"; win.pause(); }

  if (mode == 4 && volume > 0) volume -= volume > 40 ? 10 : 5;
  if (mode == 5 && volume < 100) volume += volume < 40 ? 5 : 10;

  win.muted = true; win.volume = volume / 100;
  win.muted = false; vol.value = volume;
}
////////////////////

var popper = function (frame, mode)
{
  var i, j, k, val = txt = "";
  var win = document.getElementById ("pop" + frame);
  var index = win.style.zIndex; if (!index) index = -1;
  var multi = document.getElementById ("mov" + frame + "m").checked;

  if (busy) return;

  if (mode.length != undefined)
  {
    txt = mode.substr (mode.search ("<>") + 2);
    val = mode.substr (0, mode.search ("<>"));
    txt = txt.substr (txt.search (" ") + 1);
    if (val == "") mode = multi = 1;
  }

  if (mode && mode.length == undefined)
  {
    if (mode == 1) win.style.zIndex = multi ? -index : index;
    if (mode == 2) win.style.zIndex = -1;
    if (mode == 3) win.style.zIndex = -2;
    if (mode == 4) win.style.zIndex = multi ? 2 : -2;
    return;
  }

  var box = document.getElementById ("stk" + frame);
  var doc = win.getElementsByTagName ("table");

  if (doc.length < 2 || !(doc = doc [1])) doc = null;
  if (doc) doc = doc.getElementsByTagName ("button");
  if (!doc || doc.length < 2) doc = null;

  if (mode)
  {
    if (doc)
    {
      for (i = 0; i < doc.length - 1; i++) if (txt == doc[i].innerText) break;

      for (; i > 0; i--)
      {    
        doc[i].value = doc[i-1].value; doc[i].innerText = doc[i-1].innerText;
      }
      doc[0].value = mode; doc[0].innerText = txt;
    }
    error = val;
    if (frame == 5) loadid (frame, 2);
    if (frame == 6) loadnews (frame, 2);
    if (frame == 7) loadmovie (frame, 2);
    return;
  }

  var start = '<button onclick="javascript:popper(' + frame + ',this.value)" value="';
  var middle2 = '" style="background-color:powderblue">';
  var middle1 = '" style="background-color:pink">';
  var pop = "<table><tr><td>";

  var n = Math.floor (((i = box.length) + 2) / 3);
  if ((i -= 45) > 0) n = 15; else i = 1;

  for (j = k = 0; k < 3; i++)
  {
    if (i >= box.length) { val = ""; txt = "-"; } else
      { val = box.options[i].value; txt = box.options[i].innerText; }
    pop = pop + start + val + "<>" + txt + middle1 + txt + "</button><br>";
    if (++j >= n) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  pop = pop + "</td></tr></table><table><tr><td>";

  for (i = 0, j = k = 0; k < 3; i++)
  {
    if (!doc || i >= doc.length) { val = ""; txt = "-"; } else
      { val = doc[i].value; txt = doc[i].innerText; }
    pop = pop + start + val + middle2 + txt + "</button><br>";
    if (++j >= 4) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  win.innerHTML = pop + "</td></tr></table>";
  if (multi) win.style.zIndex = 1;
}
////////////////////

//////////////////////
///// LOADWINDOW /////
//////////////////////

var loadwindow = function (url, frame, site)
{
  var h, w, win, raw, title, insert, specs;

  var bstyle = "<body style='margin:0;padding:0;background-color:";
  var istyle = " style='position:absolute;width:100%;height:100%;border:none;outline:none'";
  var vstyle = " autoplay allowfullscreen controls ";

  get_time();

  if (url == "")
  {  
    if (site) document.getElementById ("id" + frame).value = site;
    document.getElementById ("vid" + frame).innerHTML = "No Video";
    win = document.getElementById ("mov" + frame); doc = win.parentNode;
    doc.removeChild (win); win.src = "about:blank"; doc.appendChild (win);
    return;
  }

  if (last_time > the_time - 2) return; last_time = the_time;

  if (frame <= 0)
  {
    insert = "<!DOCTYPE html><html><head><title>" + site + "</title></head>" + bstyle;
    insert = insert + "cornflowerblue;color:turquoise;text-align:center'><h1><i>" + site + "</i></h1>";
    insert = insert + "<audio controls style='position:absolute;left:0;bottom:0;width:100%;height:45px' ";
    insert = insert + "id='audio'></audio></body></html>";
    specs = "width=500,height=130,top=100,left=100";

    win = window.open ("about:blank", "audiobox", specs); win.focus();
    win = win.document; win.open(); win.write (insert); win.close();
    win = win.getElementById ("audio"); win.src = url;
    win.volume = frame / -100; win.play();
    return;
  }

  var multi = document.getElementById ("mov" + frame + "m").checked;
  var nplay = document.getElementById ("mov" + frame + "n").checked;

  if (document.getElementById ("mov" + frame + "a").checked) raw = 0; else
  if (document.getElementById ("mov" + frame + "b").checked) raw = 1; else
  if (document.getElementById ("mov" + frame + "c").checked) raw = 2; else raw = 0;

  if (site != "")
  {
    if (typeof (url) != "string" || url.search ("http") != 0)
    {
      document.getElementById ("vid" + frame).innerHTML = "Bad URL";
      return;
    }

    document.getElementById ("id" + frame).value = site;
    document.getElementById ("line" + frame).value = url;

    if (nplay)
    {
      document.getElementById ("vid" + frame).innerHTML = "No Play";
      return;
    }
  }

  ir_action (1);

  if (raw == 1)
  {
    title = "Wrapper";
    insert = "'><video" + istyle + vstyle + "id='video'></video></body>";
  }

  if (raw == 2)
  {
    title = "Sandbox";
    insert = "'><iframe" + istyle + vstyle + "src='" + url +
      "' sandbox='allow-scripts allow-same-origin allow-forms'></iframe></body>";
  }

  if (document.getElementById ("btn" + frame + "b").checked)
  {
    var lft, top;

    win = document.getElementById ("win" + frame);
    if (!(specs = win.value)) specs = win.options[0].value;

    h = specs.search (":");
    w = specs.substr (0, h);
    h = specs.substr (h + 1);

    lft = (window.screen.width - w)  / 2;
    top = (window.screen.height - h) / 3;

    specs = "width=" + w + ",height=" + h + ",top=" + top + ",left=" + lft;
  }

  else if (document.getElementById ("btn" + frame + "a").checked)
  {
    h = w = 0; specs = "";
  }

  else
  {
    document.getElementById ("vid" + frame).innerHTML = "No Video";
    win = document.getElementById ("mov" + frame);

    if (raw != 1) win.src = url; else
    {
      win = win.contentDocument; insert = bstyle + "black" + insert;
      load_stream (frame, true, insert, url, win);
    }
    return;
  }

  if (multi) vidwin = null; else if (h != last_h || w != last_w || raw != last_raw)
  {
    if (vidwin) vidwin.close(); vidwin = null;
  }
  if (!vidwin || vidwin.closed) vidwin = window.open ("about:blank", "_blank", specs);
  last_h = h; last_w = w; last_raw = raw;

  win = vidwin.document; if (win.body.onunload) win.body.onunload();

  if (raw == 0) vidwin.location = url; else
  {
    istyle = "<!DOCTYPE html><html><head><title>" + title + "</title></head>";
    insert = istyle + bstyle + "black" + insert + "</html>";
    load_stream (frame, false, insert, url, win);
  }
  vidwin.focus(); document.getElementById ("vid" + frame).innerHTML = "";
}
////////////////////

var oops = function (frame, fatal)
{
  if (fatal && frame > 0)
  {
    reset_frame (frame);
    document.getElementById ("vid" + frame).innerHTML = "Doh!";
  }
}
////////////////////

var load_stream = function (frame, is_local, insert, url, doc)
{
  var hls_cfg = {
    debug: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    startLevel: 2,
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000
  };

  if (!doc) return; doc.open(); doc.write (insert); doc.close();

  if ((win = doc.getElementById ("video")) == undefined) return;

  if (is_local)
  {
    win.onplay  = function() { if (!this.seeking) popper (frame, 3); }
    win.onpause = function() { if (!this.seeking) popper (frame, 4); }
  }
  else
  {
    win.style.filter = document.getElementById ("mov" + frame).style.filter;
  }

  var error = ""; var hls = document.getElementById ("hls" + frame).checked;

  if (!hls)
  {
    win.src = url;
  }
  if (hls == 1) if (!window.Hls) error = "HLS"; else
  {
    var vid = new Hls (hls_cfg);
    vid.loadSource (url);
    vid.attachMedia (win);
    if (is_local) vid.on (Hls.Events.ERROR, function (event,data) { oops (frame, data.fatal) });
    doc.body.onunload = function() { vid.destroy(); console.log ("HLS player unloaded."); }
  }
  if (hls == 2) if (!window.dashjs) error = "DASH"; else
  {
    var vid = dashjs.MediaPlayer().create();
    // vid.getDebug().setLogToBrowserConsole(false);   // turn off fracking console messages!
    vid.initialize (win, url, true);
//    if (is_local) win.onerror = function (err) { console.log (err) };
    doc.body.onunload = function() { vid.reset(); console.log ("DASH player unloaded."); }
  }

  if (error) alert (error + " player seems to be missing! Try reloading the page.\n\n" +
      " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}

////////////////////

/*  HLS configuration options (https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning)

var config = {
      autoStartLoad: true,
      startPosition: -1,
      debug: false,
      capLevelOnFPSDrop: false,
      capLevelToPlayerSize: false,
      defaultAudioCodec: undefined,
      initialLiveManifestSize: 1,
      maxBufferLength: 30,
      maxMaxBufferLength: 600,
      maxBufferSize: 60*1000*1000,
      maxBufferHole: 0.5,
      lowBufferWatchdogPeriod: 0.5,
      highBufferWatchdogPeriod: 3,
      nudgeOffset: 0.1,
      nudgeMaxRetry: 3,
      maxFragLookUpTolerance: 0.25,
      liveSyncDurationCount: 3,
      liveMaxLatencyDurationCount: Infinity,
      enableWorker: true,
      enableSoftwareAES: true,
      manifestLoadingTimeOut: 10000,
      manifestLoadingMaxRetry: 1,
      manifestLoadingRetryDelay: 1000,
      manifestLoadingMaxRetryTimeout: 64000,
      startLevel: undefined,
      levelLoadingTimeOut: 10000,
      levelLoadingMaxRetry: 4,
      levelLoadingRetryDelay: 1000,
      levelLoadingMaxRetryTimeout: 64000,
      fragLoadingTimeOut: 20000,
      fragLoadingMaxRetry: 6,
      fragLoadingRetryDelay: 1000,
      fragLoadingMaxRetryTimeout: 64000,
      startFragPrefetch: false,
      fpsDroppedMonitoringPeriod: 5000,
      fpsDroppedMonitoringThreshold: 0.2,
      appendErrorMaxRetry: 3,
      loader: customLoader,
      fLoader: customFragmentLoader,
      pLoader: customPlaylistLoader,
      xhrSetup: XMLHttpRequestSetupCallback,
      fetchSetup: FetchSetupCallback,
      abrController: AbrController,
      bufferController: BufferController,
      capLevelController: CapLevelController,
      fpsController: FPSController,
      timelineController: TimelineController,
      enableWebVTT: true,
      enableCEA708Captions: true,
      stretchShortVideoTrack: false,
      maxAudioFramesDrift: 1,
      forceKeyFrameOnDiscontinuity: true,
      abrEwmaFastLive: 3.0,
      abrEwmaSlowLive: 9.0,
      abrEwmaFastVoD: 3.0,
      abrEwmaSlowVoD: 9.0,
      abrEwmaDefaultEstimate: 500000,
      abrBandWidthFactor: 0.95,
      abrBandWidthUpFactor: 0.7,
      abrMaxWithRealBitrate: false,
      maxStarvationDelay: 4,
      maxLoadingDelay: 4,
      minAutoBitrate: 0,
      emeEnabled: false,
      widevineLicenseUrl: undefined,
      requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess
  };
*/

//////////////////////////////
///// GENERIC BRIGHTCOVE /////
//////////////////////////////

const find_brightcove = async (doc, xtag, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var url = cors_bypass + doc;
  var tag = xtag; if (tag == "") tag = "brightcove";
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-account="';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pub = textData.substr (n + s.length, 100);
  pub = pub.substr (0, pub.search ('"'));

  s = 'data-video-id="'; n = textData.search (s);
  if (n < 0) { s = 'data-video-id-pending="'; n = textData.search (s); }
  if (n < 0) { s = 'data-brightcove-video-id="'; n = textData.search (s); }
  if (n < 0) throw ("!!!");

  var id = textData.substr (n + s.length, 100);
  id = id.substr (0, id.search ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) load_brightcove (pub, id, xtag, frame, fmt);
}
////////////////////

const load_brightcove = async (pub, id, xtag, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  if (is_busy (frame)) return;
  var tag = xtag; if (tag == "") tag = "brightcove";

  if (pub == "")
  {
    i = id.search ("-"); pub = id.substr (0, i); id = id.substr (i + 1);
  }
  
  var url = "https://players.brightcove.net/" + pub + "/default_default/index.min.js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (pub.length < 9 || pub.length > 13 || id.length < 10 || id.length > 13) throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = 'accountId:"' + pub + '",policyKey:"';
  var n = textData.search (s); if (n < 0) throw ("!!!");

  var pk = textData.substr (n + s.length, 200);
  pk = pk.substr (0, pk.search ('"'));

  url = "https://edge.api.brightcove.com/playback/v1/accounts/" + pub + "/videos/" + id;

  response = await fetch (cors_kraker + url, { headers: { 'Accept': 'application/json;pk=' + pk }, });
  textData = await response.json();

  var url_m3u8 = ""; var dat = textData.sources; if (dat == undefined) throw ("!!!");

  for (i = 0; i < dat.length; i++)
  {
    url = dat [i].src; if (url == undefined) continue;
    if (url.search ("m3u8") > 0) { url_m3u8 = url; continue; }
    k = dat [i].height; if (k == undefined) continue;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if ((k = getformat (f, fmt)))
  {
    if ((k = argformat (k)) < 0 || (k = f[k] - 1) < 0) throw ("!!!");
    url = dat [k].src; fmt = dat [k].height; fixformat (f, frame);
  }
  else
  {
    if ((url = url_m3u8) == "") throw ("!!!");
    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (url == "") throw ("!!!");
      n = url.search ("<>"); fmt = url.substr (n + 2); url = url.substr (0, n);
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (xtag == "") id = pub + "-" + id;
  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var crack_source = function (data, frame, fmt)
{
  var sub, str, url, i, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  sub = data.split ("<source src="); if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i]; j = str.search ('label="');
    str = str.substr (j + 7); str = str.substr (0, str.search ('"'));
    if ((j = str.search ("p")) > 0) str = str.substr (0, j);
    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  str = sub [f[j]]; fmt = r[j];
  url = str.substr (1); str = str.substr (0,1);
  url = url.substr (0, url.search (str)); if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

var crack_smil = function (data, frame, fmt)
{
  var sub, str, url, i, j, url, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  str = '<audio src="'; j = data.search (str);

  if (j > 0)
  {
    url = data.substr (j + str.length, 200);
    url = url.substr (0, url.search ('"'));

    if (url == "") return ""; else return (url + "<>");
  }

  sub = data.split ('<video src="');
  if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i];

    if ((j = str.search ("height")) > 0)
    {
      str = str.substr (j + 8);
      str = str.substr (0, str.search ('"'));
    }
    else if ((j = str.search ("bitrate")) < 0) continue; else
    {
      str = str.substr (j + 9);
      str = str.substr (0, str.search ('"'));
      if (str == "3500000") str = "720"; else
      if (str == "1850000") str = "504"; else

      if (str == "1700000") str = "720"; else
      if (str == "1300000") str = "504"; else
      if (str ==  "900000") str = "360"; else continue;
    }

    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  url = sub [f[j]]; fmt = r[j];
  url = url.substr (0, url.search ('"'));
  if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

///////////////////////
///// M3U8 LOADER /////
///////////////////////

var crack_m3u8 = function (path, data, frame, fmt)
{
  var f = [0,0,0,0,0,0,0,0], r = [0,0,0,0], b = [0,0,0,0];
  var sub, str, url, audio, bw, px, i, j, k;

  sub = data.split ("#EXT-X-STREAM-INF"); if (sub.length < 2) return (path + "<>");

  for (i = 1; i < sub.length; i++)
  {
    url = sub[i]; url = url.substr (0, url.search ("\n"));

    if ((j = url.search ("BANDWIDTH")) < 0) bw = 0; else
    {
      str = url.substr (j + 10); j = str.search (",");
      if (j > 0) str = str.substr (0, j); bw = str * 1;
    }

    if ((j = url.search ("RESOLUTION")) < 0) if (!bw) continue; else
    {
      // estimate video height; caution: might grab an audio track
      px = Math.trunc (Math.sqrt ((bw - 175000) * 0.2)); bw = -1;
    }
    else
    {
      url = url.substr (j + 11); j = url.search (",");
      if (j > 0) url = url.substr (0, j); j = url.search ("x");
      px = url.substr (j + 1) * 1; url = url.substr (0, j);
      // difference between ideal and actual bandwidth
      if (bw) bw -= url * px * 2 + 250000;
      if (bw > 0) bw *= 3; else bw *= -2;
    }

    if ((j = chkformat (px)) >= 0)
    {
      if (bw < 0 && b[j]) continue;
      k = ((bw >= 0 && !b[j]) || (r[j] == px && bw < b[j]));
      if (k || r[j] < px) { f[j] = i; r[j] = px; b[j] = bw + 1; }
    }
  }

  if (b[0] || b[1] || b[2])  // remove audio tracks, if any
  {
    if (!b[0]) f[0] = 0;
    if (!b[1]) f[1] = 0;
    if (!b[2]) f[2] = 0;
  }
  if (f[1] || f[2]) if (r[0] < 240) f[0] = 0;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return (path + "<>0");

  audio = sub [0]; sub = sub [f[j]].split ("\n");
  str = sub [1]; url = merge_url (path, str) + str;
  fmt = r[j]; if (!b[j]) fmt = pixformat (j);

  sub = audio.split ("#EXT-X-MEDIA");

  for (i = 1, j = -1; i < sub.length; i++)
  {
    audio = sub[i];
    if (audio.search ("TYPE=AUDIO") < 0) continue;
    if (audio.search ("DEFAULT=YES") < 0) continue;
    if ((j = audio.search ('URI="')) > 0) break;
  }

  if (j < 0) audio = ""; else
  {
    audio = audio.substr (j + 5);
    audio = audio.substr (0, audio.search ('"'));
    audio = merge_url (path, audio) + audio;
  }

  if (document.getElementById ("mov" + frame + "n").checked) make_downloader (url, audio);
  if (audio != "") return (path + "<>0"); else return (url + "<>" + fmt);
}
////////////////////

var merge_url = function (path1, path2)
{
  var url = "", sub, str, i, j, k;

  if (path2.search ("http") == 0) return "";

  sub = path1.split ("/"); str = path2.split ("/");
  if (str[0] == "") k = str.length; else k = 1;
  j = sub.length - k; if (j < 3) j = 3;

  for (i = 0; i < j; i++) url = url + sub [i] + "/";

  if (k > 1) url = url.substr (0, url.length - 1);

  return url;
}
////////////////////

//////////////////////
///// DOWNLOADER /////
//////////////////////

const make_downloader = async (vid, aud) =>
{
  var i, m, n, p = 0, url, data, name, doc, done = false, plain_text = false;

  url = vid; doc = head; download_doc = head + "Waiting for stream file..." + tail;

try
{ 
  response = await fetch (url);
  textData = await response.text();

} catch (err) { download_doc = head + "Could not get stream file." + tail; return; }

  if (aud != "") if (plain_text)
    doc = doc + "\nAudio Stream Source<br>\n" + aud + "\n<br>"; else
    doc = doc + "\n<p>\n<a href='" + aud + "'>Audio Stream Source</a>";

  if (plain_text)
    doc = doc + "\nVideo Stream Source<br>\n" + url + "\n<br>"; else
    doc = doc + "\n<p>\n<a href='" + url + "'>Video Stream Source</a>\n<br><br>";

  var sub = textData.split ("#EXTINF");

  for (i = 1; i < sub.length - 1; i++)
  {
    data = sub [i].split ("\n");
    if (!done) { url = merge_url (url, data [1]); done = true; }
    data = url + data [1];

    name = ++p; if (p < 10) name = "00" + p; else if (p < 100) name = "0" + p;

    if (plain_text)
      data = "\n<br>" + data; else
      data = "\nSegment <a href='" + data + "'>" + name + "</a>&nbsp;&nbsp;&nbsp;";

    if (!(p % 5)) data = data + "\n<br>";

    doc = doc + data;
  }

  download_doc = doc + "\n<br>\n<div style='width:10vw; height:10vw'></div>" + tail + "\n\n";
}
////////////////////

var open_downloader = function ()
{
  var downloader = window.open ();
  downloader.document.write (download_doc);
  downloader.document.close ();
}
////////////////////

</script>

</html> 
