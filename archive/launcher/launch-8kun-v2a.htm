<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="icon" href="launch-8kun.ico">
<base target="_blank">

<title>8kun Launcher</title>

<style type="text/css">

body {
  text-align: center;
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif;
  color: brown; background-color: navajowhite;
}

body.bread {
  margin: 0; overflow-y: scroll;
  font-size: 13px; line-height: 16px;
  font-family: 'verdana', 'helvetica', san-serif;
  color: #083078; background-color: navajowhite;
}

body.editor {
  margin: 0; font-size: 13px; line-height: 16px;
  font-family: 'verdana', 'helvetica', san-serif;
  color: #083078; background-color: navajowhite;
}

.postbox td {
  text-align: left; padding: 5px;
}

hr {
  border-color: burlywood; border-style: solid;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

input {
  height: 17px; font-size: 16px; outline: none;
  font-family: 'consolas', 'lucida console', monospace;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 3px 5px; caret-color: navy;
  color: firebrick; background-color: seashell;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 1px 2px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input.small {
  height: 13px; font-size:14px; text-align: center; padding: 3px 1px 2px 1px;
}

input.static {
  font-family: 'times new roman', serif; text-align: center; 
  padding: 3px 7px 3px 7px; border: 2px solid burlywood;
  color: red; background-color: cornsilk;
}

button {
  width: auto; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  outline: none; border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

a.ref:link {
  color: blue;
}

a.ref:visited {
  color: green;
}

p.listbox {
  display: inline-block; vertical-align: top;
  text-align: left; margin: -3px 2px 0 2px;
}

.command p {
  display: inline-block; vertical-align: top;
  text-align: center; line-height: 28px; margin: -15px 4px 0 4px;
}

.command input {
  width: 300px;
}

.command input[type=checkbox] {
  width: auto; margin-bottom: 5px;
}

.command button {
  width: 100px;
}

span.status {
  display: block; position: sticky; top: 0;
  padding: 4px 0 4px 0; margin: 0 3px 1px 3px; height: 22px;
  text-align: center; font-size: 15px; line-height: 22px;
  border: 1px solid chocolate; border-top-width: 0;
  color: blue; background-color: pink;
}

span.status1 {
  float: left; width: 44px; margin-left: 4px;
  border-radius: 3px; background-color: silver;
}

span.status2 {
  float: right; width: 44px; margin-right: 4px;
  border-radius: 3px; background-color: silver;
}

span.status3 {
  display: inline-block; position: sticky; top: auto; bottom: 30px;
  left: 0; right: 0; margin: auto; padding: 10px;
  width: 650px; max-width: calc(100vw - 100px);
  border: 2px solid chocolate; border-radius: 10px;
  font-size: 16px; line-height: 21px;
  color: mediumblue; background-color: snow;
}

span.postbox {
  display: inline-block; width: calc(100% - 12px);
  text-align: left; border: 1px solid darkred;
  padding: 0 2px 5px 2px; margin: 0 3px 1px 3px;
  white-space: pre-wrap; word-wrap: break-word;
}

p.header {
  margin: 0 0 -7px 0; padding: 5px 8px 6px 14px; text-indent: -5px;
  border: 0 solid goldenrod; border-width: 0 0 1px 0; background-color: cornsilk; 
}

p.subject {
  margin: 10px 0 -7px 0; padding: 0 6px 4px 6px; font-weight: bold;
  color: blue; border-bottom: 1px solid darksalmon;
}

div.font1 {
  min-height: 30px; line-height: 1.2em; margin-top: 1px;
  font-size: 1em; font-family: 'verdana', san-serif;
}

div.font2 {
  min-height: 30px; line-height: 1.2em; margin-top: 1px;
  font-size: 1.05em; font-family: 'helvetica', san-serif;
}

div.font3 {
  min-height: 30px; line-height: 1.1em; margin-top: 1px;
  font-size: 1.175em; font-family: 'times new roman', serif;
}

.body-line {
  margin: 0 6px 0 6px; padding: 0;
}

.empty {
  padding-bottom: 8px;
}

.blank {
  margin: 5px 0 0 0;
}

.quote {
  color: teal;
}

.rquote {
  color: deeppink;
}

.ltr {
  direction: ltr;
}

.rtl {
  direction: rtl;
}

.spoiler {
  padding: 0 2px; margin-top: 1px; color: pink; background-color: pink;
}

.spoiler:hover {
  color: firebrick;
}

span.heading {
  color: mediumvioletred; font-weight: bold;
}

span.red-padding {
  padding: 0 4px 0 4px;
}

span.small {
  color: darkviolet;
}

a:link {
  color: firebrick;
}

a:visited {
  color: darkcyan;
}

a.in-visited {
  color: darkcyan;
}

a.reply {
  float: right; text-decoration: none;
  width: 8px; height: 10px; margin: 2px -3px 0 6px;
  border-style: solid; border-width: 2px; border-radius: 5px;
  border-color: lightpink; background-color: transparent;
}

p.in-sliced {
  background-color: lavenderblush;
}

span.in-sliced {
  background-color: gainsboro; border-color: dimgray;
}

img {
  vertical-align: top; background-color: goldenrod; border: none; outline: none;
}

div.imgbox {
  text-align: center; line-height: 0; padding: 0; margin: 0;
}

div.left {
  float: left; margin: 9px 10px -5px 5px;
}

div.right {
  float: right; margin: 9px 5px -1px 10px;
}

div.multi1 {
  margin: 9px 0 -12px 0;
}

div.multi2 {
  margin: 9px 0 -7px 0;
  border: 0 solid goldenrod; border-width: 0 0 2px 0;
}

span.image {
  display:inline-block; vertical-align:top; margin: 2px 0 4px 0;
}

span.banner {
  display: block; font-weight: bold;
  line-height: 10px; padding: 4px 0 5px 0;
  color: white;
}

span.banner_red {
  border-top: 1px solid sandybrown; background-color: coral;
}

span.banner_green {
  border-top: 1px solid cadetblue; background-color: forestgreen;
}

span.banner_blue {
  border-top: 1px solid royalblue; background-color: mediumblue;
}

.pop1:hover .pop2 {
  visibility: visible;
}

div.overlay {
  display: none; position: fixed; top: 30px; left: 10vw;
  width: calc(80vw - 6px); height: auto; text-align: center;
  font-size: 17px; line-height: 19px; font-family: 'times new roman', serif;
  border: 3px solid darkgoldenrod; border-top-width: 1px; padding: 1px;
  color: green; background-color: lightgoldenrodyellow;
}

.overlay div {
  padding: 10px 3px 9px 3px; margin: 7px 0 7px 0;
  height: auto; background-color: burlywood;
}

.overlay button {
  margin: 0 4px 0 4px; padding: 1px 10px 1px 10px;
  border: none; border-radius: 15px; outline: 1px solid darksalmon;
  color: darkviolet; background-color: wheat;
}

.overlay input {
  margin: 0 6px 0 6px; padding: 2px 7px 3px 7px;
  border: none; border-radius: 10px; outline: 1px solid darksalmon;
  font-size: 14px; font-family: 'verdana', 'helvetica', san-serif;
}

.overlay2 span {
  display: inline-block; position: relative;
  width: 255px; height: 271px; margin: 0 1px 0 0;
  vertical-align: top; border: 2px solid burlywood;
}

.overlay2 textarea {
  box-sizing: border-box; resize: none;
  vertical-align: top; white-space: pre-wrap;
  width: calc(100% - 277px); height: 275px; margin: 0 0 0 1px; padding: 1px 5px;
  font-size: 13px; font-family: 'verdana', 'helvetica', san-serif;
  caret-color: maroon; border: 2px solid burlywood;
  color: mediumblue; background-color: snow;
}

.overlay2 img {
  width: auto; height: auto; margin: auto;
  max-width: 255px; max-height: 250px;
  background-color: transparent;
}

.overlay2 p {
  position: absolute; bottom: 0; width: calc(100% - 10px); height: 20px;
  margin: 0; padding: 0 5px; text-overflow: ellipsis; overflow: hidden;
  text-align: center; font-size: 15px; border-top: 1px solid burlywood;
}

.pop2 {
  visibility: hidden; text-align: center;
  display: block; position: absolute; z-index: 1;
  padding: 4px; margin: 8px 10px 0 10px;
  font-size: 12px; line-height: 16px;
  color: read; background-color: white;
  pointer-events: none;
}

::selection {
  color: yellow; background-color: orchid;
}

.show {
  display: block;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }
w_ { color: firebrick; }
x_ { color: blueviolet; }
y_ { color: fuchsia; }
n_ { }

</style></head>

<body onload="javascript:startup()">

<h1 style="margin:20px 0 25px 0"><g_>8kun</g_> <r_>Bread Launcher</r_> <g_>v2a</g_></h1>

<g_>Enter URL:</g_>&nbsp; <input type=text id="url" size=55 style="margin-bottom: 5px"
  onclick="javascript:input_onclick('url')" onblur="javascript:input_onblur('url')"> &nbsp;
  <button onclick="javascript:fetchpost()">Go</button> &nbsp;
  <button onclick="javascript:playvideo()">Play Video</button>
<p>

<p class="listbox" style="margin-left:-50px">
<g_>Time Offset:</g_> &nbsp;<input type=text class="small" maxlength=5 style="width:42px" value="0">
&nbsp; &nbsp;<br><br>
<g_>HTML <input type=radio name="html-json" value="0" checked> &nbsp;&nbsp;
JSON <input type=radio name="html-json" value="1"></g_>
</p>

<p class="listbox">
<g_>Pick a proxy:</g_>
</p>
<p class="listbox">
<input type=radio name="proxy" value="LOCAL://localhost:8080/"> Local Proxy Server (Kraker)<br>
<input type=radio name="proxy" value="https://xyss5.herokuapp.com/" checked> xyss5.herokuapp.com<br>
<input type=radio name="proxy" value="https://api.allorigins.win/raw?url="> api.allorigins.win<br>
<input type=radio name="proxy" value=""> None
</p>
<p>Note: <r_>YouTube videos will no longer work without the Local Proxy Server.</r_>
<p><a class="ref" target=_blank href="https://8kun.top/alleycat/res/10.html">Your feedback is appreciated</a>
(feature requests, suggestions, bug reports)
&nbsp;|&nbsp; <a href="#proxy" target=_self>Kraker Control Panel</a>
<p><hr><p>

<g_>Font:</g_>&nbsp;
<input type=radio name="font" value="font1" checked> Verdana &nbsp;
<input type=radio name="font" value="font2"> Helvetica &nbsp;
<input type=radio name="font" value="font3"> Times New Roman &nbsp; &nbsp;

<g_>Page width:</g_>&nbsp;
<input type=radio name="width" value="" checked> 100% &nbsp;
<input type=radio name="width" value="90%"> 90% &nbsp;
<input type=radio name="width" value="75%"> 75% &nbsp;
<input type=radio name="width" value="60%"> 60% <br>

<p><hr><h2><b_>Alleycat Player Options</b_></h2>

<p class="listbox">
<input type=radio name="format" value="18" checked> mp4-360p &nbsp;&nbsp;<br>
<input type=radio name="format" value="19"> mp4-480p<br>
<input type=radio name="format" value="22"> mp4-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=radio name="format" value="43"> webm-360p &nbsp; &nbsp;<br>
<input type=radio name="format" value="44"> webm-480p<br>
<input type=radio name="format" value="45"> webm-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=checkbox name="dash" value="1" disabled> Use DASH<br>
<g_>(needed for livestream)</g_>
</p>

<p><g_>Now playing:</g_> &nbsp;<input type=text id="status" class="static" style="width:170px" disabled>

<p><hr><p><div style="text-align:left;color:maroon">

<b>Release notes for v2a (October 9, 2021)</b>
<ul><li>
This is a major upgrade. The Bread Launcher now supports auto-updating and posting. At present, only one image or file
is allowed in a post (Quick Reply). The text input is unlimited but constrained to a small window. A more complete
post editor will come soon (I will be calling it the Post Office). Instructions are below.
</li><li>
The Youtube embed links stopped working because YT doesn't like the blank "referer" HTTP header so I removed the
"no-referrer" meta setting.
</li></ul>

<p><hr><p>

<b>Release notes for v1e (September 15, 2021)</b>
<ul><li>
This version is being released due to the media server issues on the 8kun site. Media are currently being delivered
from "images.128ducks.com". I will update when the situation changes.
</li><li>
Added support for BitChute/Twitter/Rumble/Vimeo embeds. For now, the images come from my GitHub Pages web server.
</li><li>
The Youtube player has been updated due to changes in the Youtube API. For this reason, the player will no longer
work without the Kraker Local Proxy Server.
</li><li>
Added a new flag to the Kraker Control Panel. This flag is undocumented.
</li></ul>

<p><hr><p>

<b>Release notes for v1d (March 11, 2021)</b>
<p>
<ul><li>
A bunch of small fixes that aren't worth enumerating.
</li><li>
Added a control panel for the new Socks5 Proxy Server.
</li></ul>

<p><hr><p>

<b>Release notes for v1c (December 13, 2020)</b>
<p>
<ul><li>
Fixed the identifiers for "Board Owner" and "8kun Administrator".
</li><li>
Fixed browser security violation caused by opening a web page in a daughter tab.
</li><li>
Added option to adjust the displayed post time. The browser is supposed to display the time for the local time zone
but, for some reason, this has never worked for me. The value is expressed in hours. Fractional and negative values are
permitted. For example, I am using -5 to adjust to Eastern Time.
</li><li>
Added option to select either the HTML or the JSON format for downloading from the 8kun server. HTML is the default option
since JSON has been unreliable (missing or truncated). It doesn't make any difference as far as functionality goes since
the app converts HTML to JSON anyway. However, some recent fuckery on /qresearch/ has caused the HTML format to break while
the JSON was working fine. That's why I decided to include the new option.
</li><li>
Adjusted the cache retention policy. Expiry is based on memory usage (capped at 6 megabytes) and the time of
most recent access rather than the time of creation.
</li><li>
I have been having issues with mp4 and webm videos. Since I only use Firefox, the problem has not been verified to exist on
other browsers. The problem is that the video will stop playing partway through due to the 8kun server apparently dropping
the connection prematurely. This happens ONLY on 8kun so it is not necessarily a browser issue. Downloading is not affected.
The problem is resolved by routing the video through the Kraker Local Proxy Server (if you have it, of course).
</li><li>
PLEASE NOTE: You can help improve this app by sending me feedback. While I will continue developing the app for the
foreseeable future, I am only in a position to consider features that I personally want. Without feedback, YOUR needs
cannot be addressed. Send feedback.
</li></ul>

<p><hr><p>

<b>Release notes for v1b (October 5, 2020)</b>
<p>
<ul><li>
Fixed some performance issues and a potential crash issue. Working fine with Google Chrome, Brave, Opera and Firefox
(recommended). Waterfox, a fork of Firefox, still does not work even though I fixed some code that it complained about.
</li><li>
In general, web browsers do not like what this app is doing. That is unfortunate since I am doing what the browser makers
have always wanted. I am using the browser as a development platform but I keep getting hammered by stupid design choices
(their choices, not mine, since I follow the standards which they often do not).
</li><li>
Fixed a problem with extracting image links. This affects webm videos and some boards.
</li><li>
Added the ability to globally track reply links that have been visited and replies that have been seen. I'm not
going to explain how it all works. Just watch for the colour codings and you'll understand as you go along. It works
pretty good but I would like to have an ability to automatically track long or convoluted reply chains. In my experience,
this might not be important. Reply chains have a tendency to degenerate into a series of pointless one-liners which are
probably not worth reading anyway (amirite?).
</li><li>
Tweaked the CSS to improve the look and feel. If you don't like my colour choices then fix the damn CSS yourself.
</li><li>
Modified the retention strategy for thread caching. The retention period is now 4 hours (up from 2) but only a maximum of
15 threads will be cached at one time. This strategy may or may not be ideal for you but the point (obviously) is to
limit the memory usage.
</li></ul>

<p><hr><p>

The <g_>8kun Bread Launcher</g_> is an app for reading threads on the free speech web site <g_>8kun.top</g_> without the
speed drawbacks of the site's normal client. Improved handling of images, headers and text makes for a sharper and more
customizable appearance. The term "bread" is not a synonym for "thread" but I like the sound of "Bread Launcher" so I'm
using my creative license.
<p>
This app, while it is quick, gets most of its speed advantage by allowing you to retrieve an individual post and its replies
instead of the entire thread (which is a capability not supported by the current 8kun client). Threads are also kept
in cache (memory) to reduce the need to access the site. There is no mouse hover functionality so reply
links must be clicked on and viewed in a new tab.
<p>
To access 8kun, you need a URL with or without the domain name. The ".html" extension is not required. Examples are below.
If you wish to see a specific post then append "#" and the post number. To view a thread beginning at a certain post then
append "?" and the post number. <b>Note:</b> do not close the launcher while daughter tabs are still open (they link
to the code inside the launcher).
<p>
Full URL: <g_>https://8kun.top/alleycat/res/10.html</g_> &nbsp; Partial URL: <g_>/alleycat/res/10</g_>
<p>
If you are not familiar with the need for a proxy server then please refer to the Alleycat Player installation instructions
<a class="ref" target=_blank href="https://8chananon.github.io/Alleycat-Player/current/installation-v1.htm">here</a>
for an explanation. The most reliable way to use this app is to install the Local Proxy Server. The second best way is
to install a CORS bypass extension.
<p>
<b><b_>The Menu Options (new)</b_></b>
<p>
To access the thread options menu, click on the status bar at the top. These are the options:
<ul><li>
<b>Update</b> - refresh the current thread with new posts
</li><li>
<b>Reset</b> - reset the post counter to zero (this value appears in the window title in the tab bar)
</li><li>
<b>Go Live / End Live</b> - this starts or ends auto-updating. The window title will show the number of new posts loaded,
the number of posts loaded in total and the current time base (which depends on posting frequency).
</li><li>
<b>Mark / Restore</b> - this marks or restores your current position in the thread. This is useful if you wish to explore
the thread and then return to your current position.
</li><li>
<b>Post Office</b> - to be done
</li><li>
<b>Quick Reply</b> - this opens a popup window to reply to the thread. You are permitted one image or file. You can
also embed from Youtube and other sites. There is an input for a name and a small text input window. When you press the
Reply button, your post will be submitted and a status bar will appear near the bottom of the screen to report
on the progress.
</li></ul>
Note that only the Post Office and Quick Reply options are available in a Slice. Auto-updating and posting require
either the Kraker Local Proxy Server or a CORS unblocker (a remote proxy is permitted for manual updates). The reason
is to prevent a lockout by the remote proxy for exceeding its bandwidth limit. You may use one of these extensions:
<p>
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a> &nbsp;
<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/"
  target=_blank>Firefox only</a>

<p>
<b><b_>Hints on Posting (new)</b_></b>
<ul><li>
There is a button at the right side of each post header. Click this to open the reply box while adding the post number
to the text input.
</li><li>
You can add an image to your reply and the chosen image will appear in the reply box. The supported formats are:
jpg, jpeg, png, gif. You can also attach the following file types: mp4, webm, pdf. Non-image files have
no associated thumbnail but the file name will be shown.
</li><li>
The status of your post submission is monitored for progress and final status. If all goes well then the status bar will
disappear when the post submission is complete. If an error is returned by the server then this will be displayed. You
can click on the status bar to hide it (open the Quick Reply box to make the status bar visible again). If possible,
the percentage progress of your file upload will be shown (this tends to be unreliable).
</li><li>
If you post a reply from a Slice tab, it is safe to close the tab while your post is being submitted. This is not
recommended since the Bread Launcher will be unable to notify you of a posting failure.
</li></ul>

<b><b_>Video Player</b_></b>
<p>
A special feature is available for viewing embedded Youtube videos. If you click on the bar below the thumbnail, the video
will open with Alleycat Player or, rather, a subset of the Alleycat code. This includes the DASH capability which requires
the Kraker Local Proxy Server which is available with the installation of Alleycat Player. Some videos (especially music
videos) will not work with a remote proxy. This is due to an IP address restriction applied by Youtube.
<p>
<b>Update:</b> due to changes in the Youtube API, it is no longer possible to open a video without the Local Proxy Server.
<p>
<b>Autoplay may be blocked by your web browser.</b> Chrome-based browsers have this issue but not Firefox. This
problem is solved if you are using the Local Proxy Server. A small stub file (called _video_.htm) will be saved to your
proxy (Alleycat) folder which will then be loaded into the video player tab to force Chrome to recognize the proper
domain name (localhost instead of about:blank). As long as you have given autoplay permission to "localhost" then
it will work fine.
<p>
For non-embedded videos, copy the Youtube URL or just the 11-character ID to the URL input line and press "Play Video".
If you copy the full URL, make sure that the video ID is at the end of the input line. Support for other video sites
(such as Bitchute) is planned.
<p>
Not all formats are available. The non-DASH formats are: mp4-360p, mp4-720p, webm-360p. To save a non-DASH video,
right-click on the video and choose the "Save Video" option.
<p>
<b>Special note about Youtube livestreams</b>
<p>
It takes three to four hours for Youtube to move a finished livestream to VOD (video on demand) status. Until that happens,
only the last minute of an ended livestream will be viewable. This is a known issue with Alleycat Player.

<!--
<b>DDOS Mitigation (bot blocker)</b>
<p>
8kun was recently subjected to intense denial-of-service attacks and VanwaNet put up a DDOS Mitigation wall (which I call a
bot blocker) in order to help alleviate the situation. I have encountered this before with CloudFlare and Sucuri in the
process of hacking sites for Alleycat Player. A bot blocker consists of obfuscated Javascript code which must be executed by
the web browser in order to obtain an authorization string or a cookie. This is a puzzle to unravel and it has been
solved for the VanwaNet blocker.
<p>
Fair warning: the Local Proxy Server must be used to bypass the bot blocker. It cannot be done otherwise. The blocker is
not in place at the time of this writing but, if it returns, you will be unable to use this app if you are relying
on a remote proxy or CORS extension for access. Make sure that you have copied the file "vanwanet.js" to your proxy
folder. This file contains the decryption code to unlock the bot blocker.
<p>
//-->

<p><hr></div><p id="proxy">

<div class="command" style="margin-top:36px">

<h1><r_>Kraker</r_> <g_>Local Proxy Server</g_> <r_>Control Panel</r_></h1>
<br>
<p>
<button onclick="javascript:dns_lookup()">DNS lookup</button>
<br><br>
<button onclick="javascript:dns_servers()">Servers list</button>
<br><br>
<button onclick="javascript:dns_activate()">Activate</button>
<br><br>
<button onclick="javascript:dns_reload()">Reload</button>
<br><br>
<button onclick="javascript:dns_flags()">Flags</button>
<br><br>
</p>
<p>
<input id="cmd1" type=text>
<br><br>
<input id="cmd2" type=text>
<br><br>
<input id="cmd3" type=text>
<br><br>
<input id="cmd4" type=text>
<br><br><g_>
<input id="flg1" type=checkbox> Console &nbsp;
<input id="flg2" type=checkbox> TOR Alt Port &nbsp;
<input id="flg3" type=checkbox> TOR for All
</g_><br><br>
</p>
<p style="text-align:left">
Perform DNS lookup (by URL or IP address)
<br><br>
Activate DNS server group and/or show Servers list
<br><br>
Activate group(s) and resolve DNS (console output)
<br><br>
Reload settings file (default is <g_>_settings.txt</g_>)
<br><br>
<input id="flg4" type=checkbox> <g_>Show DNS/DOH activity</g_> (sockets if console is on)
</p>

</div><p><hr><p><div style="width:90vw;height:75vh"></div></body>

<!-- ///// Post Box ///// -->

<div id="editor" style="display:none">

<div><span class="status" style="margin:0;border-width:0 0 1px 0"></span>

<br><p style="font-size:20px"><r_>To Be Done</r_></p>

</div>

<!-- ///// Post Form ///// -->

<form id="postform" style="display:none">
<input type=text name="name">
<input type=text name="embed">
<input type=text name="board">
<input type=text name="thread">
<input type=text name="json_response" value="1">
<input type=text name="post" value="reply">
<input type=text name="domain_name_post" value="8kun.top">
</form>

<!-- ///// Quick Reply ///// -->

<div id="quickreply" class="overlay">
<span style="display:none">
<input type=file name="file"  accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file name="file2" accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file name="file3" accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file name="file4" accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file name="file5" accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
</span>
<div style="display:flex;margin-top:0">
<button value="Remove">Add File</button><button>Clear</button>
<span style="flex-grow:1"></span>
<span>Name: <input type=text style="width:250px"></span>
<span style="flex-grow:1"></span>
<button>Reply</button><button>Close</button></div>

<span class="overlay2"><span><img><p></p></span>
<textarea name="body" wrap=hard></textarea></span>

<div style="margin-bottom:0">
Embed (YouTube, Bitchute, Vimeo or other):
<input type=text style="width:400px"></div>

</div>

<p><hr><p><div style="width:90vw;height:75vh"></div></body>

<!-- ///// SCRIPTS ///// -->

<script id="SlowAES"></script>
<script id="dash_player"></script>

<script>

var localhost, response, textData, jsonData, busy = 0;
var cors_bypass, cors_kraker, cookies = new Object();

var bread, breadURL, breads = [], opentabs = [], sliced = [], slicing = [], visited = [];
var post_font, post_width, post_count, post_lastpid, post_timeofs, live = [];

var posturl = document.getElementsByTagName ("input")[0];
var timeofs = document.getElementsByTagName ("input")[1];

var domain_8kun  = "https://8kun.top/";
var media_server = "https://images.128ducks.com/";  //"https://media.8kun.top/";
var posting_url  = "https://sys.8kun.top/post.php";

var t_embed = ["", "-invidio", "-hooktube", "-bitchute", "-twitter", "-rumble", "-vimeo"];
var formdata;

var startup = function ()
{
  document.getElementById ("quickreply").addEventListener("submit", (event) => {
    console.log(e);
  });

  localhost = document.location.origin + "/";
  if (document.location.hostname != "localhost") localhost = "";
  if (!localhost) return;

  document.getElementsByName ("proxy")[1].checked = false;
  document.getElementsByName ("proxy")[0].checked = true;
  var dash = document.getElementsByName ("dash")[0];
  dash.checked = true; dash.disabled = false;

  var video = "<!DOCTYPE html><html><head><meta charset='utf-8'>\n" +
    "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n" +
    "</head><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  fetch (localhost + "~_video_.htm", { method: "PUT", body: video });
}
////////////////////

var localhost_missing = function ()
{
  alert ("The Kraker Local Proxy Server is not available.");
}

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var dns_lookup = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd1").value;
  window.open (localhost + "?dnslookup=" + name, "_blank", "");
}
////////////////////

var dns_servers = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd2").value;
  window.open (localhost + "?servers=" + name, "_blank", "");
}
////////////////////

var dns_activate = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd3").value;
  window.open (localhost + "?activate=" + name, "_blank", "");
}
////////////////////

var dns_reload = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd4").value;
  window.open (localhost + "?reload=" + name, "_blank", "");
}
////////////////////

var dns_flags = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var a = document.getElementById ("flg1").checked;
  var b = document.getElementById ("flg2").checked;
  var c = document.getElementById ("flg3").checked;
  var d = document.getElementById ("flg4").checked;

  var n = a + (b << 1) + (c << 2) + (d << 4);
  window.open (localhost + "?flags=" + n, "_blank", "");
}
////////////////////

var setup_cors = function ()
{
  cors_bypass = get_checked ("proxy", "");
  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_checked = function (name, value)
{
  var i = 0, j = value, k = document.getElementsByName (name);
  if (k && k.length) for (; i < k.length; i++) if (k [i].checked) j = k [i].value;
  if (isNaN (i = parseFloat (j))) return (j); else return (i);
}

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});
  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];
  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

var check_bread_cache = function (time, url)
{
  var a = -1, b = c = 0, i, j, k, json;

  for (i = 0, j = time; i < breads.length; i++)
  {
    if (url == breads [i].url) { a = i; breads [i].time = time; }
    c += breads [i].size; if ((k = breads [i].time) < j) { b = i; j = k; }
  }

  if (c > 25000000) { breads.splice (b, 1); if (b < a) a--; } return (a);
  // note: bread size is the HTML size which is about 4 * JSON size
}
////////////////////

var message = function (msg)
{
  bread.body.children[0].children[1].innerHTML = msg;
}
////////////////////

var make_title = function (title, item1, url, item2)
{
  var m = url.split ("/");
  var t = "<i>" + title + "</i>";
  var u = "<w_>(" + item1 + ")</w_>";
  var v = "<g_><b>" + m[1] + "</b></g_>&nbsp;#" + m[3];
  var w = item2 ? "&nbsp;<g_>(" + item2 + ")</g_>" : "";

  return (t + " " + u + "&nbsp;" + v + w);
}

var bread_top = function (bread)
{
  var b = bread; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 0 ? b [0] : null);
}
////////////////////

var bread_box = function (bread)
{
  var b = bread; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 4 ? b [4] : null);
}
////////////////////

const createwindow = async (win, url) =>
{
  var doc, bdy, box, top;

  if (!win) win = window; try { win = win.open (); }
    catch (e) { win = window.open (); } win.focus();

  doc = win.document; doc.open(); doc.write ("<!DOCTYPE html>"); doc.close();
  doc.head.innerHTML = document.head.innerHTML; bdy = doc.body; bdy.classList.add ("bread");

  bdy.onload  = function () { bdy.onload = null; if (bdy.onfocus) fetchbread (url); }
  bdy.onfocus = function () { bdy.onfocus = null; if (bdy.onload) fetchbread (url); }
  bdy.groyper = function (w, x, v)
  {
    if (v == 1) fetchpost (w, x); if (v == 2) playvideo (w, x); if (v == 3) postbox (w, x);
  }

  box = document.createElement ("SPAN"); box.name = "LaUnChEr";
  box.classList.add ("status"); box.classList.add ("overlay");
  box.onclick = function (e) { launchmenu (win, e.target); }
  box.innerHTML = "<span class='status1'></span><span></span><span class='status2'></span>";
  bdy.appendChild (box); box.children [1].innerHTML = "<big><w_>Launching...</w_></big>";

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getpost = function (x) { document.body.groyper (window, x, 1); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getvideo = function (x) { document.body.groyper (window, x, 2); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var quickreply = function (x) { document.body.groyper (window, x, 3); }";
  bdy.appendChild (box);

  box = document.createElement ("DIV");
  bdy.appendChild (box);

  top = document.getElementById ("quickreply").cloneNode (true);
  box = top.getElementsByTagName ("button");
  box [3].onclick = function() { postbox (win, -1); }
  box [0].onclick = function() { postbox (win, -2); }
  box [2].onclick = function() { postbox (win, -3); }
  box [1].onclick = function() { postbox (win, -4); }
  doc.body.appendChild (top);

  post_font = get_checked ("font", "font1"); post_width = get_checked ("width", "");

  bread = doc; opentabs.push (win);
}
////////////////////

var createJSON = function (data)
{
  var i, j, n, s, t, v, w, pid, uid, time, name, cap, trip, post;
  var json = {"posts" : []}; var posts = json.posts;

  var doc = new DOMParser(); doc = doc.parseFromString (data, "text/html");

  // Waterfox does not like this:
  // var doc = document.implementation.createHTMLDocument();  <-- this is fine
  // doc.open(); doc.write (textData); doc.close();  <-- this is not??

  doc = doc.getElementsByName ("postcontrols")[0].children[1];
  var box = doc.getElementsByTagName ("div");

  for (n = 0; n < box.length; n++) if (s = box[n].id)
  {
    pid = s.substr (s.indexOf ("_") + 1);
    s = box[n].getElementsByClassName ("intro")[0].innerHTML;

    time = pullstring (s, 'unixtime="', '"');
    name = pullstring (s, 'class="name"', '<');
    subj = pullstring (s, 'class="subject"', '<');
    trip = pullstring (s, 'class="trip"', '<');
    uid  = pullstring (s, 'class="poster_id"', '<');
    cap  = pullstring (s, 'class="capcode"', '<');

    name = pullstring (name, '>', '');
    subj = pullstring (subj, '>', '');
    trip = pullstring (trip, '>', '');
    uid  = pullstring (uid, '>', '');
    cap  = pullstring (cap, '>', '');

    if (!cap)
    {
       cap = pullstring (s, 'class="capcode" title="', '"');
       if (cap) cap = pullstring (s, 'style="color:red">', '<');
    }
    if (!uid) uid = pullstring (s, 'hidden service.">', '<');

    w = posts.length ? box[n] : doc;
    w = w.getElementsByClassName ("files");
    w = w && w[0] ? w[0].innerHTML : "";
    v = [""]; w = w.split (">File: <a ");

    for (i = 1; i < w.length; i++)
    {
      s = pullstring (w[i], '', '='); if (s != "href" && s != "title") continue;
      t = pullstring (w[i], '"postfilename"', '<'); s = pullstring (t, 'title="', '"');
      if (!s) s =  pullstring (t, '>', ""); t = pullstring (w[i], '"', '"');

      v.push (s); s = pullstring (w[i], 'src="', '>');
      t = t.split ("/"); j = t.length - 1; t = (j ? "/" : "") + t [j];
      if (s.includes (".jpg") || t.includes (".mp4") || t.includes (".webm"))
        t = t.substr (0, t.indexOf (".")) + ".jpg";

      v.push (t); t = pullstring (s, 'style="', '"');
      v.push (pullstring (t, "width:", "px")); v.push (pullstring (t, "height:", "px"));
    }

    for (i = 5, t = []; i < v.length; i += 4)
      t.push ({ filename: v[i], tim: v[i+1], tn_w: v[i+2], tn_h: v[i+3] });

    w = posts.length ? box[n] : doc; w = w.children;

    for (i = 0; i < w.length; i++)
    {
      if (!(s = w[i].getAttribute ("class")) || s.substr (0,15) != "video-container") continue;
      s = s.substr (15); for (j = 0; j < t_embed.length; j++) if (s == t_embed [j]) break;
      if (j < 3) t = ""; else t = s.substr (1); if (j >= t_embed.length) continue;

      s = w[i].getAttribute ("data-video");
      v = [s, t, "", "255", "143"]; break;
    }

    if (v.length == 1) v = ["", "", "", "", ""];
    s = box[n].getElementsByClassName ("body")[0].innerHTML;

    post = { no: pid, name: name, sub: subj, capcode: cap, trip: trip, id: uid, time: time,
             com: s, files: "", embed: "", fsize: "", ext: "", embed_thumb: v[0], filename: v[1],
             tim: v[2], tn_w: v[3], tn_h: v[4], extra_files: t };

    posts.push (post);
  }

  return (json);
}
////////////////////

var getimage = function (v, multi)
{
  var s, t, u, title, banner = "", w = v.tn_w, h = v.tn_h;
  if (!w || w < 32) w = 32; if (!h || h < 32) h = 32;

  var name = v.filename ? "/" + v.filename : "", ext = v.ext ? v.ext : "";
  if (!ext) ext = name.substr (name.lastIndexOf (".")); else name += ext;
  name = name.replace (/'| |"/g, "_"); name = "";

  if (!v.tim)
  {
    s = v.v_url; t = v.v_img; title = "Unknown"; banner = "blue";
    if (v.type == "") { title = "YouTube"; banner = "red"; }
    if (v.type == "bitchute") title = "BitChute";
    if (v.type == "twitter")  title = "Twitter";
    if (v.type == "rumble")   title = "Rumble";
    if (v.type == "vimeo")    title = "Vimeo";
  }
  else
  {
    if ((u = (v.fpath === 0 ? "/" : "") + v.tim) [0] == "/")
    {
      s = media_server + pullstring (breadURL, "/", "/");
      t = s + "/thumb" + u; s = s + "/src" + u; name = "";
    }
    else
    {
      s = media_server + "file_store/"; t = s + "thumb/" + u; s += u;
    }

    ext = ext.toLowerCase(); s += ext;
    u = u.includes (".") ? u.substr (u.indexOf (".")) : "";

    if (u) s = s.substr (0, s.indexOf (u)) + ext; else
      if (ext == ".gif" || ext == ".png" || ext == ".jpeg") t += ext; else t += ".jpg";

    if (ext == ".mp3")
    {
      title = "MP3"; banner = "green"; w = 120; h = 140;
      t = media_server + "static/file.png";
    }
    if (ext == ".mp4")
    {
      title = "MP4"; banner = "green"; //s = cors_kraker + s;
    }
    if (ext == ".webm")
    {
      title = "WEBM"; banner = "green"; //s = cors_kraker + s;
    }
    if (ext == ".pdf")
    {
      title = "PDF"; banner = "green"; w = 120; h = 140;
      t = media_server + "static/file.png";
    }
    if (ext == ".gif")
    {
      title = "GIF"; banner = "blue";
    }
  }

  var img = "<span class='image'><a target=_blank href='" + s + name + "'>" +
    "<img src='" + t + "' width=" + w + " height=" + h + "></a>";

  if (banner)
  {
    s = '<a target=_self href="javascript:getvideo(' + "'" + s + "')" + '">';
    t = "<span class='banner banner_" + banner + "'>" + title + "</span>";
    img = img + (banner != "red" ? t : s + t + "</a>");
  }

  return (img + "</span>");
}
////////////////////

var newcrumb = function (post, target, bread)
{
  var i, j, n, p, s, t, v, box, img = "";
  var pid = post.no, data = post.com ? post.com : "", str = "highlightReply('";
  var hidepost = target && pid != target && data.indexOf (str + target + "'") < 0;
  var url = bread.name + "#" + pid;

  while ((s = pullstring (data, str, '>')))
  {
    t = pullstring (s, 'href="', '"').replace (".html", "");
    p = pullstring (t, "#", "");

    if (hidepost) data = data.replace (str, ""); else
    {
      v = visited.includes (t) ? 'class="in-visited" ' : "";
      t = 'target=_self href="javascript:getpost(' + "'" + t + "'" + ')"';
      data = data.replace ('onclick="' + str + s, v + t);
    }

    box = bread.getElementById ("msg" + p); if (!box) continue;
    box = box.children[0].getElementsByTagName ("span")[0];

    t = ">#" + pid + "</"; v = " <n_" + t + "n_>";
    if (!box.innerHTML.includes (t)) box.innerHTML += v;
  }

  if (hidepost) return; post_count++; post_lastpid = pid;

  if (target)
  {
    if (n = !sliced.includes (url)) sliced.push (url);
    if (n || target == pid) slicing.push (url);
  }

  var name = post.name ? post.name.trim() : "";
  var time = post.time * 1 + post_timeofs;
  var trip = post.trip, uid = post.id;

  trip = trip ? " <x_>" + trip + "</x_>" : "";
  uid = uid ? "&nbsp; <b_>" + uid + "</b_>" : "";

  name = (name && name != "Anonymous") ? "&nbsp; <y_>" + name + "</y_>" : "";
  if (post.capcode) name = "&nbsp; <x_>" + post.capcode + "</x_>" + name;

  s = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
  time = new Date (time * 1000); s = s [time.getDay()];

  time = "<b_>" + time.toLocaleDateString() + " (" + s + ")</b_> " +
         "<w_>" + time.toLocaleTimeString() + "</w_>";

  s = visited.includes (url) ? 'class="in-visited" ' : "";
  s = '<a ' + s + 'target=_self href="javascript:getpost(' + "'" + url + "'" + ')">';
  t = '<a target=_self class="reply" href="javascript:quickreply(' + "'" + pid + "'" + ')"></a>';

  var head = "<p class='header'># " + t + s + pid + "</a>&nbsp; ";
  var multi = post.tim && post.extra_files && post.extra_files.length;

  if (t = post.embed_thumb)
  {
    if (!(p = post.embed)) p = post.filename; else
    {
      s = pullstring (p, 'class="', '"'); t = pullstring (p, 'data-video="', '"');
      if (!s || s.substr (0,15) != "video-container") s = ""; else s = s.substr (15);

      for (j = 0; j < t_embed.length; j++) if (s == t_embed [j]) break;
      p = ""; if (j < t_embed.length && j > 2) p = s.substr (s.lastIndexOf ("-") + 1);
    }

    if (!p)
    {
      s = "https://www.youtube.com/embed/" + t;
      t = "https://i.ytimg.com/vi/" + t + "/mqdefault.jpg";
    }
    else
    {
      if (p == "bitchute") s = "https://www.bitchute.com/video/" + t + "/";
      if (p == "twitter")  s = t;
      if (p == "rumble")   s = "https://rumble.com/embed/" + t;
      if (p == "vimeo")    s = "https://vimeo.com/" + t;
      t = "https://8chananon.github.io/img/" + p + ".png";
    }

    img = getimage ({ v_url: s, v_img: t, type: p, tn_w: 255, tn_h: 143 }, multi);
  }

  // It is possible for a post to contain files and images as well as an embedded video.
  // The extra components are ignored by the default client. That behaviour is duplicated.

  if (post.tim)
  {
    img = getimage (post, multi); v = post.extra_files;
    if (multi) for (n = 0; n < v.length; n++) img = img + getimage (v[n], true);
  }

  p = '<p class="body-line empty "></p>';
  if (!data.indexOf (p)) data = data.substr (p.length);

  // for links of the form ">>>/<board name>/"
  data = data.replace (/\<a href="\//g, '<a href="' + domain_8kun);

  s = multi ? (data ? "multi2" : "multi1") : "left";
  if (img) img = "<div class='imgbox " + s + "'>" + img + "</div>";

  s = "&nbsp;<span></span></p>" + (post.sub ? "<p class='subject'>" + post.sub + "</p>" : "");
  t = "<div" + (data ? " class='" + post_font + "'" : "") + ">";

  box = document.createElement ("SPAN"); box.classList.add ("postbox");
  box.innerHTML = head + time + name + trip + uid + s + img + t + p + data + "</div>";
  box.setAttribute ("id", "msg" + pid); if (post_width) box.style.width = post_width;

  bread_box (bread).appendChild (box); if (!img) return;

  s = box.getElementsByTagName ("div"); t = s[0].getElementsByTagName ("img");

  if (multi)
  {
    for (i = 0, j = 1, p = 0, n = t.length, v = []; i <= n; i++, j++)
      if (i == n || (p += (s = t[i].width)) > box.clientWidth - j * 8)
      { 
        if (i == n) s = 0; else if (j < 2) j++; else i--;
        p = j > 2 ? (box.clientWidth - p + s) / j / 2 : 4;
        for (; j > 1; j--) v.push (p); p = j = 0;
      }

    while (n > 0)
    {
      s = t[--n].parentNode.parentNode;
      s.style.marginLeft = v[n] + "px"; s.style.marginRight = v[n] + "px";
    }
  }
  else
  {
    v = t[0].parentNode.parentNode.parentNode; t = s[1];

    if ((n = v.clientHeight + 4 - t.clientHeight) < 0)
      { v.classList.remove ("left"); v.classList.add ("right"); }
        else t.style.paddingTop = (n / 4) + "px";
  }
}
////////////////////

var bakebread = function (target)
{
  var box, top, str, url = "javascript:getpost('" + breadURL;

  if (target && post_count <= 0)
  {
    box = document.createElement ("DIV");
    box.innerHTML = "<p><big><g_>Post # <r_>" + target + "<g_> was not found in this bread.<p><hr><p>" +
      "<b_>Perhaps the post was deleted or the cache (if used) is out of date.</big><p><hr><p>" +
      "<button onclick=" + url + "!" + target + "')>Retry with Fresh Bread</button>";
    bread.body.appendChild (box); return;
  }

  box = bread_box (bread).children[0]; str = box ? (box.clientWidth - 14) + "px" : "99%";

  box = document.createElement ("DIV");
  box.innerHTML = "<p><hr><br><big><g_>Click on the status bar for options.</g_></big>";
  box.style = "display:inline-block;width:" + str + ";height:50vh";
  bread.body.appendChild (box);

  var i, j, k, p, s, t, u, v, w, win; str = url + "#" + target + "')";

  for (i = 0; i < opentabs.length; i++) try
  {
    win = opentabs [i]; if (!win || win.closed) throw ("");
    win = win.document; p = win.title; if (win == bread) p = "";

    w = bread_box (win); win = bread_top (win);
    if (!w || !win || win.name != "LaUnChEr") throw ("?");

    for (j = 0, w = w.children; j < w.length; j++) if (w[j].id)
    {
      if (p && target)
      {
        t = w[j].getElementsByTagName ("a");
        for (k = 0; k < t.length; k++) if (s = t[k].href)
          if (s == str) t[k].classList.add ("in-visited");
      }

      t = w[j].children[0].getElementsByTagName ("span")[0];
      s = t.innerHTML.replace (/n_/g, "");

      while (v = pullstring (s, "<>", "</>"))
      {
        u = sliced.includes (breadURL + v) ? "g_>" : "n_>";
        if (!p && slicing.includes (breadURL + v)) u = "r_>";
        s = s.replace ("<>" + v + "</>", "<" + u + v + "</" + u);
      }

      t.innerHTML = s; s = breadURL + "#" + w[j].id.substr (3);
      if (p == "Slice" || !sliced.includes (s)) continue;
      if (!p && slicing.includes (s)) continue;

      w[j].classList.add ("in-sliced");
      w[j].firstElementChild.classList.add ("in-sliced");
    }

  } catch (e) { if (e) console.log ("[Baker] " + e); opentabs.splice (i--, 1); }
}
////////////////////

var fetchpost = function (win, url)
{
  if (busy < 0 || (!url && !(url = posturl.value))) return;
  if (busy > 0 && busy + 2000 > Date.now()) return;

  busy = Date.now(); createwindow (win, url);
}
////////////////////

const fetchbread = async (url) =>
{
  if (!bread) return; if (busy <= 0) { message ("Process violation detected. Please retry."); return; }

  if (breadURL = pullstring (url, "'", "'")) url = breadURL;
  breadURL = domain_8kun; if (url [0] == "/") url = breadURL + url.substr (1);

  if (url.indexOf (breadURL) != 0) { message ("Bad URL"); return; }
  var type = get_checked ("html-json", 0) ? "json" : "html";

  var m, n, data, lastid = target = "", time = busy / 1000; busy = -1;

  if ((m = url.indexOf ("?")) > 0) { lastid = url.substr (m + 1); url = url.substr (0, m); }
  if ((m = url.indexOf ("#")) > 0) { target = url.substr (m + 1); url = url.substr (0, m); }
  if ((n = url.indexOf ("!")) > 0) { target = url.substr (n + 1); url = url.substr (0, n); }

  n = url.indexOf (".html"); if (n > 0) url = url.substr (0, n);
  data = url.split ("/"); data.splice (0,3); breadURL = "/" + data.join ("/");

  bread.title = target ? "Slice" : (lastid ? "CHUNK" : "BREAD"); bread.name = breadURL;

  if ((n = check_bread_cache (time, breadURL)) >= 0)
    if (lastid || m < 0) breads.splice (n, 1); else { time = 0; jsonData = breads[n].json; }

try
{
  setup_cors(); var crypto = document.getElementById ("SlowAES");
  if (!crypto.src && localhost) crypto.src = localhost + "~vanwanet.js";

  if (time)
  {
    response = await fetch (cors_bypass + url + "." + type, allow_cookie ("vanwanet", ""));
    if (!response.ok) throw ("Status " + response.status + " (" + response.statusText + ")");
    textData = await response.text();

    if (textData.substr (0, 1000).includes ("VanwaNet DDoS Mitigation"))
    {
      var error = "DDoS Mitigation - puzzle not solved";
      if (!crypto.src) throw ("DDoS Mitigation - need Local Proxy Server");
      n = textData.indexOf ("<script>function"); if (n < 0) throw (error);

      data = textData.substr (n + 8); data = data.substr (0, data.indexOf ('+";'));
      data = data.replace ("document.cookie", "data");
      if (!data) throw (error); eval (data);

      message ("<big><w_>DDoS Mitigation in effect</w_></big>");

      response = await fetch (cors_bypass + url + "." + type, allow_cookie ("vanwanet", data));
      if (response.status != 200) throw ("File not found");
      textData = await response.text();
    }

    jsonData = type == "json" ? JSON.parse (textData) : createJSON (textData);
  }

  if (!(data = jsonData.posts)) throw ("Error in JSON");

  n = textData.length * (type == "json" ? 4 : 1);
  if (time) breads.push ({ time: time, url: breadURL, json: jsonData, size: n });

  slicing = []; message (data [0].sub);
  post_count = post_lastpid = 0; post_timeofs = timeofs.value * 3600;

  if (lastid && target) lastid = ""; if (target) visited.push (breadURL + "#" + target);

  if (lastid) for (n = data.length - 1; n >= 0 ; n--) if (data[n].no <= lastid)
  {
    for (; n < data.length; n++) newcrumb (data[n], "", bread); break;
  }

  if (!lastid) for (n = 0; n < data.length; n++)
  {
    if (!target) newcrumb (data[n], "", bread); else if (target == data[n].no) break;
  }

  if (!lastid && target && n < data.length)
  {
    for (; n < data.length; n++) newcrumb (data[n], target, bread);
  }

  var s = post_count + "&nbsp;of&nbsp;" + data.length;
  var t = data [0].sub, u = time ? "" : "cache";

  if (!t) t = "No Title"; else
  {
    var v = bread_top (bread), w = v.children[1];
    n = w.offsetWidth; message (make_title ("", s, breadURL, u));
    n = (v.clientWidth - w.offsetWidth) / n * 0.8;
    if (n < 1) t = t.substr (0, t.length * n) + "...";
  }

  message (make_title (t, s, breadURL, u)); bakebread (target);

} catch (err) { console.log (err); message (err); }

  busy = 0; bread = null;
}
////////////////////

const updatebread = async (win, url, mode) =>
{
  var n, p, q, w, res, dat, json, doc;

  if (win && !win.closed) doc = win.document;
  for (n = 0; n < live.length && url != live [n].url; n++);
  if (!(w = bread_top (doc)) || w.name != "LaUnChEr") doc = null;
  if (doc) w = w.children;

  if (n < live.length)
  {
    if (win != live [n].win) return; if (!doc) { live.splice (n, 1); return; }
    if (mode == 2) { live [n].time -= live [n].count; live [n].count = 1; }
    if (mode == 3) { live [n].running = 0; doc.title = "BREAD"; }
    if (mode == 4)
    {
      p = pullstring (w [1].innerHTML, "<i>", "</i>");
      w [1].innerHTML = make_title (p, "IDLE", doc.name, "");
      w [0].innerHTML = 0; live.splice (n, 1); doc.title = "BREAD";
    }
    if (mode) return;
  }
  else if (!doc || !mode) return; else if (mode > 2)
  {
    if (mode == 3) doc.title = "BREAD"; return;
  }
  else
  {
    if (mode > 1) { q = "UPDATE"; r = 1; } else { q = "LIVE"; r = 5; }

    p = pullstring (w [1].innerHTML, "<i>", "</i>");
    q = make_title (p, q, doc.name, ""); p = bread_box (doc).children.length;

    w [1].innerHTML = q; w [2].innerHTML = p;
    live.push ({url: url, win: win, count: r, time: 0, total: 0, running: 0, posts: p });
  }

  if ((p = --live [n].count) > 0)
  {
    setTimeout (function() {updatebread (win, url, 0);}, 1000);
    w [0].innerHTML = p; return;
  }
  w [0].innerHTML = w [2].innerHTML = "--"; doc.title = "BREAD (updating)";

  setup_cors(); p = get_checked ("html-json", 0) ? "json" : "html";
  q = (mode < 2 ? cors_kraker : cors_bypass) + domain_8kun + url.substr (1) + "." + p;

  try
  {
    res = await fetch (q, allow_cookie ("vanwanet", ""));
    if (!res.ok) throw ("Status " + res.status + " (" + res.statusText + ")");
    dat = await res.text(); json = (p == "json") ? JSON.parse (dat) : createJSON (dat);

  } catch (err) { console.log (err); json = null; }

  finishbread (win, url, mode, json, dat ? dat.length * (p == "json" ? 4 : 1) : 0);
}

var finishbread = function (win, url, mode, json, size)
{
  var n, p, q, r, s, w, posts, doc;

  if (busy) { setTimeout (function() {finishbread (win, url, mode, json, size);}, 150); return; }

  if (win && !win.closed) doc = win.document;
  for (n = live.length - 1; n >= 0 && url != live [n].url; n--);
  if (!(w = bread_top (doc)) || w.name != "LaUnChEr") doc = null;

  if (n < 0) return; if (!doc) { live.splice (n, 1); return; }

  if (!json) { p = 0; console.log ("[Update] " + url); } else
  {
    w = bread_box (doc).children;
    q = (p = w.length) ? w [p-1].id.substr (3) : "0";
    posts = json.posts; p = posts.length;

    for (r = p - 1; r >= 0; r--) if ((s = posts [r].no) && s <= q) break;
    for (s = r + 1; s < p; s++) newcrumb (posts [s], "", doc);

    live [n].json = json; live [n].posts = p; p -= r + 1;

    for (r = 0; r < breads.length; r++) if (url == breads [r].url) break;
    breads [r] = { time: Date.now(), url: url, json: json, size: size };
  }

  r = 0; s = live [n].time; if (!s) s = 20; else r = live [n].total += p;
  q = s * 4 / (r + 1); if (q > s) q = s; q = Math.floor (q / 2);
  if (q < 10) q = 10; if (q > 240) q = 240;

  if (s > q * 4) { s = Math.floor (s / 2); live [n].total = Math.floor (r / 2); }

  r = live [n].running += p; live [n].count = q; live [n].time = q + s;
  doc.title = "BREAD (" + p + (mode > 1 ? "" : "-" + r + "-" + q) + ")";

  p = live [n].posts; if (mode > 1) { q = 0; live.splice (n, 1); }
  w = bread_top (doc).children; w [0].innerHTML = q; w [2].innerHTML = p;

  if (mode < 2) setTimeout (function() {updatebread (win, url, 0);}, 1000);
}

var launchmenu = function (win, item, cmd)
{
  var n, box, top, url, doc;

  while (item && !item.name) item = item.parentNode; if (!item) return;

  top = item.children [1]; doc = win.document; url = doc.name;
  for (n = live.length - 1; n >= 0 && url != live [n].url; n--);

  if (!cmd)
  {
    if (item.value)
    {
      top.innerHTML = item.value; item.value = ""; return;
    }
    item.value = top.innerHTML; top.innerHTML = "";

    if (doc.title.includes ("BREAD"))
    {
      box = document.createElement ("BUTTON"); box.innerHTML = "Update";
      box.onclick = function (e) { launchmenu (win, e.target, 2); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Reset";
      box.onclick = function (e) { launchmenu (win, e.target, 3); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = n < 0 ? "Go Live" : "End Live";
      box.onclick = function (e) { launchmenu (win, e.target, n < 0 ? 1 : 4); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = doc.body.value ? "Restore" : "Mark";
      box.onclick = function (e) { launchmenu (win, e.target, 7); }
      top.appendChild (box);
    }

    box = document.createElement ("BUTTON"); box.innerHTML = "Post Office";
    box.onclick = function (e) { launchmenu (win, e.target, 5); }
    top.appendChild (box);

    box = document.createElement ("BUTTON"); box.innerHTML = "Quick Reply";
    box.onclick = function (e) { launchmenu (win, e.target, 6); }
    top.appendChild (box);

    return;
  }

  top.innerHTML = item.value; item.value = "";

  if (cmd <= 4) updatebread (win, url, cmd);

  if (cmd == 5)
  {
    var postwin = win.open ("", "_blank"), post = postwin.document;

    post.open(); post.write ("<!DOCTYPE html>"); post.close();
    post.head.innerHTML = document.head.innerHTML;

    post.title = "Post Editor"; post.body.classList.add ("editor");

    box = document.getElementById ("editor").cloneNode (true);
    box = box.firstElementChild; post.body.appendChild (box);

    box.children [0].innerHTML = bread_box (doc).children[0].children[1].innerText;
  }

  if (cmd == 6) postbox (win, "");

  if (cmd == 7)
  {
    if (n = doc.body.value) win.scrollTo (0, n);
    doc.body.value = n ? 0 : win.pageYOffset;
  }
}

var taglist = function (top, name)
{
  return (top.getElementsByTagName (name));
}

var toggle_button = function (top, num)
{
  var box = taglist (top, "button")[num];
  var a = box.innerHTML, b = box.value;
  box.value = a; box.innerHTML = b;
} 

var clear_images = function (top)
{
  var n, box = taglist (top, "img");

  for (n = 0; n < box.length; n++)
  {
    if (box [n].title) toggle_button (top, n);
    box [n].nextElementSibling.style.backgroundColor = "";
    box [n].nextElementSibling.innerHTML = "";
    box [n].src = box [n].title = "";
  }
}

var clear_inputs = function (top)
{
  var n, box = taglist (top, "input");

  for (n = 0; n < 5; n++) box [n].value = "";
  for (n = 6; n < box.length; n++) box [n].value = "";
  box = taglist (top, "textarea")[0].value = "";
}

var postbox = function (win, postnum)
{
  var url, frm, box, top, doc = win.document;

  top = doc.getElementById ("quickreply");
  if (box = doc.getElementById ("posting"))
    { box.style.display = "block"; box.style.backgroundColor = "wheat"; }

  if (!postnum || postnum > 0)
  {
    top.style = "display:block";
    box = taglist (top, "textarea")[0]; box.focus();
    if (postnum) box.value += ">>" + postnum + "\n";
  }

  if (postnum == -1)
  {
    top.style = "display:none";
  }

  if (postnum == -2) if ((box = taglist (top, "img")[0]).title)
  {
    taglist (top, "input")[0].value = "";
    box.src = box.title = ""; toggle_button (top, 0);
    box.nextElementSibling.style.backgroundColor = "";
    box.nextElementSibling.innerHTML = "";
  }
  else
  {
    box = taglist (top, "input")[0];
    box.onchange = function (e) { loadimage (top, e); }
    box.click();
  }  

  if (postnum == -3)
  {
    if (box = doc.getElementById ("posting"))
    {
      box.style.display = "block"; return;
    }
    if (box = doc.getElementById ("posterror")) doc.body.removeChild (box);
    frm = document.getElementById ("postform").cloneNode(true);

    box = taglist (top, "textarea");
    frm.appendChild (box [0].cloneNode(true));
    box = taglist (top, "input");
    if (box [0].value) frm.appendChild (box [0].cloneNode(true));
    frm.children [0].value = box [5].value.trim();
    frm.children [1].value = box [6].value.trim();
    box = doc.name.split ("/");
    frm.children [2].value = box [1];
    frm.children [3].value = box [3];

    sendform (top, win, doc, new FormData(frm));
    top.style = "display:none";
  }

  if (postnum == -4) clear_inputs (top);
}

var loadimage = function (top, e)
{
  var n, img, src = e.target.files [0], name = src.name;

  img = taglist (top, "img")[0]; img.title = name;
  img.nextElementSibling.style.backgroundColor = "wheat";
  img.nextElementSibling.innerHTML = name;

  if (name.search (".jpg|.jpeg|.png|.gif") > 0)
  { 
    img.src = URL.createObjectURL (src);
  }

  toggle_button (top, 0); taglist (top, "input")[0].onchange = null;
}

const sendform = async (top, win, doc, data) =>
{
  var xhr = new XMLHttpRequest(), count = total = 0, ready = false;
  
  var box = doc.createElement ("SPAN");
  box.onclick = function() { box.style.display = "none"; }
  box.id = "posting"; box.innerHTML = "Waiting for server...";
  box.classList.add ("status3"); doc.body.appendChild (box);

  var message = function (msg) { if (!win.closed) box.innerHTML = msg; }

  xhr.onerror     = function (e) { done (null); }
  xhr.onabort     = function (e) { done (null); }
  xhr.onloadstart = function (e) { message ("Submitting your post..."); }
  xhr.onloadend   = function (e) { done (e); }

  xhr.upload.onprogress = function (e)
  {
    count = e.loaded; total = e.total; count = Math.round (count * 100 / (total + 1));
    if (count > 10 && count < 90) message ("Progress: " + count + "% (probably wrong)");
  }

  setup_cors(); xhr.open ("POST", cors_kraker + posting_url, true); xhr.send (data);

  var done = function (e)
  {
    var status = 0, statusText = response = error = postnum = "";

    if (e)
    {
      status = e.target.status; statusText = e.target.statusText;
      response = e.target.response;
    }

    if (status == 200)
    {
      error = pullstring (response, '"error":"', '"');
      if (response.includes ('"captcha"')) error = "Captcha needed to post.";
      postnum = pullstring (response, '"id":"', '"');
    }

    if (!win.closed) if (postnum)
    {
      clear_images (top); clear_inputs (top);
      doc.body.removeChild (doc.getElementById ("posting"));
    }
    else
    {
      if (status == 0) error = "Status unknown (possible CORS block)"; else
        if (!error) error = "Status: " + status + " (" + statusText + ")";

      box.id = "posterror"; box.style.display = "block";
      box.innerHTML = error; box.style.backgroundColor = "yellow";
    }
  }
}

const playvideo = async (win, url) =>
{
  if (busy < 0 || (!url && !(url = posturl.value))) return; busy = -1;

  var i, j, doc, vid, msg, fmt;

  var bstyle = "display:flex;height:100vh;justify-content:center;align-items:center;" +
    "margin:0;padding:0;background-color:black;font-size:20px;line-height:40px";

  var mstyle = "display:block;position:absolute;top:30%;padding-bottom:2px;" +
    "left:calc(50vw - 150px);right:calc(50vw - 150px);border-radius:20px;" +
    "text-align:center;font-style:italic;color:maroon;background-color:lightcoral";

  var vstyle = "border:none;outline:none;width:auto;height:auto";

  var insert = "<html><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  if (!win) win = window; try { win = win.open (); }
    catch (e) { win = window.open (); } win.focus();

  if (localhost) win.location = localhost + "~_video_.htm"; else
  {
    doc = win.document; doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  }

  for (i = 0; i < 10; i++)
  {
    // June 23, 2021 - Firefox 89 will sometimes return a document with a null body
    if ((doc = win.document).doctype != null && doc.body) break;
    await new Promise (x => setTimeout (x, 100));
  }

  msg = doc.getElementsByTagName ("h2")[0]; vid = doc.getElementsByTagName ("video")[0];
  doc.body.style = bstyle; msg.style = mstyle; vid.style = vstyle;

  msg.innerHTML = "Alleycat Player"; doc.title = "YouTube"; fmt = get_checked ("format", 18);

  if (get_checked ("dash", 0) && localhost)
  {
    var box = document.createElement ("SCRIPT");
    box.src = localhost + "~dash_player.js";
    fmt = -fmt; doc.body.appendChild (box);
  }

  url = url.substr (url.length - 11); request_new_youtube (url, 0, fmt, msg, vid, win);
}
////////////////////

var startvideo = function (url, msg, vid, win, fmt, dash)
{
  var m = "", p = document.getElementsByName ("format");

  for (var i = j = 0; i < p.length; i++) if (fmt == p[i].value)
  {
    m = p[i].nextSibling.textContent.trim() + (dash ? " | DASH: on " : " | DASH: off ");
  }

  p = document.getElementById ("status"); p.value = "";
  vid.parentNode.onbeforeunload = function() { p.value = vid.value = ""; }
  vid.value = m; vid.ontimeupdate = function() { p.value = vid.value; }
  vid.onloadedmetadata = function() { vid.controls = true; msg.style.display = "none"; }

  if (!dash)
  {
    vid.onerror = function() { msg.innerHTML = "Error"; }
    vid.src = url; return;
  }

  var dash = win.dashjs.MediaPlayer().create(); dash.initialize (vid, url, true);
  vid.parentNode.onunload = function() { dash.reset(); console.log ("DASH player unloaded."); }
  dash.on (win.dashjs.MediaPlayer.events ["ERROR"], function() { msg.innerHTML = "Error"; });
}
////////////////////

const request_new_youtube = async (id, frame, fmt, msg, vidobj, win) =>
{
  var i, j, s, t, sub, vid, aud, key, sig, webm, f = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; setup_cors(); var host = localhost ? "~" : cors_kraker;
  var url = host + "https://www.youtube.com/youtubei/v1/player?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8";

try
{
  if (!host) throw ("???");

  t = { videoId: id, context: { client: { gl: 'US', hl: 'en', clientName: 'ANDROID', clientVersion: '16.02' }}};
  s = JSON.stringify (t);

  response = await fetch (url, { method: 'POST', headers: {'content-type': 'application/json'}, body: s });
  jsonData = await response.json();

  if (!(sub = jsonData.streamingData))
  {
    t.context.thirdParty = {'embedUrl': 'http://localhost'};
    t.context.client.clientScreen = "EMBED";
    s = JSON.stringify (t);

    response = await fetch (url, { method: 'POST', headers: {'content-type': 'application/json'}, body: s });
    jsonData = await response.json(); if (!(sub = jsonData.streamingData)) throw ("!!!");
  }

  if (fmt < 0 && (fmt = -fmt) && (t = sub.adaptiveFormats))
  {
    for (i = 0; i < t.length; i++)
      if ((s = t[i].itag) && (j = isdashfmt (s)) >= 0)
        if (t[i].approxDurationMs || t[i].targetDurationSec) f[j] = i + 1;

    if (!f[8]) f[0] = f[1] = f[2] = 0;
    if (!f[9]) f[4] = f[5] = f[6] = 0;
    if (getformat (f, fmt)) tag = "";
  }

  if (tag && (t = sub.formats))
    for (i = 0; i < t.length; i++) if ((s = t[i].itag) && (j = argformat (s)) >= 0) f[j] = i + 1;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((i = argformat (fmt)) < 0 || (j = f [i] - 1) < 0) throw ("!!!");

  webm = i > 3; if (!tag) aud = new_yt_split (t [f [webm + 8] - 1]);
  vid = new_yt_split (t [j]); url = vid [0]; sig = vid [1]; if (!url) throw ("!!!");

  if (!tag) if (!(sub = aud [0])) throw ("!!!"); else
  {
    var v = aud [3] + "," + vid [3], w = "wanna_boot_dash";

    if (!(s = vid [2]))
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url);
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";
    s += "|" + (webm ? "audio/webm" : "audio/mp4") + "|" + (webm ? "opus" : "mp4a.40.2");
    s += "|" + (webm ? "video/webm" : "video/mp4") + "|" + (webm ? "vp9" : "avc1.4d401e");
    s += "|" + v + "|" + tag + "|" + sub + "|" + url + "|";

    await fetch (host + w, { method: 'POST', body: s } );
    url = host + "_" + w + "_" + tag; tag = "yt-dash"; //stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!busy) { msg.innerHTML = "Error"; return; }
  busy = 0; startvideo (url, msg, vidobj, win, fmt, tag == "yt-dash");
}
////////////////////

var new_yt_split = function (data)
{
  var d, i = r = s = "", u = data.url;

  if (!u) if (!(u = data.signatureCipher)) u = ""; else
  {
    u = u.replace (/%25/g, "%"); u = decodeURIComponent (u);
    s = pullstring (u, "s=", "&"); u = pullstring (u, "url=", "");
  }

  i = (d = data.initRange)  ? d.start + "-" + d.end : "";
  r = (d = data.indexRange) ? d.start + "-" + d.end : "";

  if (!(d = data.approxDurationMs)) d = 0;

  return ([u, s, d / 1000, i + "," + r]);
}

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixformat = function (f, frame)
{
}
////////////////////

var no_format = function (frame)
{
}
////////////////////

</script>

</html>
