<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer">
<base href="https://8kun.top" target="_blank">

<title>8kun Launcher</title>

<style type="text/css">

body {
  font-size: 16px; line-height: 19px; text-align: center;
  font-family: 'times new roman', serif;
  color: brown; background-color: wheat;
}

body.bread {
  margin: 0; overflow-y: scroll;
  font-size: 13px; line-height: 15px;
  font-family: 'verdana', 'helvetica', san-serif;
  color: navy; background-color: peachpuff;
}

input {
  height: 17px; font-size: 16px;
  font-family: 'consolas', 'lucida console', monospace;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 3px 5px; caret-color: navy;
  color: firebrick; background-color: seashell;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 1px 2px 1px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input.static {
  font-family: 'times new roman', serif;
  padding: 3px 7px 3px 7px; border: 2px solid burlywood;
  text-align: center; color: red; background-color: cornsilk;
}

button {
  width: auto; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  border-color: gainsboro;
}

a.ref:link {
  color: blue;
}

a.ref:visited {
  color: green;
}

p.listbox {
  display: inline-block; vertical-align: top;
  text-align: left; margin: -3px 8px 0 4px;
}

span.status {
  display: block; position: sticky; top: 0;
  padding: 4px 0 4px 0; margin: 0 3px 2px 3px;
  text-align: center; font-size: 15px; line-height: 20px;
  outline: 1px solid peru; color: mediumblue; background-color: pink;
}

span.postbox {
  display: inline-block; width: calc(100% - 12px);
  word-wrap: break-word; text-align: left; border: 1px solid darkred;
  padding: 0 2px 5px 2px; margin: 0 3px 1px 3px;
}

p.header {
  margin: 0 0 -7px 0; padding: 5px 4px 6px 4px;
  border: 0 solid goldenrod; border-width: 0 0 1px 0;
  line-height: 16px; background-color: cornsilk; 
}

p.subject {
  margin: 10px 0 -7px 0; padding: 0 6px 4px 6px; font-weight: bold;
  color: teal; border-bottom: 1px solid darksalmon;
}

div.font1 {
  min-height: 30px; margin-top:1px; font-family: 'verdana', san-serif;
}

div.font2 {
  min-height: 30px; margin-top:1px; line-height: 1.2em;
  font-size: 1.05em; font-family: 'helvetica', san-serif;
}

div.font3 {
  min-height: 30px; margin-top:1px; line-height: 1.05em;
  font-size: 1.18em; font-family: 'times new roman', serif;
}

p.body-line {
  margin: 0 6px 0 6px; padding: 0;
}

p.empty {
  padding-bottom: 8px;
}

p.blank {
  margin: 5px 0 0 0;
}

p.quote {
  color: darkgreen;
}

p.rquote {
  color: blueviolet;
}

p.ltr {
  direction: ltr;
}

p.rtl {
  direction: rtl;
}

span.heading {
  color: crimson; font-weight: bold;
}

span.red-padding {
  border: 0 solid transparent;
  border-width: 0 3px 0 4px;
}

span.small {
  color: blueviolet; font-weight: bold;
}

a.null, a.null:link {
  color: darkcyan;
}

a:link {
  color: firebrick;
}

a:visited {
  color: darkcyan;
}

img {
  vertical-align: top; background-color: goldenrod; border: none; outline: none;
}

div.imgbox {
  text-align: center; line-height: 0; padding: 0; margin: 0;
}

div.left {
  float: left; margin: 9px 10px -5px 5px;
}

div.right {
  float: right; margin: 9px 5px -2px 10px;
}

div.multi1 {
  margin: 9px 0 -12px 0;
}

div.multi2 {
  margin: 9px 0 -7px 0;
  border: 0 solid goldenrod; border-width: 0 0 2px 0;
}

span.image {
  display:inline-block; vertical-align:top; margin: 2px 0 4px 0;
}

span.banner {
  display: block; font-weight: bold;
  line-height: 10px; padding: 4px 0 5px 0;
  color: white;
}

span.banner_red {
  border-top: 1px solid sandybrown; background-color: coral;
}

span.banner_green {
  border-top: 1px solid cadetblue; background-color: forestgreen;
}

span.banner_blue {
  border-top: 1px solid royalblue; background-color: mediumblue;
}

.pop1:hover .pop2 {
  visibility: visible;
}

.pop2 {
  visibility: hidden; text-align: center;
  display: block; position: absolute; z-index: 1;
  padding: 4px; margin: 8px 10px 0 10px;
  font-size: 12px; line-height: 16px;
  color: read; background-color: white;
  pointer-events: none;
}

::selection {
  color: yellow; background-color: orchid;
}

.show {
  display: block;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }
w_ { color: firebrick; }

</style></head>

<body onload="javascript:startup()">

<h1><g_>8kun</g_> <r_>Bread Launcher</r_> <g_>v1a</g_></h1>

<g_>Enter URL:</g_>&nbsp; <input type=text id="url" size=55
  onclick="javascript:input_onclick('url')" onblur="javascript:input_onblur('url')"> &nbsp;
  <button onclick="javascript:fetchbread()">Go</button> &nbsp;
  <button onclick="javascript:playvideo()">Play Video</button>

<p>
<p class="listbox">
<g_>Pick a proxy:</g_>
</p>
<p class="listbox">
<input type=radio name="proxy" value="LOCAL://localhost:8080/"> Local Proxy Server (Kraker)<br>
<input type=radio name="proxy" value="https://cors-anywhere.herokuapp.com/" checked> cors-anywhere.herokuapp.com (1)<br>
<input type=radio name="proxy" value="https://xyss5.herokuapp.com/"> xyss5.herokuapp.com (2)<br>
<input type=radio name="proxy" value="https://api.allorigins.win/raw?url="> api.allorigins.win (3)<br>
<input type=radio name="proxy" value=""> None
</p>

<p><g_>Numbers indicate level of video playback support: 1) mostly works, 2) sometimes works, 3) does not work.</g_>
<p><a class="ref" target=_blank href="https://8kun.top/alleycat/res/10.html">Your feedback is appreciated</a>
(feature requests, suggestions, bug reports)

<p><hr><p>

<g_>Font:</g_>&nbsp;
<input type=radio name="font" value="1" checked> Verdana &nbsp;
<input type=radio name="font" value="2"> Helvetica &nbsp;
<input type=radio name="font" value="3"> Times New Roman &nbsp; &nbsp;

<g_>Page width:</g_>&nbsp;
<input type=radio name="width" value="100" checked> 100% &nbsp;
<input type=radio name="width" value="90"> 90% &nbsp;
<input type=radio name="width" value="75"> 75% &nbsp;
<input type=radio name="width" value="60"> 60% <br>

<p><hr><h2><b_>Alleycat Player Options</b_></h2>

<p class="listbox">
<input type=radio name="format" value="18" checked> mp4-360p<br>
<input type=radio name="format" value="19"> mp4-480p<br>
<input type=radio name="format" value="22"> mp4-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=radio name="format" value="43"> webm-360p<br>
<input type=radio name="format" value="44"> webm-480p<br>
<input type=radio name="format" value="45"> webm-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=checkbox name="dash" disabled> Use DASH<br>
<g_>(requires local proxy)<br>(needed for livestream)</g_>
</p>

<p><g_>Now playing:</g_> &nbsp;<input type=text id="status" class="static" style="width:170px">

<p><hr><p><div style="text-align:left;padding-bottom:250px">

The <g_>8kun Bread Launcher</g_> is an app for reading threads on the free speech web site <g_>8kun.top</g_> without the
speed drawbacks of the site's normal client. Improved handling of images, headers and text makes for a sharper and more
customizable appearance. The term "bread" is not a synonym for "thread" but I like the sound of "Bread Launcher" so I'm
using my creative license.
<p>
This app, while it is quick, gets most of its speed advantage by allowing you to retrieve an individual post and its replies
instead of the entire thread (which is a capability not supported by the current 8kun client). Threads also remain
in cache (memory) for up to 2 hours to reduce the need to access the site. There is no mouse hover functionality so reply
links must be clicked on and viewed in a new tab.
<p>
To access 8kun, you need a URL with or without the domain name. Examples are below. If you wish to see a specific post then
append "#" and the post number. To view a thread beginning at a certain post then append "?" and the post number.
<b>Note:</b> do not close the launcher while daughter tabs are still open (they link to the code inside the launcher).
<p>
Full URL: <g_>https://8kun.top/alleycat/res/10.html</g_> &nbsp; Partial URL: <g_>/alleycat/res/10.html</g_>
<p>
If you are not familiar with the need for a proxy server then please refer to the Alleycat Player installation instructions
<a class="ref" target=_blank href="https://archive.org/download/alleycat-player/installation-v1.htm">here</a>
for an explanation. The most reliable way to use this app is to install the Local Proxy Server. The second best way is
to install a CORS bypass extension.
<p>
<b>DDOS Mitigation (bot blocker)</b>
<p>
8kun was recently subjected to intense denial-of-service attacks and VanwaNet put up a DDOS Mitigation wall (which I call a
bot blocker) in order to help alleviate the situation. I have encountered this before with CloudFlare and Sucuri in the
process of hacking sites for Alleycat Player. A bot blocker consists of obfuscated Javascript code which must be executed by
the web browser in order to obtain an authorization string or a cookie. This is a puzzle to unravel and it has been
solved for the VanwaNet blocker.
<p>
Fair warning: the Local Proxy Server must be used to bypass the bot blocker. It cannot be done otherwise. The blocker is
not in place at the time of this writing but, if it returns, you will be unable to use this app if you are relying
on a remote proxy or CORS extension for access. Make sure that you have copied the file "vanwanet.js" to your proxy
folder. This file contains the decryption code to unlock the bot blocker.
<p>
<b>Video Player</b>
<p>
A special feature is available for viewing embedded Youtube videos. If you click on the bar below the thumbnail, the video
will open with Alleycat Player or, rather, a subset of the Alleycat code. This includes the DASH capability which requires
the Local Proxy Server which is available with the installation of Alleycat Player. Some videos
(especially music videos) will not work with a remote proxy. This is due to an IP address restriction applied by Youtube.
<p>
<b>Autoplay may be blocked by your web browser.</b> Chrome-based browsers have this issue but not Firefox. This
problem is solved if you are using the Local Proxy Server. A small stub file (called _video_.htm) will be saved to your
proxy (Alleycat) folder which will then be loaded into the video player tab to force Chrome to recognize the proper
domain name (localhost instead of about:blank). As long as you have given autoplay permission to "localhost" then
it will work fine.
<p>
For non-embedded videos, copy the Youtube URL or just the 11-character ID to the URL input line and press "Play Video".
If you copy the full URL, make sure that the video ID is at the end of the input line. Support for other video sites
(such as Bitchute) is planned.
<p>
Not all formats are available. The non-DASH formats are: mp4-360p, mp4-720p, webm-360p. To save a non-DASH video,
right-click on the video and choose the "Save Video" option.
<p>
<b>Special note about Youtube livestreams</b>
<p>
It takes three to four hours for Youtube to move a finished livestream to VOD (video on demand) status. Until that happens,
only the last minute of an ended livestream will be viewable. This is a known issue with Alleycat Player.

<p><hr><p>

</div></body>

<script id="SlowAES"></script>

<script>
//https://a.4cdn.org/pol/thread/277397564.json
//https://boards.4chan.org/pol/thread/277397564

var localhost, response, textData, jsonData, busy = 0;
var breads = [], bread = null, breadURL, post_font, post_width, post_count, vidwin = null;
var cors_bypass, cors_kraker, freetv = new Object (), cookies = new Object ();

var posturl = document.getElementsByTagName ("input")[0];

var startup = function ()
{
  localhost = document.location.origin + "/";
  if (document.location.hostname != "localhost") localhost = "";
  if (!localhost) return;

  var dash = document.getElementsByName ("dash")[0];
  dash.checked = true; dash.disabled = false;
  document.getElementsByName ("proxy")[0].checked = true;

  var video = "<!DOCTYPE html><html><head><meta charset='utf-8'>\n" +
    "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n" +
    "</head><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  fetch (localhost + "~_video_.htm", { method: "PUT", body: video });
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var setup_cors = function ()
{
  var i, j, k = document.getElementsByName ("proxy");

  for (i = j = 0; i < k.length; i++) if (k[i].checked) cors_bypass = k[i].value;

  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);
}

var message = function (msg)
{
  if (bread) bread.body.children[0].innerHTML = msg;
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var createwindow = function (win, title)
{
  var i, j, k;

  k = document.getElementsByName ("font");
  for (i = j = 0; i < k.length; i++) if (k[i].checked) j = k[i].value;
  post_font = "font" + j;

  k = document.getElementsByName ("width");
  for (i = 1, j = 0; i < k.length; i++) if (k[i].checked) j = k[i].value;
  post_width = j ? j + "%" : "";

  if (!win) win = window.open ("about:blank", "_blank", "");
  var doc = win.document; win.focus();

  doc.open(); doc.write ("<!DOCTYPE html>"); doc.close();
  doc.head.innerHTML = document.head.innerHTML;
  doc.title = title; doc.body.classList.add ("bread");
  doc.body.onmessage = function (w, x, v) { if (v) playvideo (w, x); else fetchpost (w, this, x); }

  var box = document.createElement ("SPAN");
  box.classList.add ("status"); doc.body.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getpost = function (x) " +
    "{ var w = window.open ('about:blank', '_blank', ''); document.body.onmessage (w, x, false); }";
  doc.body.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getvideo = function (x) " +
    "{ var w = window.open ('about:blank', '_blank', ''); document.body.onmessage (w, x, true); }";
  doc.body.appendChild (box);

  return (doc);
}
////////////////////

var createJSON = function ()
{
  var i, j, n, s, t, v, w, pid, uid, time, name, cap, trip, post;
  jsonData = {"posts" : []}; var posts = jsonData.posts;
  var doc = document.implementation.createHTMLDocument();
  doc.open(); doc.write (textData); doc.close();

  var video = ["video-container", "video-container-invidio", "video-container-hooktube"];
  doc = doc.getElementsByName ("postcontrols")[0].children[1];
  var box = doc.getElementsByTagName ("DIV");

  for (n = 0; n < box.length; n++) if (s = box[n].id)
  {
    pid = s.substr (s.indexOf ("_") + 1);
    s = box[n].getElementsByClassName ("intro")[0].innerHTML;

    time = pullstring (s, 'unixtime="', '"');
    name = pullstring (s, 'class="name">', '<');
    subj = pullstring (s, 'class="subject">', '<');
    trip = pullstring (s, 'class="trip">', '<');
    uid  = pullstring (s, 'class="poster_id">', '<');
    cap  = pullstring (s, 'class="capcode">', '<');
    if (!uid) uid = pullstring (s, 'hidden service.">', '<');

    w = posts.length ? box[n] : doc;
    w = w.getElementsByClassName ("files");
    v = [""]; w = w && w[0] ? w[0].innerHTML.split (">File: <a ") : "";

    for (i = 1; i < w.length; i++)
    {
      s = pullstring (w[i], '', '='); t = pullstring (w[i], '"', '"');

      if (s == "title")
      {
        v.push (t); t = pullstring (w[i], 'style="', '"');
        v.push (pullstring (t, "width:", "px")); v.push (pullstring (t, "height:", "px"));
      }

      if (s == "href" && t.indexOf (".webm") > 0)
      {
        if (t[0] == "/") t = "http:" + t;
        v.push (t); t = pullstring (w[i], 'style="', '"');
        v.push (pullstring (t, "width:", "px")); v.push (pullstring (t, "height:", "px"));
      }

      s = pullstring (w[i], '"postfilename"', '<'); s = pullstring (s, '>', ""); v.push (s);
    }

    for (i = 5, t = []; i < v.length; i += 4)
      t.push ({ tim: v[i], tn_w: v[i+1], tn_h: v[i+2], filename: v[i+3] });

    w = posts.length ? box[n] : doc; w = w.children;

    for (i = 0; i < w.length; i++)
    {
      if (!(j = w[i].getAttribute ("class"))) continue;
      if (j != video[0] && j != video[1] && j != video[2]) continue;
      v = [w[i].getAttribute ("data-video"), "", "255", "143"]; break;
    }

    s = box[n].getElementsByClassName ("body")[0].innerHTML;

    post = { no: pid, name: name, sub: subj, capcode: cap, trip: trip, id: uid, time: time,
             com: s, files: "", embed: "", embed_thumb: "", fsize: "", filename: "", ext: "",
             embed_thumb: v[0], tim: v[1], tn_w: v[2], tn_h: v[3], filename: v[4], extra_files: t };

    posts.push (post);
  }
}
////////////////////

var getimage = function (v, multi)
{
  var s, t, title, banner = "", w = v.tn_w, h = v.tn_h;

  if (!v.tim)
  {
    s = v.v_url; t = v.v_img; title = "YouTube"; banner = "red";
  }
  else
  {
    s = "https://media.8kun.top/file_store/"; t = s + "thumb/" + v.tim; s += v.tim;

    if (t.search ("\.mp4") > 0)
    {
      title = "MP4"; banner = "green";
      t = t.replace ("\.mp4", ".jpg");
    }
    if (t.search ("\.webm") > 0)
    {
      title = "WEBM"; banner = "green";
      s = v.tim; t = s.replace ("/src/", "/thumb/")
      t = t.substr (0, t.indexOf (".webm")) + ".jpg";
    }
    if (t.search ("\.pdf") > 0)
    {
      title = "PDF"; banner = "green"; w = 120; h = 140;
      t ="https://media.8kun.top/static/file.png";
    }
    if (t.search ("\.gif") > 0)
    {
      title = "GIF"; banner = "blue";
    }

    if (t.search ("\.gif|\.jpeg|\.jpg|\.png") < 0) t = "";
  }

  var name = v.filename ? "/" + v.filename : "";

  var img = "<span class='image'><a target=_blank href='" + s + name + "'>" +
    "<img src='" + t + "' width=" + w + " height=" + h + "></a>";

  if (banner)
  {
    s = '<a target=_self href="javascript:getvideo(' + "'" + s + "')" + '">';
    t = "<span class='banner banner_" + banner + "'>" + title + "</span>";
    img = img + (banner != "red" ? t : s + t + "</a>");
  }

  return (img + "</span>");
}

var newcrumb = function (post, target)
{
  var i, j, n, p, s, t, v, box, img = "", data = post.com, str = "highlightReply('";
  if (target && data.indexOf (str + target + "'") < 0) return; post_count++;

  var name = post.name.trim(), trip = post.trip, time = post.time, uid = post.id, pid = post.no;
  trip = trip ? "<w_>" + trip + "</w_>&nbsp;" : ""; uid = uid ? "&nbsp;<b_>" + uid + "</b_>" : "";

  name = (name && name != "Anonymous") ? "&nbsp;" + name : ""; time = new Date (time * 1000);
  s = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"]; s = s[time.getDay()];

  time = "<g_>" + time.toLocaleDateString() + " (" + s + ")</g_> <w_>" + time.toLocaleTimeString() + "</r_>";
  p = '<a target=_self href="javascript:getpost(' + "'" + breadURL + "#" + pid + "'" + ')">';
  var head = "# " + p + pid + "</a>&nbsp; " + time + " <g_>" + name + "</g_> " + trip + uid;
  if (post.capcode) head = head + "&nbsp; " + post.capcode;

  while ((s = pullstring (data, str, '>')))
  {
    t = pullstring (s, 'href="', '"'); p = pullstring (t, "#", "");
    t = 'target=_self href="javascript:getpost(' + "'" + t + "'" + ')"';
    if (target && target == p) t = 'class="null"'; s = 'onclick="' + str + s;
    data = data.replace (s, t); box = bread.getElementById ("msg" + p);
    if (box) { box = box.children[0]; box.innerHTML += " #" + pid; }
  }

  p = '<p class="body-line empty "></p>';
  if (!data.indexOf (p)) data = data.substr (p.length);
  var multi = post.extra_files && post.extra_files.length;

  if (t = post.embed_thumb)
  {
    s = "https://www.youtube.com/embed/" + t;
    t = "https://i.ytimg.com/vi/" + t + "/mqdefault.jpg";
    img = getimage ({ v_url: s, v_img: t, tn_w: post.tn_w, tn_h: post.tn_h }, multi);
  }

  if (post.tim)
  {
    img = getimage (post, multi); v = post.extra_files;
    if (multi) for (n = 0; n < v.length; n++) img = img + getimage (v[n], true);
  }

  s = multi ? (data ? "multi2" : "multi1") : "left";
  if (img) img = "<div class='imgbox " + s + "'>" + img + "</div>";
  s = "&nbsp;</p>" + (post.sub ? "<p class='subject'>" + post.sub + "</p>" : "");
  t = "<div" + (data ? " class='" + post_font + "'" : "") + ">";

  box = document.createElement ("SPAN"); box.classList.add ("postbox");
  box.innerHTML = "<p class='header'>&nbsp;" + head + s + img + t + p + data + "</div>";
  box.setAttribute ("id", "msg" + pid); if (post_width) box.style.width = post_width;
  bread.body.appendChild (box);

  if (!img) return;
  s = box.getElementsByTagName ("div"); t = s[0].getElementsByTagName ("img");

  if (multi)
  {
    for (i = 0, j = 1, p = 0, v = []; i <= t.length; i++, j++)
      if (i == t.length || (p += (s = t[i].width)) > box.clientWidth - j * 8)
      { 
        if (i == t.length) { s = 0; i++; } p = (box.clientWidth - p + s) / j;
        p = j > 2 ? p / 2 : 0; for (; j > 1; j--) v.push (p); p = 0; j = 0; i--;
      }

    for (n = 0; n < t.length; n++)
    {
      s = t[n].parentNode.parentNode;
      s.style.marginLeft = v[n] + "px"; s.style.marginRight = v[n] + "px";
    }
  }
  else
  {
    v = t[0].parentNode.parentNode.parentNode; t = s[1];

    if ((n = v.clientHeight + 4 - t.clientHeight) < 0)
    {
      v.classList.remove ("left"); v.classList.add ("right");
    }
    else t.style.paddingTop = (n / 4) + "px";
  }
}
////////////////////

var bakebread = function ()
{
  var box = document.createElement ("DIV"); box.style = "width: 90vw; height: 50vh";
  var url = "javascript:getpost('" + breadURL;

  var button1 = "<button onclick=" + url + "?')>New crumbs</button>";
  var button2 = "<button onclick=" + url + "')>Fresh bread</button>";

  box.innerHTML = "<p>" + button1 + "&nbsp; &nbsp;" + button2;
  bread.body.appendChild (box);
}

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});

  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];

  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

const fetchbread = async (win, url) =>
{
  if (busy) { alert ("Patience...stuck waiting for a server response."); return; }
  if (!url && !(url = posturl.value)) return;

  if (url [0] == "/") url = document.baseURI + url.substr (1);
  var n, s, t, lastid = target = "", time = Date.now() / 1000;

  if ((t = url.indexOf ("?")) > 0) { lastid = url.substr (t + 1); url = url.substr (0, t); }
  if ((t = url.indexOf ("#")) > 0) { target = url.substr (t + 1); url = url.substr (0, t); }

  breadURL = new URL(url).pathname;
  bread = createwindow (win, (lastid ? "CHUNK" : target ? "Slice" : "BREAD"));
  message ("<big><w_>Launching...</w_></big>"); busy = 1; setup_cors();

  var crypto = document.getElementById ("SlowAES");
  if (!crypto.src && localhost) crypto.src = localhost + "~vanwanet.js";

  for (n = 0; n < 10; n++)  // wait for new window to be ready; needed for Google Chrome
  {
    await new Promise (x => setTimeout (x, 100)); if (bread.hasFocus()) break;
  }

try
{
  for (n = 0; n < breads.length; n++)
    if (breads[n].time < time - 7200) breads.splice (n, 1);

  for (n = 0; n < breads.length; n++) if (breads[n].url == url)
    if (lastid || t < 0) breads.splice (n, 1); else
      { time = 0; jsonData = breads[n].json; }

  if (time)
  {
    response = await fetch (cors_bypass + url, allow_cookie ("vanwanet", ""));
    if (response.status != 200) throw ("File not found");
    textData = await response.text();

    if (textData.substr (0, 1000).indexOf ("VanwaNet DDoS Mitigation") > 0)
    {
      if (!crypto.src) throw ("DDOS Mitigation - need Local Proxy Server");
      var error = "DDOS Mitigation - puzzle not solved";
      n = textData.indexOf ("<script>function"); if (n < 0) throw (error);
      var data = textData.substr (n + 8); data = data.substr (0, data.indexOf ('+";'));
      data = data.replace ("document.cookie", "data");
      if (!data) throw (error); eval (data);

      response = await fetch (cors_bypass + url, allow_cookie ("vanwanet", data));
      if (response.status != 200) throw ("File not found");
      textData = await response.text();
    }
    createJSON();
  }

  post_count = 0; if (!(data = jsonData.posts)) throw ("Error in JSON");
  if (time) breads.push ( {"time":time, "url":url, "json":jsonData });
  message ("<span>" + data[0].sub + "</span>");

  if (lastid) for (n = data.length - 1; n >= 0 ; n--) if (data[n].no < lastid)
  {
    for (++n; n < data.length; n++) newcrumb (data[n], ""); break;
  }

  if (!lastid) for (n = 0; n < data.length; n++)
  {
    if (!target) newcrumb (data[n], ""); else if (target == data[n].no) break;
  }

  if (!lastid) if (target) if (n >= data.length) throw ("Post not found"); else
  {
    newcrumb (data[n], ""); for (; n < data.length; n++) newcrumb (data[n], target);
  }

  bakebread(); s = url.substr (url.indexOf ("//") + 2);
  var board = "<g_><b>" + pullstring (s, "/", "/") + "</b></g_>&nbsp;#" + pullstring (s, "/res/", ".");
  var count = " <w_>(" + post_count + "&nbsp;of&nbsp" + data.length + ")</w_>&nbsp;";
  var cache = time ? "" : "&nbsp;<g_>(cache)</g_>";

  s = bread.body.children[0]; t = s.children[0]; n = t.offsetWidth;
  t.innerHTML = count + board + cache; n = (s.clientWidth - t.offsetWidth) / n * 0.8;
  s = data[0].sub; if (n < 1) s = s.substr (0, s.length * n) + "...";
  message ("<i>" + s + "</i>" + count + board + cache);

} catch (err) { console.log (err); message (err); }

  bread = null; busy = 0;
}
////////////////////

var fetchpost = function (win, doc, url)
{
  var i, j, k, t, s = doc.children, str = "javascript:getpost('" + url + "')";

  if (url.indexOf ("?") < 0) fetchbread (win, url); else
  {
    fetchbread (win, url + s [s.length - 2].id.substr (3)); return;
  }

  for (i = 0; i < s.length; i++)
  {
    t = s[i].getElementsByTagName ("a");
    for (j = 0; j < t.length; j++) if (k = t[j].href)
      if (k == str) t[j].classList.add ("null");
  }
}
////////////////////

const playvideo = async (win, url) =>
{
  var i, j, doc, vid, msg, fmt; if (!url && !(url = posturl.value)) return;

  var bstyle = "display:flex;height:100vh;justify-content:center;align-items:center;" +
    "margin:0;padding:0;background-color:black;font-size:20px;line-height:39px";

  var mstyle = "display:block;position:absolute;top:30%;" +
    "left:calc(50vw - 150px);right:calc(50vw - 150px);border-radius:20px;" +
    "text-align:center;color:maroon;background-color:lightcoral;font-style:italic";

  var vstyle = "border:none;outline:none;width:auto;height:auto";

  var insert = "<html><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  if (!win) win = window.open ("about:blank", "_blank", ""); win.focus();

  if (localhost) win.location = localhost + "~_video_.htm"; else
  {
    doc = win.document; doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  }

  for (i = 0; i < 10; i++)
  {
    if ((doc = win.document).doctype != null) break; await new Promise (x => setTimeout (x, 100));
  }

  msg = doc.getElementsByTagName ("h2")[0]; vid = doc.getElementsByTagName ("video")[0];
  doc.body.style = bstyle; msg.style = mstyle; vid.style = vstyle;
  msg.innerHTML = "Alleycat Player"; doc.title = "YouTube";

  fmt = document.getElementsByName ("format");
  for (i = 0, j = 18; i < fmt.length; i++) if (fmt[i].checked) j = fmt[i].value;
  fmt = document.getElementsByName ("dash")[0];

  if (fmt.checked && localhost)
  {
    var box = document.createElement ("SCRIPT");
    box.src = localhost + "~dash_player.js";
    j = -j; doc.body.appendChild (box);
  }

  url = url.substr (url.length - 11); request_youtube (url, 0, j, msg, vid, win);
}

var startvideo = function (url, msg, vid, win, fmt, dash)
{
  var m = "", p = document.getElementsByName ("format");

  for (var i = j = 0; i < p.length; i++) if (fmt == p[i].value)
  {
    m = p[i].nextSibling.textContent + (dash ? " | DASH: on " : " | DASH: off ");
  }

  p = document.getElementById ("status"); p.value = "";
  vid.parentNode.onbeforeunload = function() { p.value = vid.value = ""; }
  vid.value = m; vid.ontimeupdate = function() { p.value = vid.value; }
  vid.onloadedmetadata = function() { vid.controls = true; msg.style.display = "none"; }

  if (!dash)
  {
    vid.onerror = function() { vid_oops (vid, true); }
    vid.src = url; return;
  }

  var dash = win.dashjs.MediaPlayer().create(); dash.initialize (vid, url, true);
  vid.parentNode.onunload = function() { dash.reset(); console.log ("DASH player unloaded."); }
  dash.on (win.dashjs.MediaPlayer.events ["ERROR"], function() { vid_oops (vid, true); });
}
////////////////////

var vid_oops = function (vid, fatal)
{
  if (!fatal) return; var msg = vid.previousElementSibling;
  msg.innerHTML = "ERROR"; msg.style.display = "block";
}
  
const request_youtube = async (id, frame, fmt, msg, vid, win) =>
{
  var i, j, n, s, sub, dat, key, sig;
  var f = [0,0,0,0,0,0,0,0,0,0], d = [0,0,0,0,0,0,0,0,0,0];

  if (busy) { msg.innerHTML = "Error"; return; }

  var tag = "youtube"; setup_cors(); busy = 1;
  var url = cors_bypass + "https://www.youtube.com/get_video_info?video_id=" + id + "&el=";

try
{
  response = await fetch (url + "leanback");
  textData = await response.text();

  s = "%22itag%22"; sub = textData.split (s);

  if (sub.length < 2)
  {
    response = await fetch (url + "previewpage" + "&eurl=http%3A%2F%2Flocalhost");
    textData = await response.text();

    sub = textData.split (s); if (sub.length < 2) throw ("!!!");
  }

  for (i = 1; i < sub.length; i++)
  {
    url = sub [i]; if (url.indexOf ("%3A") != 0) continue;
    s = url.substr (3, url.indexOf ("%2C") - 3);
    if ((j = argformat (s)) >= 0) f[j] = i;
    if ((j = isdashfmt (s)) >= 0)
      if (url.indexOf ("index") > 0 || url.indexOf ("_live_") > 0) d[j] = i;
  }

  if (fmt < 0)
  {
    if (!d[8]) d[0] = d[1] = d[2] = 0;
    if (!d[9]) d[4] = d[5] = d[6] = 0;
    fmt = -fmt; n = getformat (d, fmt);
    if (cors_kraker) if (n) { f = d; tag = ""; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((n = argformat (fmt)) < 0 || !(n = f[n])) throw ("!!!");

  s = yt_split (sub[n]); dat = s.split ("|"); url = dat[0]; sig = dat[1];

  if (sig.length > 99)  // some videos require a signature; usually 105 or 109 bytes long
  {
    response = await fetch (cors_bypass + "https://www.youtube.com/embed/" + id);
    textData = await response.text();

    url = textData.substr (textData.indexOf ("base.js") - 100, 107);
    url = url.substr (url.indexOf ('src=') + 5);

    if (!(key = cookies [url]))
    {
      response = await fetch (cors_kraker + "https://www.youtube.com" + url);
      textData = await response.text();

      key = yt_algo (textData); cookies [url] = key;
    }
    eval (key); url = dat[0] + "&sig=" + sig;
  }

  if (!tag)
  {
    if ((i = argformat (fmt)) < 4) j = 8; else j = 9;
    s = yt_split (sub [f[j]]) + "|" + dat[2];
    var dat = s.split ("|"); j = j & 1;

    sig = dat[1];
    if (sig) { eval (key); sig = "&sig=" + sig; }
    sig = dat[0] + sig;

//    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
//      "<a href='" + sig + "'>Audio</a> &nbsp;" +
//      "<a href='" + url + "'>Video</a>" + tail;

    s = url.substr (url.indexOf ("&dur=") + 5); s = s.substr (0, s.indexOf ("&")) * 1;
    var v = dat[2] + "," + dat[3]; var w = "wanna_boot_dash";

    if (!s)
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url, { method: 'GET' } );
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";

    s = s + "|" + (j ? "audio/webm" : "audio/mp4") + "|" + (j ? "opus" : "mp4a.40.2");
    s = s + "|" + (j ? "video/webm" : "video/mp4") + "|" + (j ? "vp9" : "avc1.4d401e");
    s = s + "|" + v + "|" + tag + "|" + sig + "|" + url + "|";

    await fetch (cors_kraker + w, { method: 'POST', body: s } );
    url = cors_kraker + "_" + w + "_" + tag;
    tag = "yt-dash"; //stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!busy) { msg.innerHTML = "Error"; return; }

  busy = 0; startvideo (url, msg, vid, win, fmt, tag == "yt-dash");
}
////////////////////

var yt_split = function (t)
{
  var n, p, q, s;

  n = t.indexOf ("%7D%5D"); s = t.substr (0, (n < 0 ? t.length : n));
  s = s.replace (/%5Cu0026/g, "&"); s = s.replace (/%25/g, "%");
  s = s.replace (/%25/g, "%"); s = decodeURIComponent (s);

  n = s.indexOf ("&s="); if (n < 0) n = s.indexOf ('"s=');

  if (n < 0) p = ""; else
  {
    p = s.substr (n + 3, 300);
    n = p.indexOf ("&"); if (n > 0) p = p.substr (0, n);
    n = p.indexOf ('"'); if (n > 0) p = p.substr (0, n);
  }

  q = s.replace (/\\/g, "");
  n = q.indexOf ("]");  if (n > 0) q = q.substr (0, n);
  q = q.split ('"start":"');

  if (q.length < 3) q = ""; else
  {
    q[1] = q[1].substr (0, q[1].indexOf ('"}'));
    q[2] = q[2].substr (0, q[2].indexOf ('"}'));
    q[1] = q[1].replace ('","end":"', "-");
    q[2] = q[2].replace ('","end":"', "-");
    q = q[1] + "," + q[2];
  }

  s = s.substr (s.indexOf ("http")); s = s.substr (0, s.indexOf ('"'));
  n = s.indexOf ("&sp="); if (n > 0) s = s.substr (0, n);
  n = s.indexOf ("&s=");  if (n > 0) s = s.substr (0, n);

  return (s + "|" + p + "|" + q);
}

var yt_algo = function (data)
{
  var i, j, n, s, v;

  for (i = 0; i < 3; i++)
  {
    j = data.indexOf ('a=a.split("")'); if (j < 0) return "";
    s = data.substr (j + 14, 300); if ((n = s.indexOf ("a.join")) > 0) break;
    if (i > 1) return ""; data = data.substr (j + 1);
  }
  s = s.substr (0, n - 7);
  v = "var " + s.substr (0, 2) + "={";
  if ((n = data.indexOf (v)) < 0) return "";

  v = data.substr (n, 300); v = v.substr (0, v.indexOf ("};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixformat = function (f, frame)
{
}
////////////////////

var no_format = function (frame)
{
}
////////////////////

</script>

</html>
