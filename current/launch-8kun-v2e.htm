<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="icon" href="launch-8kun.ico">
<base target="_blank">

<title>8kun Launcher</title>

<style type="text/css">

body {
  text-align: center;
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif;
  color: brown; background-color: navajowhite;
}

body.bread {
  margin: 0; overflow-y: scroll;
  font-size: 13px; line-height: 16px;
  font-family: 'verdana', 'helvetica', san-serif;
  color: #083078; background-color: navajowhite;
  pointer-events: none;
}

body.postoffice {
  margin: 0; font-size: 13px; line-height: 17px;
  font-family: 'verdana', 'helvetica', san-serif;
  color: green; background-color: navajowhite;
}

hr {
  border-color: burlywood; border-style: solid;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

input[type=text] {
  height: 17px; font-size: 16px; outline: none;
  font-family: 'consolas', 'lucida console', monospace;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 3px 5px; caret-color: navy;
  color: firebrick; background-color: seashell;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 3px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 0 2px 2px 1px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input.small {
  height: 12px; font-size: 14px; text-align: center; padding: 3px 1px 2px 1px;
}

input.static {
  font-family: 'times new roman', serif; text-align: center; 
  padding: 3px 7px 3px 7px; border: 2px solid burlywood;
  color: red; background-color: cornsilk;
}

button {
  width: auto; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  outline: none; border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

a:link {
  color: blue;
}

a:visited {
  color: green;
}

p.listbox {
  display: inline-block; vertical-align: top;
  text-align: left; margin: -3px 2px 0 2px;
}

.command p {
  display: inline-block; vertical-align: top;
  text-align: center; line-height: 28px; margin: -15px 4px 0 4px;
}

.command input[type=text] {
  width: 300px;
}

.command input[type=checkbox] {
  width: auto; margin-bottom: 7px;
}

.command button {
  width: 100px;
}

span.status {
  display: block; position: sticky; top: 0;
  padding: 4px 0 4px 0; margin: 0 3px 1px 3px; height: 22px;
  text-align: center; font-size: 15px; line-height: 22px;
  border: 1px solid chocolate; border-top-width: 0;
  color: blue; background-color: pink;
}

.status p {
  display: inline-block; max-width: calc(100vw - 440px); margin: 0;
  text-overflow: ellipsis; font-style: italic; vertical-align: top;
  overflow: hidden; white-space: nowrap; word-break: break-all;
}

.status span {
  vertical-align: top;
}

span.status1 {
  float: left; width: 44px; margin-left: 4px;
  border-radius: 3px; background-color: silver;
}

span.status2 {
  float: right; width: 44px; margin-right: 4px;
  border-radius: 3px; background-color: silver;
}

span.status3 {
  display: inline-block; position: sticky; top: auto; bottom: 60px;
  left: 0; right: 0; margin: auto; padding: 10px;
  width: 600px; max-width: calc(100vw - 100px);
  border: 2px solid chocolate; border-radius: 10px;
  font-size: 16px; line-height: 21px;
  color: mediumblue; background-color: snow;
}

span.status4 {
  display: block; position: fixed; width: 550px; height: auto;
  top: 80px; bottom: auto; padding: 8px 10px 5px 10px;
}

span.postbox {
  display: block; width: calc(100% - 12px); text-align: left;
  padding: 0 2px 4px 2px; margin: 0 3px 1px 3px; border: 1px solid peru;
  white-space: pre-wrap; word-wrap: break-word; overflow: hidden;
}

p.header {
  margin: 0 0 2px 0; padding: 5px 8px 6px 15px; text-indent: -6px;
  border-bottom: 1px solid goldenrod; background-color: cornsilk; 
}

p.subject {
  margin: -2px 0 2px 0; padding: 3px 6px 4px 6px; font-weight: bold;
  color: blue; border-bottom: 1px solid peru;
}

.icon {
  float: right; font-size: 17px; color: indianred; padding-left: 12px;
}

.font1 {
  min-height: 30px; line-height: 1.2em; margin: 0 6px;
  font-size: 1em; font-family: 'verdana', san-serif;
}

.font2 {
  min-height: 30px; line-height: 1.2em; margin: 0 6px;
  font-size: 1.05em; font-family: 'helvetica', san-serif;
}

.font3 {
  min-height: 30px; line-height: 1.1em; margin: 0 6px;
  font-size: 1.175em; font-family: 'times new roman', serif;
}

.header a:link, .font1 a:link, .font2 a:link, .font3 a:link {
  color: firebrick; padding: 0 1px;
}

.header a:visited, .font1 a:visited, .font2 a:visited, .font3 a:visited {
  color: darkcyan;
}

a.reply:link, a.reply:visited {
  float: right; text-decoration: none; padding: 0;
  width: 8px; height: 12px; margin: 1px -3px 0 6px;
  border-style: solid; border-width: 2px; border-radius: 5px;
  border-color: lightpink; background-color: transparent;
}

a.moderate:link, a.moderate:visited {
  float: right; text-decoration: none; padding: 0;
  width: 7px; height: 10px; margin: 2px 0 0 6px;
  border-style: solid; border-width: 2px; border-radius: 5px;
  border-color: lightskyblue; background-color: transparent;
}

a.in-visited:link, a.in-visited:visited {
  color: darkcyan;
}

a.in-posted:link, a.in-posted:visited {
  color: yellow; background-color: violet;
  text-decoration: none; margin: 1px 0;
}

p.in-sliced {
  background-color: lavenderblush;
}

span.in-sliced {
  background-color: gainsboro; border-color: darkseagreen;
}

span.is-deleted {
  background-color: pink;
}

.body-line {
  margin: 0; padding: 0;
}

.empty {
  padding-bottom: 8px;
}

.blank {
  margin: 5px 0 0 0;
}

.quote {
  color: teal;
}

.rquote {
  color: deeppink;
}

.ltr {
  direction: ltr;
}

.rtl {
  direction: rtl;
}

.spoiler {
  padding: 0 2px; margin-top: 1px; color: pink; background-color: pink;
}

.spoiler:hover {
  color: firebrick;
}

span.heading {
  color: mediumvioletred; font-weight: bold;
}

span.red-padding {
  padding: 0 4px 0 4px;
}

span.small {
  color: darkviolet;
}

pre.prettyprint {
  margin: 0; padding: 0; width: 100%; max-height: 50vh; overflow: auto;
}

img {
  vertical-align: top; background-color: goldenrod; border: none; outline: none;
}

div.imgbox {
  text-align: center; line-height: 0; padding: 0; margin: 0;
}

div.left {
  float: left; margin: 0 10px -4px 5px;
}

div.right {
  float: right; margin: 0 5px -1px 10px;
}

div.multi1 {
  margin: 0 0 -3px 0;
}

div.multi2 {
  margin: 0 0 2px 0; border-bottom: 2px solid goldenrod;
}

span.image {
  display: inline-block; vertical-align: top; margin: 2px 0 4px 0;
}

span.banner {
  display: block; font-weight: bold;
  line-height: 10px; padding: 4px 0 5px 0;
  color: white; text-decoration: none !important;
}

span.banner_red {
  border-top: 1px solid sandybrown; background-color: coral;
}

span.banner_green {
  border-top: 1px solid cadetblue; background-color: forestgreen;
}

span.banner_blue {
  border-top: 1px solid royalblue; background-color: mediumblue;
}

a.banner {
  text-decoration: none;
}

textarea {
  box-sizing: border-box; resize: none;
  vertical-align: top; white-space: pre-wrap; outline: none;
  font-size: 13px; font-family: 'verdana', 'helvetica', san-serif;
  caret-color: maroon; border: 2px solid burlywood;
  color: mediumblue; background-color: snow;
}

div.overlay {
  display: none; position: fixed; top: 30px; left: 10vw;
  width: calc(80vw - 6px); height: auto; text-align: center;
  font-size: 17px; line-height: 22px; font-family: 'times new roman', serif;
  border: 3px solid darkgoldenrod; border-top-width: 1px; padding: 1px;
  color: green; background-color: lightgoldenrodyellow;
}

.overlay div {
  padding: 9px 3px; margin: 7px 0;
  height: auto; background-color: burlywood;
}

.overlay button {
  margin: 0 3px 0 3px; padding: 1px 12px 0 12px;
  border: 1px solid darksalmon; border-radius: 15px;
  color: darkviolet; background-color: wheat;
}

.overlay button:hover:active {
  border-color: chocolate;
}

.overlay input {
  margin: 0 3px 0 3px; padding: 1px 7px 2px 7px;
  border: 1px solid darksalmon; border-radius: 10px;
  font-family: 'verdana', 'helvetica', san-serif;
  font-size: 13px; vertical-align: top;
}

.overlay2 span {
  display: inline-block; position: relative;
  width: 255px; height: 271px; margin: 0 1px 0 0;
  vertical-align: top; border: 2px solid burlywood;
}

.overlay2 img {
  width: auto; height: auto; margin: auto;
  max-width: 255px; max-height: 250px;
  background-color: transparent;
}

.overlay2 p {
  position: absolute; bottom: 0; width: calc(100% - 10px); height: 20px;
  margin: 0; padding: 0 5px; text-align: center; font-size: 15px;
  border-top: 1px solid burlywood; cursor: default; text-overflow: ellipsis;
  word-break: break-all; overflow: hidden; white-space: nowrap;
}

.overlay2 textarea {
  margin: 0 0 0 1px; padding: 1px 5px;
  width: calc(100% - 277px); height: 275px;
}

div.editor {
  display: inline-block; font-family: 'times new roman', serif;
}

.editor input[type=text] {
  margin: 0 6px 0 6px; padding: 1px 7px 2px 7px;
  border: 1px solid darksalmon; border-radius: 10px;
  font-size: 13px; font-family: 'verdana', 'helvetica', san-serif;
}

.editor input[type=checkbox] {
  margin-bottom: 4px;
}

.editor span {
  display: block; position: relative;
  box-sizing: border-box; vertical-align: top;
  width: 142px; height: calc((100vh - 100px) / 5);
  margin: 0 0 2px 0; border: 1px solid darksalmon;
}

.editor img {
  width: auto; height: auto; margin: auto;
  max-width: 100%; max-height: calc(100% - 18px);
  background-color: transparent;
}

.editor p {
  position: absolute; bottom: 0;
  width: calc(100% - 10px); height: 17px;
  margin: 0; padding: 0 5px; text-align: center;
  border-top: 1px solid burlywood; cursor: default; text-overflow: ellipsis;
  word-break: break-all; overflow: hidden; white-space: nowrap;
}

.editor textarea {
  display: block; margin: 0 0 8px 0; padding: 1px 5px;
  width: calc(100vw - 172px); height: calc(100vh - 92px);
  border: 1px solid darksalmon;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }
w_ { color: firebrick; }
x_ { color: blueviolet; }
y_ { color: fuchsia; }
n_ { }

</style></head>

<body onload="javascript:startup()">

<h1 style="margin:20px 0 25px 0"><g_>8kun</g_> <r_>Bread Launcher</r_> <g_>v2e</g_></h1>

<g_>Enter URL:</g_>&nbsp; <input type=text id="url" size=55 style="margin-bottom: 5px"
  onclick="javascript:input_onclick('url')" onblur="javascript:input_onblur('url')"> &nbsp;
  <button onclick="javascript:fetchpost()">Go</button>&nbsp;
  <button onclick="javascript:playvideo()">Play Video</button>
<p>

<p class="listbox" style="margin-left:-50px">
<g_>Time Offset:</g_> &nbsp;<input type=text class="small" maxlength=5 style="width:42px" value="0">
&nbsp; &nbsp;<br style="margin-bottom:17px">
<g_>HTML <input type=radio name="html-json" value="0" checked> &nbsp;&nbsp;
JSON <input type=radio name="html-json" value="1"></g_><br>
<g_>[Board Moderator]</g_> <input type=checkbox name="moderator" value="1">
</p>

<p class="listbox">
<g_>Pick a proxy:</g_>
</p>
<p class="listbox">
<input type=radio name="proxy" value="LOCAL://localhost:8080/"> Local Proxy Server (Kraker)<br>
<input type=radio name="proxy" value="https://xyss5.herokuapp.com/" checked> xyss5.herokuapp.com<br>
<input type=radio name="proxy" value="https://api.allorigins.win/raw?url="> api.allorigins.win<br>
<input type=radio name="proxy" value=""> None
</p>
<p>Note: <r_>YouTube videos will no longer work without the Local Proxy Server.</r_>
<p><a class="ref" href="https://8kun.top/alleycat/res/10.html">Your feedback is appreciated</a>
&nbsp;|&nbsp; <a href="#help" target=_self>Instructions</a>
&nbsp;|&nbsp; <a href="#bake" target=_self>QR Baker Hints</a>
&nbsp;|&nbsp; <a href="#proxy" target=_self>Kraker Control Panel</a>
&nbsp;|&nbsp; <a href="https://sys.8kun.top/kmn.php">8kun Captcha</a>

<p><hr><p>

<g_>Font:</g_>&nbsp;
<input type=radio name="font" value="font1" checked> Verdana &nbsp;
<input type=radio name="font" value="font2"> Helvetica &nbsp;
<input type=radio name="font" value="font3"> Times New Roman &nbsp; &nbsp;

<g_>Page width:</g_>&nbsp;
<input type=radio name="width" value="" checked> 100% &nbsp;
<input type=radio name="width" value="90%"> 90% &nbsp;
<input type=radio name="width" value="75%"> 75% &nbsp;
<input type=radio name="width" value="60%"> 60% <br>

<p><hr><h2><b_>Alleycat Player Options</b_></h2>

<p class="listbox">
<input type=radio name="format" value="18" checked> mp4-360p &nbsp;&nbsp;<br>
<input type=radio name="format" value="19"> mp4-480p<br>
<input type=radio name="format" value="22"> mp4-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=radio name="format" value="43"> webm-360p &nbsp; &nbsp;<br>
<input type=radio name="format" value="44"> webm-480p<br>
<input type=radio name="format" value="45"> webm-720p<br>
</p><p class="listbox"></p>

<p class="listbox">
<input type=checkbox name="dash" value="1" disabled> Use DASH<br>
<g_>(needed for livestream)</g_>
</p>

<p><g_>Now playing:</g_> &nbsp;<input type=text id="status" class="static" style="width:170px" disabled>

<p><hr><p><div style="text-align:left;color:maroon">

<b>Release notes for v2e (August 23, 2022)</b>
<p>
The <g_>8kun captcha</g_> is now cookie-based, meaning that it is no longer possible to post without the Kraker Local
Proxy Server (<b>note:</b> a CORS unblocking extension may work if it is implemented correctly). You will need
the latest version of Kraker (version <b>4d</b>) and your browser must be configured to proxy through the Socks5 port.
See <a href="https://8chananon.github.io/Alleycat-Player/current/socks-proxy-4c.htm">here</a> for setup instructions.
On the plus side, it is now possible to post as moderator (board owner/volunteer).
<p>
Once you have Kraker running and your browser is configured to proxy through it then you will need to do one little thing.
Open "_settings.txt" (your Kraker settings file) and add one of these lines exactly as shown:
<p>
<g_>[? sys.8kun.top SHD:$~https://sys.8kun.top]</g_> or <g_>[? sys.8kun.top SHD:$~!vpx::|*https://sys.8kun.top]</g_>
<p>
You can use either option depending on whether you wish to enable certificate authentication which is important to
guard against a man-in-the-middle attack (the "!vpx" part in the second option enables authentication). This distinction
will be important the next time the site security certificate expires (which happens every three months). Board moderators
should enable authentication but the choice is yours.
<p>
Reload the settings file using the Kraker Control Panel to configure the "shadow port". When
your browser attempts to access the posting server at <g_>sys.8kun.top</g_>, Kraker will intercept the request and do
some fiddling with the response headers. You don't need to know the details but it is what needs to be done due to
browser restrictions regarding cookies.
<p>
Use the link at the top of this page to open the new 8kun captcha. Your browser will complain that the security
certificate is invalid. This is fine. It's the way a non-transparent proxy works (the shadow port creates an interface
which is similar to the corporate proxy in an office environment). Just instruct the browser to accept the certificate
(your browser should remember this from now on). You will be able to post after completing the captcha.
<p>
Note that the Bread Launcher is not configured to handle the per-post captcha (which you may encounter if the site
comes under attack).
<p>
<b_>For board moderators:</b_>
<p>
Log in as you would normally. Everything will work as it always did. Check the box marked <g_>[Board Moderator]</g_>
at the top of the page if you wish to post as moderator. This will also enable a new button on each post (situated
right next to the Quick Reply button). The options are simple. You can edit or delete a post and/or ban a user IP address.
More powerful features are not supported because I don't need the headache.
<p>
<b_>New catalog feature:</b_>
<p>
To open the catalog view, just enter the name of the board and press "Go". The catalog view is basically the same as
a thread view. Click a link to open a thread. That's about it. I may or may not consider additional options. It's fine
for my purposes.
<p>
<b_>About NoScript:</b_>
<p>
I have issues with NoScript on Firefox because it attaches Javascript to HTML page elements. It severely breaks the
Bread Launcher, causing a tab to suddenly become unresponsive. This appears to be due to some security restriction
on the part of Firefox but I can't say for sure that the same problem doesn't occur with other browsers. I've stopped
using NoScript.
<a href="https://github.com/gorhill/uMatrix">uMatrix</a> is much better because it doesn't rely on invasive Javascript
to do its dirty work. You should try it out. I don't have any advice if your ad blocker is causing issues except to
tell you to ditch it.
<p>
<b_>About Alleycat Player:</b_>
<p>
Occassionally, it may happen that a YouTube video won't play. If this happens then close the tab and try opening the
video again. It should work after two or three tries. This issue will be rectified in the next version of the Launcher.

<p><hr><p>

<b>Release notes for v2d (November 13, 2021)</b>
<ul><li>
<b>Important New Feature:</b> Any Slice that is in a thread that is auto-updating will also be
auto-updated. This allows you to follow a conversation or track the reponses to an important post in real time.
Great feature for bakers.
</li><li>
The Post Office will now display the new post number after posting. The input fields will no longer be cleared by default.
There is a checkbox at the lower right to enable auto-clear. Also, the number of posts is increased from 5 to 6.
</li><li>
Added an event handler to block double-clicks on the status bar. This allows for the rapid reactivation
of the menu bar (useful in the Post Office).
</li><li>
Corrected the flawed truncation of long titles in the status bar. The new CSS will now truncate long titles
correctly when the browser is resized.
</li><li>
I found another strange behaviour on Chrome-based browsers. Zooming is blocked if a new tab is opened without a URL.
The fix is to open the tab with the URL "about:blank". This behaviour is totally unexpected. As I stated before,
I use Firefox so funky Chrome issues often get missed.
</li><li>
Setting the proxy to "None" was causing an exception (internal Javascript crash). Sorry about that but who uses "None" anyway?
</li></ul>

<p><hr><p>

<b>Release notes for v2c (October 20, 2021)</b>
<ul><li>
Ooops. I just noticed that the page width setting wasn't working. Been like that for a while but it's fixed now.
</li><li>
Changed the media server from "images.128ducks.com" to "media.128ducks.com". The changeover occurred early Wednesday,
October 20.
</li><li>
The Post Office feature is now fully implemented. It includes the ability to create new threads and to manage 5 posts
per instance.
</li><li>
It is now possible to copy the text from the status bar without causing the menu bar to open.
</li><li>
I can't get the XMLHttpRequest module to give progress reports for file uploads. It does not work correctly on any
browser. I searched the net for a possible solution but it appears that the module is just funky. It does not function
correctly on the default 8kun client either.
</li></ul>

<p><hr><p>

<b>Release notes for v2b (October 13, 2021)</b>
<ul><li>
Fixed wrong button appearance on Pale Moon and Waterfox. I used an outline rather than a border around the buttons
in the status bar. The outline was being drawn square instead of rounded.
</li><li>
Fixed three issues on Chrome-based browsers (Google, Brave, Opera and others): 1) slow countdown timer,
2) missing bread titles, 3) images appearing on the right when they should be on the left
</li><li>
Removed the dark border around the text area in the Quick Reply box. I missed this because I have a userContent CSS
on my Firefox that does that. The fix is to specify "outline:none" in the CSS for the &lt;textarea&gt; element.
</li><li>
I am working on the Post Office feature. Give me a week or so.
</li><li>
Lastly, please don't hesitate to report issues with the Launcher, especially if you are not on Firefox or Windows.
I can't fix issues that I don't know about and I can't spend the time to test on every browser. This is my hobby,
not a profession. I also cannot test for Linux compatibility though that shouldn't really be necessary.
</li></ul>

<p><hr><p>

<b>Release notes for v2a (October 9, 2021)</b>
<ul><li>
This is a major upgrade. The Bread Launcher now supports auto-updating and posting. At present, only one image or file
is allowed in a post (Quick Reply). The text input is unlimited but constrained to a small window. A more complete
post editor will come soon (I will be calling it the Post Office). Instructions are below.
</li><li>
The Youtube embed links stopped working because YT doesn't like the blank "referer" HTTP header so I removed the
"no-referrer" meta setting.
</li></ul>

<p><hr><p>

<b>Release notes for v1e (September 15, 2021)</b>
<ul><li>
This version is being released due to the media server issues on the 8kun site. Media are currently being delivered
from "images.128ducks.com". I will update when the situation changes.
</li><li>
Added support for BitChute/Twitter/Rumble/Vimeo embeds. For now, the images come from my GitHub Pages web server.
</li><li>
The Youtube player has been updated due to changes in the Youtube API. For this reason, the player will no longer
work without the Kraker Local Proxy Server.
</li><li>
Added a new flag to the Kraker Control Panel. This flag is undocumented.
</li></ul>

<p><hr><p>

<b>Release notes for v1d (March 11, 2021)</b>
<p>
<ul><li>
A bunch of small fixes that aren't worth enumerating.
</li><li>
Added a control panel for the new Socks5 Proxy Server.
</li></ul>

<p><hr><p>

<b>Release notes for v1c (December 13, 2020)</b>
<p>
<ul><li>
Fixed the identifiers for "Board Owner" and "8kun Administrator".
</li><li>
Fixed browser security violation caused by opening a web page in a daughter tab.
</li><li>
Added option to adjust the displayed post time. The browser is supposed to display the time for the local time zone
but, for some reason, this has never worked for me. The value is expressed in hours. Fractional and negative values are
permitted. For example, I am using -5 to adjust to Eastern Time.
</li><li>
Added option to select either the HTML or the JSON format for downloading from the 8kun server. HTML is the default option
since JSON has been unreliable (missing or truncated). It doesn't make any difference as far as functionality goes since
the app converts HTML to JSON anyway. However, some recent fuckery on /qresearch/ has caused the HTML format to break while
the JSON was working fine. That's why I decided to include the new option.
</li><li>
Adjusted the cache retention policy. Expiry is based on memory usage (capped at 6 megabytes) and the time of
most recent access rather than the time of creation.
</li><li>
I have been having issues with mp4 and webm videos. Since I only use Firefox, the problem has not been verified to exist on
other browsers. The problem is that the video will stop playing partway through due to the 8kun server apparently dropping
the connection prematurely. This happens ONLY on 8kun so it is not necessarily a browser issue. Downloading is not affected.
The problem is resolved by routing the video through the Kraker Local Proxy Server (if you have it, of course).
</li><li>
PLEASE NOTE: You can help improve this app by sending me feedback. While I will continue developing the app for the
foreseeable future, I am only in a position to consider features that I personally want. Without feedback, YOUR needs
cannot be addressed. Send feedback.
</li></ul>

<p><hr><p>

<b>Release notes for v1b (October 5, 2020)</b>
<p>
<ul><li>
Fixed some performance issues and a potential crash issue. Working fine with Google Chrome, Brave, Opera and Firefox
(recommended). Waterfox, a fork of Firefox, still does not work even though I fixed some code that it complained about.
</li><li>
In general, web browsers do not like what this app is doing. That is unfortunate since I am doing what the browser makers
have always wanted. I am using the browser as a development platform but I keep getting hammered by stupid design choices
(their choices, not mine, since I follow the standards which they often do not).
</li><li>
Fixed a problem with extracting image links. This affects webm videos and some boards.
</li><li>
Added the ability to globally track reply links that have been visited and replies that have been seen. I'm not
going to explain how it all works. Just watch for the colour codings and you'll understand as you go along. It works
pretty good but I would like to have an ability to automatically track long or convoluted reply chains. In my experience,
this might not be important. Reply chains have a tendency to degenerate into a series of pointless one-liners which are
probably not worth reading anyway (amirite?).
</li><li>
Tweaked the CSS to improve the look and feel. If you don't like my colour choices then fix the damn CSS yourself.
</li><li>
Modified the retention strategy for thread caching. The retention period is now 4 hours (up from 2) but only a maximum of
15 threads will be cached at one time. This strategy may or may not be ideal for you but the point (obviously) is to
limit the memory usage.
</li></ul>

<p><hr><p id="help">

<b><b_>Introduction</b_></b>
<p>
The <g_>8kun Bread Launcher</g_> is an app for reading threads on the free speech web site <g_>8kun.top</g_> without the
speed drawbacks of the site's normal client. Improved handling of images, headers and text makes for a sharper and more
customizable appearance. The term "bread" is not a synonym for "thread" but I like the sound of "Bread Launcher" so I'm
using my creative license.
<p>
This app, while it is quick, gets most of its speed advantage by allowing you to retrieve an individual post and its replies
instead of the entire thread (which is a capability not supported by the current 8kun client). Threads are also kept
in cache (memory) to reduce the need to access the site. There is no mouse hover functionality so reply
links must be clicked on and viewed in a new tab.
<p>
To access 8kun, you need a URL with or without the domain name. The ".html" extension is not required. Examples are below.
If you wish to see a specific post, then append "#" and the post number. To view a thread beginning at a certain post,
append "?" and the post number. <b>Note:</b> do not close the Launcher while daughter tabs are still open because they
link to the code inside the Launcher.
<p>
Full URL: <g_>https://8kun.top/alleycat/res/10.html</g_> &nbsp; Partial URL: <g_>/alleycat/res/10</g_>
<p>
If you are not familiar with the need for a proxy server, then please refer to the Alleycat Player installation instructions
<a class="ref" href="https://8chananon.github.io/Alleycat-Player/current/installation-v1.htm">here</a>
for an explanation. The most reliable way to use this app is to install the Local Proxy Server. The second best way is
to install a CORS unblocking extension.

<p><hr><p>

<b><b_>The Menu Options</b_></b>
<p>
To access the bread options menu, click on the status bar at the top. These are the options:
<ul><li>
<b>Update</b> - refresh the page with new posts
</li><li>
<b>Reset</b> - reset the post counter to zero (this value appears in the window title)
</li><li>
<b>Go Live / End Live</b> - starts or ends auto-updating. The window title will show the number of new posts loaded,
the number of posts loaded in total and the current time base (which depends on posting frequency). Only one
auto-update session is permitted per thread. Slices in the same thread are included in the auto-update.
</li><li>
<b>Mark / Restore</b> - marks or restores your current position on the page. This is useful if you wish to explore
the thread and then return to your current position.
</li><li>
<b>Post Office</b> - opens the Post Office in a new tab (instructions below).
</li><li>
<b>Quick Reply</b> - opens a reply box to reply to the thread. You are permitted one image or file. You can
also embed from Youtube and other sites. There is an input for a name and a text area for your message. When you press
the Reply button, your post will be submitted and a progress bar will appear near the bottom of the screen to report
on the progress.
</li></ul>
Note that only the Post Office and Quick Reply options are available in a Slice. Auto-updating and posting require
either the Kraker Local Proxy Server or a CORS unblocker (a remote proxy is permitted for manual updates). The reason
is to prevent a lockout by the remote proxy for exceeding its bandwidth limit. You may use one of these extensions:
<p>
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin"
  >Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  >Chrome-based</a>
&nbsp;<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere"
  >Firefox only</a>

<p><hr><p>

<b><b_>Hints on Posting</b_></b>
<ul><li>
You cannot post without first solving the 8kun captcha. You can reach the captcha page via the link posted at the top
of this page or at the top of the board catalog page.
</li><li>
There is a button at the right side of each post header. Click this to open the Quick Reply box while adding the
post number to the text input.
</li><li>
You can add an image to your reply and the chosen image will appear in the reply box. The supported formats are:
jpg, jpeg, png, gif. You can also attach the following file types: mp4, webm, pdf. Non-image files have
no associated thumbnail but the file name will be shown.
</li><li>
There is limited space for the file name so a long name will be truncated. To see the full name, hover your mouse
over the file name box.
</li><li>
The progress of your post submission is monitored for progress and the final result. If all goes well, then the progress
bar will disappear when the post submission is complete. If an error is returned by the server, then this will be
displayed. You can click on the progress bar to hide it. You can click on the status bar to make the progress bar
visible again. If possible, the percentage progress of your file upload will be shown (this is unreliable).
</li><li>
The Clear button will clear all of the input fields except for the Name field. The Copy button will copy the text
inside the text area.
</li><li>
If you post a reply from a Slice tab, it is safe to close the tab while your post is being submitted. This is not
recommended since the Bread Launcher will be unable to notify you of a posting failure.
</li></ul>

<p><hr><p>

<b><b_>The Post Office</b_></b>
<ul><li>
When you first open the Post Office, it will be tied to the thread that you opened it from. You can open the menu by
clicking on the status bar at the top. You can prepare up to 6 posts in a single instance of the Post Office. Each
post can have up to 5 images/files (this may be restricted to a lesser number by the board owner).
</li><li>
The Clear and Copy buttons work the same as in a Quick Reply box.
</li><li>
The current thread number can be changed by entering the number in the input line and pressing Change. The Launcher
does not verify that the thread number is correct. You will be notified by the server if you try to post. You can test
the thread number by sending a blank post.
</li><li>
You can create a new thread with the New Thread button. Caveat: this will not work if the board requires a captcha to
create a thread. When the new thread has been created, the Post Office will be tied to it and additional posts will go
to that thread.
</li></ul>

<p><hr><p>

<b><b_>Video Player</b_></b>
<p>
A special feature is available for viewing embedded Youtube videos. If you click on the bar below the thumbnail, the video
will open with Alleycat Player or, rather, a subset of the Alleycat code. This includes the DASH capability which requires
the Kraker Local Proxy Server which is available with the installation of Alleycat Player. Some videos (especially music
videos) will not work with a remote proxy. This is due to an IP address restriction applied by Youtube.
<p>
<b>Update:</b> due to changes in the Youtube API, it is no longer possible to open a video without the Local Proxy Server.
<p>
<b>Autoplay may be blocked by your web browser.</b> Chrome-based browsers have this issue but not Firefox. This
problem is solved if you are using the Local Proxy Server. A small stub file (called _video_.htm) will be saved to your
proxy (Alleycat) folder which will then be loaded into the video player tab to force Chrome to recognize the proper
domain name (localhost instead of about:blank). As long as you have given autoplay permission to "localhost" then
it will work fine.
<p>
For non-embedded videos, copy the Youtube URL or just the 11-character ID to the URL input line and press "Play Video".
If you copy the full URL, make sure that the video ID is at the end of the input line. Support for other video sites
(such as Bitchute) is planned.
<p>
Not all formats are available. The non-DASH formats are: mp4-360p, mp4-720p, webm-360p. To save a non-DASH video,
right-click on the video and choose the "Save Video" option.
<p>
<b>Special note about Youtube livestreams</b>
<p>
It takes three to four hours for Youtube to move a finished livestream to VOD (video on demand) status. Until that happens,
only the last minute of an ended livestream will be viewable. This is a known issue with Alleycat Player.

<!--
<b>DDOS Mitigation (bot blocker)</b>
<p>
8kun was recently subjected to intense denial-of-service attacks and VanwaNet put up a DDOS Mitigation wall (which I call a
bot blocker) in order to help alleviate the situation. I have encountered this before with CloudFlare and Sucuri in the
process of hacking sites for Alleycat Player. A bot blocker consists of obfuscated Javascript code which must be executed by
the web browser in order to obtain an authorization string or a cookie. This is a puzzle to unravel and it has been
solved for the VanwaNet blocker.
<p>
Fair warning: the Local Proxy Server must be used to bypass the bot blocker. It cannot be done otherwise. The blocker is
not in place at the time of this writing but, if it returns, you will be unable to use this app if you are relying
on a remote proxy or CORS extension for access. Make sure that you have copied the file "vanwanet.js" to your proxy
folder. This file contains the decryption code to unlock the bot blocker.
<p>
//-->

<p><hr><p id="bake">

<b><b_>Hints on Baking with the Launcher</b_></b>
<p>
This is not a general lesson on baking. Only issues relevant to the <g_>8kun Bread Launcher</g_> are discussed here.
You should already be thoroughly familiar with the features of the Launcher. If you are not, then go practice for
a while before attempting to bake.
<p>
The first step to baking is to retrieve the dough for the current bread (which should already be open in the
Launcher). Copy the dough from the upload site to a text editor (Notepad works fine). Open the Post Office and copy
each section from the dough to a post. The first post is the intro which seldom changes from bread to bread. Add an
image or Youtube link to the post. The second post may be the globals or the tool links. Not all bakers post the
globals and it may be missing from the current dough. The next few posts will contain the notables.
<p>
At this point, you have the posts prepared in the Post Office and you will begin scanning the current bread for notables.
It is advisable to not get too far ahead with the notables since you want to also monitor the replies. Anons may
want to warn about the credibility of a potential notable or supply additional information. You should be making
liberal use of the Launcher's slicing feature to open a notable post and check for replies. Auto-update should
be enabled for the bread so that any Slices will also auto-update (you can update manually if you prefer).
If you are uncertain about a potential notable, then leave the Slice open for a while to collect replies.
<p>
The Quick Reply box in the main bread tab should be used to collect the notables. To collect a notable, open the post in
a Slice, gather the information in the Quick Reply box (including any anon replies that may be helpful) and then copy the
information to your main reply box (this is why there is a Copy button). Close the Slice if you're done with it.
From time to time, you should copy your collected notables to the dough and save the dough file just in case you have
a system failure. Also, you will at certain points post your collected notables to the bread to inform the anons of
your progress. Before you post, copy the notables to your dough. After the post has been submitted, don't forget
to re-open the Quick Reply box and paste your notables back in (because, unlike the Post Office, there is no option
to prevent auto-clear).
<p>
When the bread is nearly full, begin preparing for the next bread. Complete whatever changes you need to make to
the dough and then save the dough on the dough upload site. Leave the site open in a tab. Make sure that
your posts in the Post Office are the same as what you have in the dough. Now create a new thread with your intro post.
<p>
<b>Special note:</b> you may get a server error upon creating the new thread. I have tested this a few times on the
<g_>/test/</g_> board and got no errors. Perhaps this problem occurs due to the high level of traffic on the
<g_>/qresearch/</g_> board. If you get an error, then the Launcher won't have the thread number so you will need to go
get it. Refresh the catalog and look for the new thread. If you can't find it, then you may need to retry the post.
If you find it, then open the thread in the Launcher and copy the thread number from the status bar. Change the
current thread number in the Post Office. This is not necessary if the thread was created without error since the
Post Office will be tied automatically to the new thread.
<p>
Finish posting the remainder of your posts. You can prepare up to 6 posts in the Post Office. If you need more space,
then open another copy of the Post Office (warning: remember to change the thread number before you start
posting from this extra copy). Lastly, you need to post the link for your saved dough. If you have not already
opened the new thread, then do so now and check to make sure that everything posted correctly. Copy the dough link
from the upload site that you left open in another tab. Make a Quick Reply with the new dough link.
<p>
One final note. You are using the Quick Reply box in the main bread tab for your notables. If you want to post any
other reply to the bread, then open a Slice in order to get a fresh reply box. This might seem obvious but it is easy
to overlook this shortcut. Trust me, I had to learn this the hard way, kek.
<p>
Oh, one more thing. The font used on the default 8kun client is Helvetica. You can select this font in the Launcher in
order to see your posts in the Post Office as they would be seen in the default client. I mention this due to the
usage of spaces and hyphenation characters to line up some items. Select Helvetica before you open the Post Office.
You can change back to another font afterward without affecting the Post Office.

<p><hr></div><p id="proxy">

<div class="command" style="margin-top:36px">

<h1><r_>Kraker</r_> <g_>Local Proxy Server</g_> <r_>Control Panel</r_></h1>
<br>
<p>
<button onclick="javascript:dns_lookup()">DNS lookup</button>
<br><br>
<button onclick="javascript:dns_servers()">Servers list</button>
<br><br>
<button onclick="javascript:dns_activate()">Activate</button>
<br><br>
<button onclick="javascript:dns_reload()">Reload</button>
<br><br>
<button onclick="javascript:dns_flags()">Flags</button>
<br><br>
</p>
<p>
<input id="cmd1" type=text>
<br><br>
<input id="cmd2" type=text>
<br><br>
<input id="cmd3" type=text>
<br><br>
<input id="cmd4" type=text>
<br><br><g_>
<input id="flg1" type=checkbox> Console &nbsp;
<input id="flg2" type=checkbox> TOR Alt Port &nbsp;
<input id="flg3" type=checkbox> TOR for All
</g_><br><br>
</p>
<p style="text-align:left">
Perform DNS lookup (by URL or IP address)
<br><br>
Activate DNS server group and/or show Servers list
<br><br>
Activate group(s) and resolve DNS (console output)
<br><br>
Reload settings file (default is <g_>_settings.txt</g_>)
<br><br>
<input id="flg4" type=checkbox> <g_>Show DNS/DoH activity</g_> (sockets if console is on)
</p>

</div><div style="width:90vw;height:75vh"></div></body>

<!-- ///// Post Form ///// -->

<form id="postform" style="display:none">
<input type=text name="name">
<input type=text name="subject">
<input type=text name="embed">
<input type=text name="board">
<input type=text name="thread">
<input type=text name="post" value="reply">
<input type=text name="mod" value = "0">
<input type=text name="json_response" value="1">
<input type=text name="domain_name_post" value="8kun.top">
</form>

<!-- ///// Quick Reply ///// -->

<div id="quickreply" class="overlay">
<span style="display:none">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
</span>
<div style="display:flex;margin-top:0">
<button>Clear</button><button>Copy</button>
<span style="flex-grow:1"></span>
<span>Name: <input type=text style="width:250px"></span>
<span style="flex-grow:1"></span>
<button>Reply</button><button>Close</button></div>

<span class="overlay2"><span><img><p></p></span>
<textarea name="body" wrap=hard></textarea></span>

<div style="margin-bottom:0">
<input type=text style="display:none">
Embed (YouTube, Bitchute, Vimeo or other):
<input type=text style="width:400px"></div>

</div>

<!-- ///// Post Office ///// -->

<div id="postoffice" style="display:none">
<span style="display:none">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
</span><span class="status overlay" style="margin:0;border-width:0 0 1px 0"></span>

<div style="display:flex;padding:8px 9px 6px 8px">
<div class="editor">
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
</div><span style="flex-grow:1"></span>
<div class="editor">
<textarea name="body" wrap=hard></textarea>
</div></div>

<div class="editor" style="font-size:17px">
Name:<input type=text style="width:calc(24vw - 130px)">&nbsp;
Subject:<input type=text style="width:calc(38vw - 130px)">&nbsp;
Embed:<input type=text style="width:calc(38vw - 130px)">
<input type=checkbox><small><r_> Auto-clear</r_></small>
</div></div>

</body>

<!-- ///// SCRIPTS ///// -->

<script id="SlowAES"></script>
<script id="dash_player"></script>

<script>

var localhost, response, textData, jsonData, busy = 0;
var cors_bypass, cors_kraker, cookies = [];

var bread, breadURL, post_count, post_font, post_width, post_timeofs, post_mod;
var breads = [], opentabs = [], slicing = [], sliced = [], visited = [], posted = [], live = [];

var posturl = document.getElementsByTagName ("input")[0];
var timeofs = document.getElementsByTagName ("input")[1];

var domain_8kun  = "https://8kun.top/";
var media_server = "https://media.128ducks.com/";  //"https://media.8kun.top/";
var posting_url  = "https://sys.8kun.top/post.php";

//domain_8kun  = "http://8kun.top.4o5xwl3fsmzwys7edqxtohvva6ikxc6h7wt7el4ar3d5om6k2zz7yaqd.onion/";
//posting_url  = "http://sys.8kun.top.4o5xwl3fsmzwys7edqxtohvva6ikxc6h7wt7el4ar3d5om6k2zz7yaqd.onion/post.php";

var t_embed = ["", "YouTube", "invidio", "YouTube", "hooktube", "YouTube",
  "bitchute", "!BitChute", "twitter", "!Twitter", "rumble", "!Rumble", "vimeo", "!Vimeo",
  "tora3", "Tora3", "tvgab", "!Gab TV", "odysee", "Odysee"
];

var startup = function ()
{
  localhost = document.location.origin + "/";
  if (document.location.hostname != "localhost") localhost = "";
  if (!localhost) return;

  document.getElementsByName ("proxy")[1].checked = false;
  document.getElementsByName ("proxy")[0].checked = true;
  var dash = document.getElementsByName ("dash")[0];
  dash.checked = true; dash.disabled = false;

  var video = "<!DOCTYPE html><html><head><meta charset='utf-8'>\n" +
    "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n" +
    "</head><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  fetch (localhost + "~_video_.htm", { method: "PUT", body: video });
}
////////////////////

var localhost_missing = function ()
{
  alert ("The Kraker Local Proxy Server is not available.");
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var dns_lookup = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd1").value;
  window.open (localhost + "?dnslookup=" + name, "_blank", "");
}
////////////////////

var dns_servers = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd2").value;
  window.open (localhost + "?servers=" + name, "_blank", "");
}
////////////////////

var dns_activate = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd3").value;
  window.open (localhost + "?activate=" + name, "_blank", "");
}
////////////////////

var dns_reload = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var name = document.getElementById ("cmd4").value;
  window.open (localhost + "?reload=" + name, "_blank", "");
}
////////////////////

var dns_flags = function ()
{
  if (!localhost) { localhost_missing(); return; }
  var a = document.getElementById ("flg1").checked;
  var b = document.getElementById ("flg2").checked;
  var c = document.getElementById ("flg3").checked;
  var d = document.getElementById ("flg4").checked;

  var n = a + (b << 1) + (c << 2) + (d << 4);
  window.open (localhost + "?flags=" + n, "_blank", "");
}
////////////////////

var setup_cors = function ()
{
  cors_bypass = get_checked ("proxy", "");
  if (cors_bypass.substr (0, 6) != "LOCAL:") cors_kraker = ""; else
    cors_kraker = cors_bypass = "http" + cors_bypass.substr (5);
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_checked = function (name, value)
{
  var i = 0, j = value, k = document.getElementsByName (name);
  if (k && k.length) for (; i < k.length; i++) if (k [i].checked) j = k [i].value;
  if (j == "" || isNaN (i = j * 1)) return (j); else return (i);
}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});
  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];
  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

var check_bread_cache = function (time, url)
{
  var a = -1, b = c = 0, i, j, k, json;

  for (i = 0, j = time; i < breads.length; i++)
  {
    if (url == breads [i].url) { a = i; breads [i].time = time; }
    c += breads [i].size; if ((k = breads [i].time) < j) { b = i; j = k; }
  }

  if (c > 25000000) { breads.splice (b, 1); if (b < a) a--; } return (a);
  // note: bread size is the HTML size which is about 3 * JSON size
}
////////////////////

var message = function (msg)
{
  var b = bread; if (!b || !(b = b.body)) return;
  b.children [0].children [1].innerHTML = msg;
}
////////////////////

var bread_top = function (doc)
{
  var b = doc; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 0 ? b [0] : null);
}
////////////////////

var bread_box = function (doc)
{
  var b = doc; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 6 ? b [6] : null);
}
////////////////////

var make_title = function (title, item1, url, item2)
{
  var m = url.split ("/");
  var u = item1 ? "<w_>(" + item1 + ")</w_>&nbsp;" : "";
  var v = "<g_><b>" + m[1] + "</b></g_>" + (m[3] ? "&nbsp;#" + m[3] : "");
  var w = item2 ? "&nbsp;<g_>(" + item2 + ")</g_>" : "";

  return ("<p>" + title + "</p> <span>" + u + v + w + "</span>");
}
////////////////////

var moderator_tools = function (win, url)
{
  var doc = win.document, target = doc.name.split ("/");
  target = "https://sys.8kun.top/mod.php?/" + target [1] + "/";
/*
  var insert = "<big><w_>Moderator options for post #" + url + "</w_></big><p>" +
    "<a href='" + target + "delete/" + url + "'>Delete this post</a> -- " +
    "<a href='" + target + "deletebyip/" + url + "/thread'>Delete all by IP in this thread</a> -- " +
    "<a href='" + target + "deletebyip/" + url + "'>Delete all by IP on this board</a><p>" +
    "<a href='" + target + "ban&delete/" + url + "'>Ban + delete post</a> -- " +
    "<a href='" + target + "ban&deletebyip/" + url + "'>Ban + delete all in this thread</a> -- " +
    "<a href='" + target + "ban&deletebyip/" + url + "/global'>Ban + delete all on this board</a><p>" +
    "<a href='" + target + "ban/" + url + "'>Ban IP</a> -- " +
    "<a href='" + target + "banrange/" + url + "'>Range ban</a> -- " +
    "<a href='" + target + "edit/" + url + "'>Edit this post</a> -- " +
    "<a href='https://sys.8kun.top/mod.php?/'>Dashboard</a>";
*/
  var insert = "<big><w_>Moderator options for post #" + url + "</w_></big><p>" +
    "<a href='" + target + "ban/" + url + "'>Ban IP</a> -- " +
    "<a href='" + target + "delete/" + url + "'>Delete post</a> -- " +
    "<a href='" + target + "ban&delete/" + url + "'>Ban IP + delete post</a><p>" +
    "<a href='" + target + "banrange/" + url + "'>Range ban</a> -- " +
    "<a href='" + target + "edit/" + url + "'>Edit post</a> -- " +
    "<a href='https://sys.8kun.top/mod.php?/'>Dashboard</a>";

  var box = doc.getElementById ("moderator"); if (box) doc.body.removeChild (box);
  box = document.createElement ("SPAN"); box.id = "moderator"; box.innerHTML = insert;
  box.classList.add ("status3"); box.classList.add ("status4");
  box.onclick = function() { box.style.display = "none"; }
  doc.body.appendChild (box);
}

var createwindow = function (win, url)
{
  var doc, bdy, box, top, catalog = !url.includes ("/");

  if (!win) win = window; try { win = win.open ("about:blank", "_blank"); }
    catch (e) { win = window.open ("about:blank", "_blank"); } win.focus();

  doc = win.document; doc.open(); doc.write ("<!DOCTYPE html>"); doc.close();
  bdy = doc.body; bdy.value = -1; bdy.classList.add ("bread");
  if (catalog) bdy.style.backgroundColor = "wheat";
  doc.head.innerHTML = document.head.innerHTML;

  bdy.onload  = function () { bdy.onload = bdy.onfocus = null; fetchbread (url); }
  bdy.onfocus = function () { bdy.onload = bdy.onfocus = null; fetchbread (url); }
  bdy.groyper = function (w, x, v)
  {
    if (v == 1) fetchpost (w, x); if (v == 2) playvideo (w, x); if (v == 3) postbox (w, x);
    if (v == 4) moderator_tools (w, x); if (v == 5) updatebread (w, x, 0);
  }

  box = document.createElement ("SPAN");
  box.id = catalog ? "CaTaLoG" : "LaUnChEr";
  box.classList.add ("status"); box.classList.add ("overlay");
  if (!catalog) box.onclick = function (e) { launchmenu (win, e.target, 0); }
  if (!catalog) box.onmousedown = function (e) { if (e.detail > 1) return false; }
  box.innerHTML = "<span class='status1'></span><span></span><span class='status2'></span>";
  bdy.appendChild (box); box.children [1].innerHTML = "<big><w_>Launching...</w_></big>";

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getpost = function (x) { document.body.groyper (window, x, 1); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getvideo = function (x) { document.body.groyper (window, x, 2); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var quickreply = function (x) { document.body.groyper (window, x, 3); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var moderate = function (x) { document.body.groyper (window, x, 4); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var timeout = function (x) " +
    "{ setTimeout (function() { document.body.groyper (window, x, 5); }, 1000); }";
  bdy.appendChild (box);

  box = document.createElement ("DIV"); bdy.appendChild (box);

  bread = doc; if (catalog) return;

  top = document.getElementById ("quickreply").cloneNode (true);
  box = top.getElementsByTagName ("img")[0].parentNode;
  box.onclick = function() { postbox (win, -1); }
  box = top.getElementsByTagName ("button");
  box [0].onclick = function() { postbox (win, -2); }
  box [1].onclick = function() { postbox (win, -3); }
  box [2].onclick = function() { postbox (win, -4); }
  box [3].onclick = function() { postbox (win, -5); }

  doc.body.appendChild (top); opentabs.push (win);
}
////////////////////

var createJSON = function (data)
{
  var i, j, n, s, t, v, w, pid, uid, time, name, cap, trip, post;
  var json = {"posts" : []}; var posts = json.posts;

  var doc = new DOMParser(); doc = doc.parseFromString (data, "text/html");

  // Waterfox does not like this:
  // var doc = document.implementation.createHTMLDocument();  <-- this is fine
  // doc.open(); doc.write (textData); doc.close();  <-- this is not??

  doc = doc.getElementsByName ("postcontrols")[0].children[1];
  var box = doc.getElementsByTagName ("div");

  for (n = 0; n < box.length; n++) if (s = box[n].id)
  {
    pid = s.substr (s.indexOf ("_") + 1);
    s = box[n].getElementsByClassName ("intro")[0].innerHTML;

    time = pullstring (s, 'unixtime="', '"');
    name = pullstring (s, 'class="name"', '<');
    subj = pullstring (s, 'class="subject"', '<');
    trip = pullstring (s, 'class="trip"', '<');
    uid  = pullstring (s, 'class="poster_id"', '<');
    cap  = pullstring (s, 'class="capcode"', '<');

    name = pullstring (name, '>', '');
    subj = pullstring (subj, '>', '');
    trip = pullstring (trip, '>', '');
    uid  = pullstring (uid, '>', '');
    cap  = pullstring (cap, '>', '');

    if (!cap)
    {
       cap = pullstring (s, 'class="capcode" title="', '"');
       if (cap) cap = pullstring (s, 'style="color:red">', '<');
    }
    if (!uid) uid = pullstring (s, 'hidden service.">', '<');

    w = posts.length ? box[n] : doc;
    w = w.getElementsByClassName ("files");
    w = w && w[0] ? w[0].innerHTML : "";
    v = [""]; w = w.split (">File: <a ");

    for (i = 1; i < w.length; i++)
    {
      s = pullstring (w[i], '', '='); if (s != "href" && s != "title") continue;
      t = pullstring (w[i], '"postfilename"', '<'); s = pullstring (t, 'title="', '"');
      if (!s) s =  pullstring (t, '>', ""); t = pullstring (w[i], '"', '"');

      v.push (s); s = pullstring (w[i], 'src="', '>');
      t = t.split ("/"); j = t.length - 1; t = (j ? "/" : "") + t [j];
      if (s.includes (".jpg") || t.includes (".mp4") || t.includes (".webm"))
        t = t.substr (0, t.indexOf (".")) + ".jpg";

      v.push (t); t = pullstring (s, 'style="', '"');
      v.push (pullstring (t, "width:", "px")); v.push (pullstring (t, "height:", "px"));
    }

    for (i = 5, t = []; i < v.length; i += 4)
      t.push ({ filename: v[i], tim: v[i+1], tn_w: v[i+2], tn_h: v[i+3] });

    w = posts.length ? box[n] : doc; w = w.children;

    for (i = 0; i < w.length; i++)
    {
      if (!(s = w[i].getAttribute ("class")) || s.substr (0,15) != "video-container") continue;
      s = w[i].outerHTML; t = pullstring (s, 'src="', '"');
      v = [s, t, "", "255", "143"]; break;
    }

    if (v.length == 1) v = ["", "", "", "", ""];
    s = box[n].getElementsByClassName ("body")[0].innerHTML;

    post = { no: pid, name: name, sub: subj, capcode: cap, trip: trip, id: uid, time: time,
             com: s, files: "", embed: v[0], fsize: "", ext: "", embed_thumb: v[1],
             tim: v[2], tn_w: v[3], tn_h: v[4], extra_files: t };

    posts.push (post);
  }

  return (json);
}
////////////////////

var getimage = function (v, multi)
{
  var s, t, u, title, banner = "", w = v.tn_w, h = v.tn_h;
  if (!w || w < 64) w = 64; if (!h || h < 64) h = 64;

  var name = v.filename ? "/" + v.filename : "", ext = v.ext ? v.ext : "";
  if (!ext) ext = name.substr (name.lastIndexOf (".")); else name += ext;
  name = name.replace (/'| |"/g, "_"); //name = "";

  if (!v.tim)
  {
    s = v.v_url; t = v.v_img;
    title = v.type; banner = "blue";
    if (title == "YouTube") banner = "red";
  }
  else
  {
    if ((u = (v.fpath === 0 ? "/" : "") + v.tim) [0] == "/")
    {
      s = media_server + pullstring (breadURL, "/", "/");
      t = s + "/thumb" + u; s = s + "/src" + u; name = "";
    }
    else if (localhost)
    {
      s = localhost + "~!content-disposition=|*" + media_server + "file_dl/";
      t = media_server + "file_store/thumb/" + u; s += u;
    }
    else
    {
      s = media_server + "file_store/"; t = s + "thumb/" + u; s += u; name = "";
    }

    ext = ext.toLowerCase(); s += ext;
    u = u.includes (".") ? u.substr (u.indexOf (".")) : "";

    if (u) s = s.substr (0, s.indexOf (u)) + ext; else
      if (ext == ".gif" || ext == ".png" || ext == ".jpeg") t += ext; else t += ".jpg";

    if (ext == ".mp3")
    {
      title = "MP3"; banner = "green"; w = 120; h = 140;
      t = media_server + "static/file.png";
    }
    if (ext == ".mp4")
    {
      title = "MP4"; banner = "green"; //s = cors_kraker + s;
    }
    if (ext == ".webm")
    {
      title = "WEBM"; banner = "green"; //s = cors_kraker + s;
    }
    if (ext == ".pdf")
    {
      title = "PDF"; banner = "green"; w = 120; h = 140;
      t = media_server + "static/file.png";
    }
    if (ext == ".gif")
    {
      title = "GIF"; banner = "blue";
    }
  }

  var img = "<span class='image'><a target=_blank href='" + s + name + "'>" +
    "<img src='" + t + "' width=" + w + " height=" + h + "></a>";

  if (banner)
  {
    s = '<a target=_self class="banner" href="javascript:getvideo(' + "'" + s;
    t = "<span class='banner banner_" + banner + "'>" + title + "</span>";
    img = img + (banner != "red" ? t : s + "')" + '">' + t + "</a>");
  }

  return (img + "</span>");
}
////////////////////

var newcrumb = function (post, target, bread)
{
  var i, j, n, p, s, t, v, box, img = "";
  var pid = post.no, data = post.com ? post.com : "", str = "highlightReply('";
  var islive = target.substr (0,1) == "#"; if (islive) target = target.substr (1);
  var hidepost = target && pid != target && data.indexOf (str + target + "'") < 0;

  var url = bread.name + "#" + pid, catalog = "/catalog#";
  if (url.includes (catalog)) url = url.replace (catalog, "/res/"); else catalog = "";

  if (!catalog) while ((s = pullstring (data, str, '>')))
  {
    t = pullstring (s, 'href="', '"').replace (".html", "");
    p = pullstring (t, "#", "");

    if (hidepost) data = data.replace (str, ""); else
    {
      v = posted.includes (t) ? 'class="in-posted" ' : "";
      if (!v) v = visited.includes (t) ? 'class="in-visited" ' : "";
      t = 'target=_self href="javascript:getpost(' + "'" + t + "'" + ')"';
      data = data.replace ('onclick="' + str + s, v + t);
    }

    box = bread.getElementById ("msg" + p); if (!box) continue;
    box = box.children[0].getElementsByTagName ("span")[0];

    t = ">#" + pid + "</"; v = " <n_" + t + "n_>";
    if (!box.innerHTML.includes (t)) box.innerHTML += v;
  }

  if (hidepost) return; post_count++;

  if (target && !islive)
  {
    if (n = !sliced.includes (url)) sliced.push (url);
    if (n || target == pid) slicing.push (url);
  }

  var name = post.name ? post.name.trim() : "";
  var time = post.time * 1 + post_timeofs;
  var trip = post.trip, uid = post.id;

  trip = trip ? " <x_>" + trip + "</x_>" : "";
  uid = uid ? "  <b_>" + uid + "</b_>" : "";

  name = (name && name != "Anonymous") ? "  <y_>" + name + "</y_>" : "";

  if (p = post.capcode)
  {
    if (p.substr (0,2) != "##") p = "## " + p;
    name = "  <x_>" + p + "</x_>" + name;
  }

  s = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
  time = new Date (time * 1000); s = s [time.getDay()];

  time = "<b_>" + time.toLocaleDateString() + " (" + s + ")</b_> " +
         "<w_>" + time.toLocaleTimeString() + "</w_>";

  s = posted.includes (url) ? 'class="in-posted" ' : "";
  if (!s) s = visited.includes (url) ? 'class="in-visited" ' : "";
  s = '<a ' + s + 'target=_self href="javascript:getpost(' + "'" + url + "'" + ')">';

  var head = "<p class='header'># " + s + pid + "</a>  ";
  var multi = post.tim && post.extra_files && post.extra_files.length;

  if ((t = post.embed_thumb) && (p = post.embed))
  {
    s = pullstring (p, 'class="', '"'); v = "";
    if (s.substr (0,15) != "video-container") s = "?"; else s = s.substr (16);

    for (j = 0; j < t_embed.length; j += 2)
      if (s == t_embed [j]) { v = t_embed [j + 1]; break; }

    if (v == "YouTube")
    {
      t = pullstring (p, 'data-video="', '"');
      s = "https://www.youtube.com/embed/" + t;
      t = "https://i.ytimg.com/vi/" + t + "/mqdefault.jpg";
    }
    else
    {
      if (t.includes ("media.8kun.top")) t = "https://8chananon.github.io/img/unknown.png";
      if (v [0] == "!") { v = v.substr (1); t = "https://8chananon.github.io/img/" + s + ".png"; }
      if (!v) v = s; s = pullstring (p, 'href="', '"');
    }

    img = getimage ({ v_url: s, v_img: t, type: v, tn_w: 255, tn_h: 143 }, multi);
  }

  // It is possible for a post to contain files and images as well as an embedded video.
  // The extra components are ignored by the default client. That behaviour is duplicated.

  if (post.tim)
  {
    img = getimage (post, multi); v = post.extra_files;
    if (multi) for (n = 0; n < v.length; n++) img = img + getimage (v[n], true);
  }

  p = '<p class="body-line empty "></p>';
  if (!data.indexOf (p)) data = data.substr (p.length);

  // for links of the form ">>>/<board name>/"
  data = data.replace (/\<a href="\//g, '<a href="' + domain_8kun);

  s = multi ? (data ? "multi2" : "multi1") : "left";
  if (img) img = "<div class='imgbox " + s + "'>" + img + "</div>";

  s = post.sub ? post.sub.trim() : "";
  t = "<div" + (data ? " class='" + post_font + "'" : "") + ">";
  p = '<a target=_self class="reply" href="javascript:quickreply(' + "'" + pid + "'" + ')"></a>';
  if (post_mod) p += '<a target=_self class="moderate" href="javascript:moderate(' + "'" + pid + "'" + ')"></a>';

  if (catalog)
  {
    v = post.last_modified * 1 + post_timeofs; v = new Date (v * 1000);
    v = "<b_>" + v.toLocaleDateString() + "</b_> <w_>" + v.toLocaleTimeString() + "</w_>";
    uid += "  <g_>[" + (post.replies + 1) + "]</g_>  " + v;

    p = ""; if (!s) s = "No Title"; if (!(n = post.tn_h) || n < 190) n = 200;
    if (data) t = t.substr (0, t.length - 1) + " style='overflow-y:auto;max-height:" + n + "px'>";

    if (post.cyclical != "0") p += "<i class='fa fa-refresh icon'></i>";
    if (post.bumplocked != "0") p += "<i class='fa fa-anchor icon'></i>";
    if (post.locked) p += "<i class='fa fa-lock icon'></i>";
    if (post.sticky) p += "<i class='fa fa-thumb-tack icon'></i>";
  }

  s = " <span></span>" + p + "</p>" + (s ? "<p class='subject'>" + s + "</p>" : "");

  box = document.createElement ("SPAN"); box.classList.add ("postbox");
  box.innerHTML = head + time + name + trip + uid + s + img + t + data + "</div>";
  box.setAttribute ("id", "msg" + pid); if (post_width) box.style.width = post_width;

  bread_box (bread).appendChild (box); if (!img) return;

  s = box.getElementsByTagName ("div"); t = s[0].getElementsByTagName ("img");

  if (multi)
  {
    for (i = 0, j = 1, p = 0, n = t.length, v = []; i <= n; i++, j++)
      if (i == n || (p += (s = t[i].width)) > box.clientWidth - j * 8)
      { 
        if (i == n) s = 0; else if (j < 2) j++; else i--;
        p = j > 2 ? (box.clientWidth - p + s) / j / 2 : 4;
        for (; j > 1; j--) v.push (p); p = j = 0;
      }

    while (n > 0)
    {
      s = t[--n].parentNode.parentNode;
      s.style.marginLeft = v[n] + "px"; s.style.marginRight = v[n] + "px";
    }
  }
  else
  {
    v = t[0].parentNode.parentNode.parentNode;
    t = s[1]; n = v.clientHeight - t.clientHeight - 4;

    if (n >= 0) t.style.paddingTop = (n / 4) + "px"; else
      if (catalog) v.style.paddingTop = (1 - n / 2) + "px"; else
        { v.classList.remove ("left"); v.classList.add ("right"); }
  }
}
////////////////////

var bakebread = function (target, catalog)
{
  var box, top, str, url = "javascript:getpost('" + breadURL;

  if (target && post_count <= 0)
  {
    box = document.createElement ("DIV");
    box.innerHTML = "<p><big><g_>Post # <r_>" + target + "<g_> was not found in this bread.<p><hr><p>" +
      "<b_>Perhaps the post was deleted or the cache (if used) is out of date.</big><p><hr><p>" +
      "<button onclick=" + url + "!" + target + "')>Retry with Fresh Bread</button>";
    bread.body.appendChild (box); return;
  }

  box = document.createElement ("DIV");
  box.style = "display:inline-block;width:calc(100% - 22px);height:60vh";
  bread.body.appendChild (box);

  if (catalog) { box.innerHTML = "<p><hr>";  return; }

  box.innerHTML = "<p><hr><br><big><g_>Click on the status bar for options.</g_></big>";

  var i, j, k, p, q, r, s, t, u, v, w, win; str = url + "#" + target + "')";

  for (i = 0; i < opentabs.length; i++) try
  {
    win = opentabs [i]; if (!win || win.closed) throw ("");
    win = win.document; p = win.title; if (win == bread) p = "";

    q = win.name; w = bread_box (win); win = bread_top (win);
    if (!w || !win || win.id != "LaUnChEr") throw ("");

    if (!p || !target) if (q != breadURL) continue;
    if (q.split ("/")[1] != breadURL.split ("/")[1]) continue;

    for (j = 0, w = w.children; j < w.length; j++) if (w[j].id)
    {
      if (p && target)
      {
        t = w[j].getElementsByTagName ("a");
        for (k = 0; k < t.length; k++) if (s = t[k].href)
          if (s == str) t[k].classList.add ("in-visited");
      }
      if (q != breadURL) continue;

      t = w[j].children[0].getElementsByTagName ("span")[0];
      r = t.innerHTML; s = r.replace (/n_/g, "");

      while (v = pullstring (s, "<>", "</>"))
      {
        u = sliced.includes (breadURL + v) ? "g_>" : "n_>";
        if (!p && slicing.includes (breadURL + v)) u = "r_>";
        s = s.replace ("<>" + v + "</>", "<" + u + v + "</" + u);
      }

      if (r != s) t.innerHTML = s; s = breadURL + "#" + w[j].id.substr (3);

      if (p == "Slice" || !sliced.includes (s)) continue;
      if (!p && slicing.includes (s)) continue;

      w[j].classList.add ("in-sliced");
      w[j].firstElementChild.classList.add ("in-sliced");
    }

  } catch (e) { if (e) console.log ("[Baker] " + e); opentabs.splice (i--, 1); }
}
////////////////////

var fetchpost = function (win, url)
{
  if (busy < 0 || (!url && !(url = posturl.value))) return;
  if (busy > 0 && busy + 2000 > Date.now()) return;

  busy = Date.now(); createwindow (win, url);
}
////////////////////

const fetchbread = async (url) =>
{
  if (!bread) return; if (busy <= 0) { message ("Process violation. Please retry."); return; }

  var type = get_checked ("html-json", 0) ? ".json" : ".html";
  var catalog = !url.includes ("/"); if (catalog) type = ".json";

  if (breadURL = pullstring (url, "'", "'")) url = breadURL; breadURL = domain_8kun;
  if (catalog) url = "/" + url; if (url [0] == "/") url = breadURL + url.substr (1);

  if (url.indexOf (breadURL) != 0) { message ("Bad URL"); return; }

  var m, n, data, lastid = target = "", time = busy / 1000; busy = -1;

  if (catalog) m = -1; else
  {
    if ((m = url.indexOf ("?")) > 0) { lastid = url.substr (m + 1); url = url.substr (0, m); }
    if ((m = url.indexOf ("#")) > 0) { target = url.substr (m + 1); url = url.substr (0, m); }
    if ((n = url.indexOf ("!")) > 0) { target = url.substr (n + 1); url = url.substr (0, n); }
  }

  n = url.indexOf (".html"); if (n > 0) url = url.substr (0, n);
  bread.title = catalog ? "Catalog" : (target ? "Slice" : (lastid ? "CHUNK" : "BREAD"));
  if (catalog) url += "/catalog"; bread.name = breadURL = url.substr (breadURL.length - 1);
 
  if ((n = check_bread_cache (time, breadURL)) >= 0)
    if (lastid || m < 0) breads.splice (n, 1); else { time = 0; jsonData = breads[n].json; }

try
{
  setup_cors(); var crypto = document.getElementById ("SlowAES");
  if (!crypto.src && localhost) crypto.src = localhost + "~vanwanet.js";

  if (time)
  {
    response = await fetch (cors_bypass + url + type, allow_cookie ("vanwanet", ""));
    if (!response.ok) throw ("Status " + response.status + " (" + response.statusText + ")");
    textData = await response.text();

    if (textData.substr (0, 1000).includes ("vanwa.tech/browser-verification"))
    {
      var error = "DDoS Mitigation - puzzle not solved";
      if (!crypto.src) throw ("DDoS Mitigation - need Local Proxy Server");
      n = textData.indexOf ("<script>function"); if (n < 0) throw (error);

      data = textData.substr (n + 8); data = data.substr (0, data.indexOf ('+";'));
      data = data.replace ("document.cookie", "data");
      if (!data) throw (error); eval (data);

      message ("<big><w_>DDoS Mitigation in effect</w_></big>");

      response = await fetch (cors_bypass + url + type, allow_cookie ("vanwanet", data));
      if (response.status != 200) throw ("File not found");
      textData = await response.text();
    }

    jsonData = type == ".json" ? JSON.parse (textData) : createJSON (textData);
  }

  if (!catalog) data = jsonData.posts; else
  {
    for (n = 0, data = []; n < jsonData.length; n++)
      for (m = 0; m < jsonData[n].threads.length; m++) data.push (jsonData[n].threads[m]);
  }

  if (!data || !data.length) throw ("Error in JSON");

  n = textData.length * (type == ".json" ? 3 : 1);
  if (time) breads.push ({ time: time, url: breadURL, json: jsonData, size: n });

  slicing = []; post_count = 0; post_timeofs = timeofs.value * 3600;
  post_font = get_checked ("font", "font1"); post_width = get_checked ("width", "");
  post_mod = get_checked ("moderator", 0);

  // have to wait for Chrome to catch up
  if (!bread.body.clientWidth) await new Promise (x => setTimeout (x, 50));

  if (lastid && target) lastid = ""; if (target) visited.push (breadURL + "#" + target);

  if (lastid) for (n = data.length - 1; n >= 0 ; n--) if (data[n].no <= lastid)
  {
    for (; n < data.length; n++) newcrumb (data[n], "", bread); break;
  }

  if (!lastid) for (n = 0; n < data.length; n++)
  {
    if (!target) newcrumb (data[n], "", bread); else if (target == data[n].no) break;
  }

  if (!lastid && target && n < data.length)
  {
    for (; n < data.length; n++) newcrumb (data[n], target, bread);
  }

  var s = post_count + "&nbsp;of&nbsp;" + data.length;
  var t = data [0].sub, u = time ? "" : "cache"; if (!t) t = "No Title";

  message (make_title (catalog ? "Catalog" : t, catalog ? post_count : s, breadURL, u));

  bakebread (target, catalog); bread.body.style.pointerEvents = "auto";

} catch (err) { console.log (err); message (err); }

  busy = 0; bread = null;
}
////////////////////

const updatebread = async (win, url, mode) =>
{
  var n, p, q, w, time, res, dat, json, doc;

  for (n = 0; n < live.length; n++) if (url == live [n].url)
  {
    if ((w = live [n].win) != win)
    {
      try { w = w.closed ? null : w.document; } catch(e) { w = null; }
      if ((w = bread_top (w)) && w.id == "LaUnChEr") return;
      live.splice (n, 1); n = live.length;
    }
    break;
  }

  if (!win.closed) try { doc = win.document; } catch(e){}
  if (!(w = bread_top (doc)) || w.id != "LaUnChEr" || !(w = w.children)) return;

  if (n < live.length)
  {
    if (mode == 2) { live [n].time -= live [n].count; live [n].count = 1; }
    if (mode == 3) { live [n].running = 0; doc.title = "BREAD"; }
    if (mode == 4)
    {
      p = pullstring (w [1].innerHTML, ">", "<");
      w [1].innerHTML = make_title (p, "IDLE", doc.name, "");
      w [0].innerHTML = 0; live.splice (n, 1); doc.title = "BREAD";
    }
    if (mode) return;
  }
  else if (!mode || mode > 2)
  {
    if (mode == 3) doc.title = "BREAD"; return;
  }
  else
  {
    if (mode > 1) { q = "UPDATE"; r = 1; } else { q = "LIVE"; r = 6; }

    p = pullstring (w [1].innerHTML, ">", "<"); q = make_title (p, q, doc.name, ""); 
    w [1].innerHTML = q; w [2].innerHTML = bread_box (doc).children.length;

    live.push ({ url: url, win: win, count: r, time: 0, total: 0, running: 0 });
  }

  if ((p = --live [n].count) > 0)
  {
    win.timeout (url); w [0].innerHTML = p; return;
  }

  w [0].innerHTML = w [2].innerHTML = "--"; doc.title = "BREAD (update)";

  setup_cors(); p = get_checked ("html-json", 0) ? "json" : "html";
  q = (mode < 2 ? cors_kraker : cors_bypass) + domain_8kun + url.substr (1) + "." + p;

  try
  {
    res = await fetch (q, allow_cookie ("vanwanet", ""));
    if (!res.ok) throw ("Status " + res.status + " (" + res.statusText + ")");
    dat = await res.text(); json = (p == "json") ? JSON.parse (dat) : createJSON (dat);

  } catch (err) { console.log (err); json = null; }

  finishbread (win, url, mode, json, dat ? dat.length * (p == "json" ? 3 : 1) : 0);
}
////////////////////

var finishbread = function (win, url, mode, json, size)
{
  var n, p, q, r, s, w, posts, doc, livedocs = [];

  if (busy) { setTimeout (function() {finishbread (win, url, mode, json, size);}, 150); return; }

  if (!win.closed) try { doc = win.document; } catch(e){}
  for (n = live.length - 1; n >= 0 && win != live [n].win; n--);
  if (n < 0 || !(w = bread_top (doc)) || w.id != "LaUnChEr") return;

  if (!json) { p = 0; console.log ("[Update] " + url); } else
  {
    for (q = 0; q < opentabs.length; q++) try
    {
      w = opentabs [q]; if (w.closed) continue;
      w = w.document; if (w.name != doc.name) continue;
      if (bread_top (doc).id == "LaUnChEr") livedocs.push (w);
    } catch(e){}

    w = bread_box (doc).children; q = (p = w.length) ? w [p-1].id.substr (3) : "0";

    posts = json.posts; p = posts.length; post_timeofs = timeofs.value * 3600;
    post_font = get_checked ("font", "font1"); post_width = get_checked ("width", "");

    for (r = p - 1; r >= 0; r--) if ((s = posts [r].no) && s <= q) break;

    for (s = r + 1; s < p; s++) for (q = 0; q < livedocs.length; q++)
    {
      if ((w = livedocs [q]) == doc) newcrumb (posts [s], "", doc);
      if (w.title != "Slice" || !(w = bread_box (w)) || !(w = w.children [0])) continue;
      newcrumb (posts [s], "#" + w.id.substr (3), livedocs [q]);
    }

    w = bread_box (doc).children; s = w.length - p;
    p -= r + 1; q = live [n].deleted; if (!q) q = 0;

    if (s > q)  // posts deleted?
    {
      live [n].deleted = s; r = w.length - 1; s = posts.length - 1;

      for (var a, b; r >= 0 && s >= 0; --r, --s)
      {
        a = w [r].id.substr (3); b = posts [s].no;
        if (a < b) r++; else if (a > b) { s++; w [r].classList.add ("is-deleted"); }
      }
    }

    for (r = 0; r < breads.length; r++) if (url == breads [r].url) break;
    breads [r] = { time: Date.now(), url: url, json: json, size: size };
  }

  r = 0; s = live [n].time; if (!s) s = 20; else r = live [n].total += p;
  q = s * 4 / (r + 1); if (q > s) q = s; q = Math.floor (q / 2);
  if (q < 10) q = 10; if (q > 240) q = 240;

  if (s > q * 4) { s = Math.floor (s / 2); live [n].total = Math.floor (r / 2); }

  r = live [n].running += p; live [n].count = q;
  live [n].time = q + s; s = bread_box (doc).children.length;

  doc.title = "BREAD (" + p + (mode > 1 ? "" : "-" + r + "-" + q) + ")";

  if (mode > 1) { q = 0; live.splice (n, 1); } else win.timeout (url);

  w = bread_top (doc).children; w [0].innerHTML = q; w [2].innerHTML = s;
}
////////////////////

var launchmenu = function (win, item, cmd)
{
  var n, box, top, doc = win.document, url = doc.name, input = doc.getSelection();

  if (item.nodeName == "INPUT" || input.anchorOffset != input.focusOffset) return;
  while (item && !item.id) item = item.parentNode; if (!item) return;

  if (box = doc.getElementById ("posting")) box.style.display = "block";
  top = item.children [1]; box = taglist (top, "input");
  input = box.length ? box [0].value : "";

  if (cmd == 0)
  {
    if (top.value)
    {
      top.innerHTML = top.value; top.value = ""; return;
    }
    top.value = top.innerHTML; top.innerHTML = "";

    if (doc.title.includes ("BREAD"))
    {
      for (n = live.length - 1; n >= 0 && win != live [n].win; n--);

      box = document.createElement ("BUTTON"); box.innerHTML = "Update";
      box.onclick = function (e) { launchmenu (win, e.target, 2); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Reset";
      box.onclick = function (e) { launchmenu (win, e.target, 3); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = n < 0 ? "Go Live" : "End Live";
      box.onclick = function (e) { launchmenu (win, e.target, n < 0 ? 1 : 4); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = doc.body.value < 0 ? "Mark" : "Restore";
      box.onclick = function (e) { launchmenu (win, e.target, 5); }
      top.appendChild (box);
    }

    if (doc.title != "Post Office")
    {
      box = document.createElement ("BUTTON"); box.innerHTML = "Post Office";
      box.onclick = function (e) { launchmenu (win, e.target, 11); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Quick Reply";
      box.onclick = function (e) { launchmenu (win, e.target, 10); }
      top.appendChild (box);
    }
    else
    {
      box = document.createElement ("BUTTON"); box.innerHTML = "1";
      box.onclick = function (e) { launchmenu (win, e.target, 21); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "2";
      box.onclick = function (e) { launchmenu (win, e.target, 22); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "3";
      box.onclick = function (e) { launchmenu (win, e.target, 23); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "4";
      box.onclick = function (e) { launchmenu (win, e.target, 24); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "5";
      box.onclick = function (e) { launchmenu (win, e.target, 25); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "6";
      box.onclick = function (e) { launchmenu (win, e.target, 26); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Clear";
      box.onclick = function (e) { launchmenu (win, e.target, 12); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Copy";
      box.onclick = function (e) { launchmenu (win, e.target, 13); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Post";
      box.onclick = function (e) { launchmenu (win, e.target, 14); }
      top.appendChild (box);

      box = document.createElement ("INPUT"); box.type = "text";
      box.style = "text-align:center"; box.size = 8; box.value = url.split ("/")[3];
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Change";
      box.onclick = function (e) { launchmenu (win, e.target, 16); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "New Thread";
      box.onclick = function (e) { launchmenu (win, e.target, 15); }
      top.appendChild (box);
    }
    return;
  }

  top.innerHTML = top.value; top.value = "";

  if (cmd <= 4) updatebread (win, url, cmd);

  if (cmd == 5)
  {
    if ((n = doc.body.value) >= 0) win.scrollTo (0, n);
    doc.body.value = n < 0 ? win.pageYOffset : -1;
  }

  if (cmd == 10) postbox (win, 0);
  if (cmd == 11) postoffice (win, -1);
  if (cmd == 12) postoffice (win, -2);
  if (cmd == 13) postoffice (win, -3);
  if (cmd == 14) postoffice (win, -4);
  if (cmd == 15) postoffice (win, -5);
  if (cmd == 16) postalcode (doc, input, 0);
  if (cmd >= 21 && cmd <= 26) postoffice (win, cmd);
}
////////////////////

var taglist = function (top, name)
{
  return (top.querySelectorAll (name));
}
////////////////////

var clear_images = function (top)
{
  var n, box = taglist (top, "input[type=file]"), img = taglist (top, "img");

  for (n = 0; n < box.length; n++) box [n].value = "";

  for (n = 0; n < img.length; n++)
  {
    box = img [n]; box.src = box.value = ""; box = box.nextElementSibling;
    box.title = box.innerHTML = box.style.backgroundColor = "";
  }
}
////////////////////

var clear_inputs = function (top)
{
  var n, box = taglist (top, "input[type=text]");

  for (n = 1; n < box.length; n++) box [n].value = "";

  box = taglist (top, "textarea")[0].value = "";
}
////////////////////

var postbox = function (win, postnum)
{
  var url, frm, box, top, doc = win.document;

  top = doc.getElementById ("quickreply");

  if (postnum >= 0)
  {
    top.style.display = "block";
    box = taglist (top, "textarea")[0]; box.focus();
    if (postnum) box.value += ">>" + postnum + "\n";
  }

  if (postnum == -1) if ((box = taglist (top, "img")[0]).value)
  {
    clear_images (top);
  }
  else
  {
    box = taglist (top, "input[type=file]")[0];
    box.onchange = function (e) { loadimage (top, e, 0); }
    box.click();
  }  

  if (postnum == -2) clear_inputs (top);

  if (postnum == -3)
  {
    taglist (top, "textarea")[0].select(); doc.execCommand ("copy");
  }

  if (postnum == -4) sendform (top, win, doc, false);

  if (postnum == -4 || postnum == -5) top.style.display = "none";
}
////////////////////

var postoffice = function (win, cmd)
{
  var n, p, q, box, top, doc = win.document;

  if (cmd == -1)
  {
    var postwin = win.open ("", "_blank"), post = postwin.document;
    post.open(); post.write ("<!DOCTYPE html>"); post.close();

    post.name = doc.name; post.head.innerHTML = document.head.innerHTML;
    post.title = "Post Office"; post.body.classList.add ("postoffice");
    post.onfocus = function() {
      post.getElementById (post.value).querySelector ("textarea").focus(); }

    p = pullstring (bread_top (doc).children [1].innerHTML, ">", "<");
    q = get_checked ("font", "font1");

    for (n = 1; n <= 6; n++)
    {
      top = document.getElementById ("postoffice").cloneNode(true);
      top.id = "post" + n; box = top.children [1];

      if (n == 1) { post.value = top.id; top.style.display = "block"; }
      box.onclick = function (e) { launchmenu (postwin, e.target, 0); }
      box.onmousedown = function (e) { if (!e.target.value && e.detail > 1) return false; }
      box.innerHTML = make_title (p, "POST " + n, post.name, "");

      box = taglist (top, "img");
      box [0].parentNode.onclick = function() { postoffice (postwin, 0); }
      box [1].parentNode.onclick = function() { postoffice (postwin, 1); }
      box [2].parentNode.onclick = function() { postoffice (postwin, 2); }
      box [3].parentNode.onclick = function() { postoffice (postwin, 3); }
      box [4].parentNode.onclick = function() { postoffice (postwin, 4); }

      box = taglist (top, "textarea")[0]; box.classList.add (q);
      post.body.appendChild (top);
    }
    return;
  }

  if (!(top = doc.getElementById (doc.value))) return;

  if (cmd >= 0 && cmd <= 4) if ((box = taglist (top, "img")[cmd]).value)
  {
    box.src = box.value = ""; box = box.nextElementSibling;
    box.title = box.innerHTML = box.style.backgroundColor = "";
    taglist (top, "input[type=file]")[cmd].value = "";
  }
  else
  {
    box = taglist (top, "input[type=file]")[cmd];
    box.onchange = function (e) { loadimage (top, e, cmd); }
    box.click();
  }

  if (cmd >= 21 && cmd <= 26)
  {
    doc.value = "post" + (cmd - 20); top.style.display = "none";
    top = doc.getElementById (doc.value); top.style.display = "block";
    doc.onfocus();
  }

  if (cmd == -2) clear_inputs (top);

  if (cmd == -3)
  {
    taglist (top, "textarea")[0].select(); doc.execCommand ("copy");
  }

  if (cmd == -4) sendform (top, win, doc, false);

  if (cmd == -5) sendform (top, win, doc, true);
}
////////////////////

var postalcode = function (doc, num, title)
{
  var n, box, p = doc.name.split ("/"), q;

  if (title == 2)
  {
    box = doc.getElementById (doc.value).children [1];
    q = pullstring (box.value ? box.value : box.innerHTML, ">", "<");
    q = make_title (q, "POST " + doc.value.substr (4), doc.name, num);
    if (box.value) box.value = q; else box.innerHTML = q;
    return;
  }

  if (title == 1) title = "New Thread";
  if (title == 0) title = "Unknown Title";
 
  if (!num || num == p [3]) return;
  p [3] = num; p = doc.name = p.join ("/");

  for (n = 1; n <= 6; n++)
  {
    q = make_title (title, "POST " + n, p, "");
    box = doc.getElementById ("post" + n).children [1];
    if (box.value) box.value = q; else box.innerHTML = q;
  }
}
////////////////////

var loadimage = function (top, e, num)
{
  var n, box, img, src = e.target.files [0], name = src.name;

  img = taglist (top, "img")[num]; box = img.nextElementSibling;
  img.value = box.title = box.innerHTML = name;
  box.style.backgroundColor = "pink";

  if (name.search (".jpg|.jpeg|.png|.gif") < 0)
    img.src = "launch-8kun.ico"; else img.src = URL.createObjectURL (src);

  taglist (top, "input[type=file]")[num].onchange = null;
}
////////////////////

var sendform = function (top, win, doc, thread)
{
  var n, p, q, box, frm, data, posturl = doc.name, url = posturl.split ("/");

  if (box = doc.getElementById ("posting"))
  {
    box.style.display = "block"; box.style.backgroundColor = "pink"; return;
  }
  if (box = doc.getElementById ("posterror")) doc.body.removeChild (box);
  frm = document.getElementById ("postform").cloneNode(true);

  box = taglist (top, "textarea");
  frm.appendChild (box [0].cloneNode(true));
  box = taglist (top, "input[type=file]");

  for (n = p = 0; n < box.length; n++) if ((q = box [n]).value)
  {
    frm.appendChild (q = q.cloneNode(true)); q.name = "file" + (p++ ? p : "");
  }

  box = taglist (top, "input[type=text]");
  frm.children [0].value = box [0].value.trim();
  frm.children [1].value = box [1].value.trim();
  frm.children [2].value = box [2].value.trim();
  frm.children [3].value = url [1];

  if (!thread) frm.children [4].value = url [3]; else
  {
    frm [4].name = "page"; frm [4].value = "1"; frm [5].value = "New Thread";
  }

  if (get_checked ("moderator", 0)) frm [6].value = "1";
  data = new FormData (frm);

  box = document.createElement ("SPAN");
  box.onclick = function() { box.style.display = "none"; }
  box.id = "posting"; box.innerHTML = "Waiting for server...";
  box.classList.add ("status3"); doc.body.appendChild (box);

  if (doc.value)
  {
    box.style.position = "absolute"; postalcode (doc, "", 2);
  }

  var message = function (msg) { if (!win.closed) box.innerHTML = msg; }
  var xhr = new XMLHttpRequest(), count = total = 0;

  xhr.onerror     = function (e) { done (null); }
  xhr.onabort     = function (e) { done (null); }
  xhr.onloadstart = function (e) { message ("Submitting your post..."); }
  xhr.onloadend   = function (e) { done (e); }

  xhr.upload.onprogress = function (e)
  {
    count = e.loaded; total = e.total; count = Math.round (count * 100 / (total + 1));
    if (count > 10 && count < 90) message ("Progress: " + count + "% (probably wrong)");
  }

  xhr.open ("POST", posting_url, true); xhr.withCredentials = true; xhr.send (data);

  var done = function (e)
  {
    var status = 0, statusText = response = error = postnum = "";

    if (e)
    {
      status = e.target.status; statusText = e.target.statusText;
      response = e.target.response;
    }

    if (status == 200) if (postnum = pullstring (response, '"id":"', '"'))
    {
      if (thread) postalcode (doc, postnum, 1);
      posted.push (doc.name + "#" + postnum);
    }
    else
    {
      error = pullstring (response, '"error":"', '"');
      if (!error && response.includes ("captcha")) error = "Captcha needed to post.";
    }

    if (!win.closed) if (postnum)
    {
      if (!doc.value) n = 1; else
      {
        n = taglist (top, "input[type=checkbox]")[0].checked;
        postalcode (doc, postnum, 2);
      }

      if (n) { clear_images (top); clear_inputs (top); }
      doc.body.removeChild (doc.getElementById ("posting"));
    }
    else
    {
      if (!status) error = "Status unknown (possible CORS block)"; else
        if (!error) error = "Status: " + status + " (" + statusText + ")";

      box.id = "posterror"; box.style.display = "block";
      box.innerHTML = error; box.style.backgroundColor = "yellow";
    }
  }
}
////////////////////

const playvideo = async (win, url) =>
{
  if (busy < 0 || (!url && !(url = posturl.value))) return; busy = -1;

  var i, j, doc, vid, msg, fmt;

  var bstyle = "display:flex;height:100vh;justify-content:center;align-items:center;" +
    "margin:0;padding:0;background-color:black;font-size:20px;line-height:40px";

  var mstyle = "display:block;position:absolute;top:30%;padding-bottom:2px;" +
    "left:calc(50vw - 150px);right:calc(50vw - 150px);border-radius:20px;" +
    "text-align:center;font-style:italic;color:maroon;background-color:lightcoral";

  var vstyle = "border:none;outline:none;width:auto;height:auto";

  var insert = "<html><body><h2></h2><video autoplay allowfullscreen></video></body></html>";

  if (!win) win = window; try { win = win.open (); }
    catch (e) { win = window.open (); } win.focus();

  if (localhost) win.location = localhost + "~_video_.htm"; else
  {
    doc = win.document; doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  }

  for (i = 0; i < 10; i++)
  {
    // June 23, 2021 - Firefox 89 will sometimes return a document with a null body
    if ((doc = win.document).doctype != null && doc.body) break;
    await new Promise (x => setTimeout (x, 100));
  }

  msg = doc.getElementsByTagName ("h2")[0]; vid = doc.getElementsByTagName ("video")[0];
  doc.body.style = bstyle; msg.style = mstyle; vid.style = vstyle;

  msg.innerHTML = "Alleycat Player"; doc.title = "YouTube"; fmt = get_checked ("format", 18);

  if (get_checked ("dash", 0) && localhost)
  {
    var box = document.createElement ("SCRIPT");
    box.src = localhost + "~dash_player.js";
    fmt = -fmt; doc.body.appendChild (box);
  }

  url = url.substr (url.length - 11); request_new_youtube (url, 0, fmt, msg, vid, win);
}
////////////////////

var startvideo = function (url, msg, vid, win, fmt, dash)
{
  var m = "", p = document.getElementsByName ("format");

  for (var i = j = 0; i < p.length; i++) if (fmt == p[i].value)
  {
    m = p[i].nextSibling.textContent.trim() + (dash ? " | DASH: on " : " | DASH: off ");
  }

  p = document.getElementById ("status"); p.value = "";
  vid.parentNode.onbeforeunload = function() { p.value = vid.value = ""; }
  vid.value = m; vid.ontimeupdate = function() { p.value = vid.value; }
  vid.onloadedmetadata = function() { vid.controls = true; msg.style.display = "none"; }

  if (!dash)
  {
    vid.onerror = function() { msg.innerHTML = "Error"; }
    vid.src = url; return;
  }

  var dash = win.dashjs.MediaPlayer().create(); dash.initialize (vid, url, true);
  vid.parentNode.onunload = function() { dash.reset(); console.log ("DASH player unloaded."); }
  dash.on (win.dashjs.MediaPlayer.events ["ERROR"], function() { msg.innerHTML = "Error"; });
}
////////////////////

const request_new_youtube = async (id, frame, fmt, msg, vidobj, win) =>
{
  var i, j, s, t, sub, vid, aud, key, sig, nkey, webm, f = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; setup_cors();
  var url = cors_kraker + "https://www.youtube.com/youtubei/v1/player?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8";

try
{
  if (!cors_kraker) throw ("???");

  t = { videoId: id };
  t.context = { client: { gl: 'US', hl: 'en', clientName: 'ANDROID', clientVersion: '16.02' }};
  s = JSON.stringify (t);

  response = await fetch (url, { method: 'POST', headers: {'content-type': 'application/json'}, body: s });
  jsonData = await response.json();

  if (!(sub = jsonData.streamingData))
  {
    t.context = { client: { gl: 'US', hl: 'en', clientName: 'TVHTML5_SIMPLY_EMBEDDED_PLAYER', clientVersion: '2.0' }};
    t.context.thirdParty = { embedUrl: 'https://www.youtube.com' };
    s = JSON.stringify (t);

    response = await fetch (url, { method: 'POST', headers: {'content-type': 'application/json'}, body: s });
    jsonData = await response.json();

    if (!(sub = jsonData.streamingData)) throw ("!!!");
  }

  if (fmt < 0 && (fmt = -fmt) && (t = sub.adaptiveFormats))
  {
    for (i = 0; i < t.length; i++)
      if ((s = t[i].itag) && (j = isdashfmt (s)) >= 0)
        if (t[i].approxDurationMs || t[i].targetDurationSec) f[j] = i + 1;

    if (!f[8]) f[0] = f[1] = f[2] = 0;
    if (!f[9]) f[4] = f[5] = f[6] = 0;
    if (getformat (f, fmt)) tag = "";
  }

  if (tag && (t = sub.formats))
    for (i = 0; i < t.length; i++) if ((s = t[i].itag) && (j = argformat (s)) >= 0) f[j] = i + 1;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((i = argformat (fmt)) < 0 || (j = f [i] - 1) < 0) throw ("!!!");

  webm = i > 3; if (!tag) aud = new_yt_split (t [f [webm + 8] - 1]);
  vid = new_yt_split (t [j]); url = vid [0]; sig = vid [1]; if (!url) throw ("!!!");

  if (sig || url.includes ("&n="))
  {
    response = await fetch (cors_kraker + "https://www.youtube.com/embed/" + id);
    textData = await response.text();

    s = textData.substr (textData.indexOf ("base.js") - 100, 107);
    if ((i = s.indexOf ("/s/player/")) < 0) throw ("!!!"); s = s.substr (i);
    key = cookies [s]; nkey = cookies ["!" + s];

    if ((sig && !key) || (!sig && !nkey))
    {
      response = await fetch (cors_kraker + "https://www.youtube.com" + s);
      textData = await response.text();

      cookies [s] = key = yt_algo (textData);

      // extract the n signature algo (needed to bypass the rate limiting)

      if ((n = textData.indexOf ('function(a){var b=a.split("")')) > 0)
      {
        t = textData.substr (n, textData.indexOf ('b.join("")', n) - n + 12);
        cookies ["!" + s] = nkey = "var nsig=" + t + " sig=nsig(sig);";
      }
    }

    url = yt_nsig (url, nkey); if (sig && key) { eval (key); url += "&sig=" + sig; }
  }

  if (!tag) if (!(sub = yt_nsig (aud [0], nkey))) throw ("!!!"); else
  {
    var v = aud [3] + "," + vid [3], w = "wanna_boot_dash";

//    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
//      "<a href='" + sub + "'>Audio</a> &nbsp;" +
//      "<a href='" + url + "'>Video</a>" + tail;

    if (key && (sig = aud [1])) { eval (key); sub += "&sig=" + sig; }

    if (!(s = vid [2]))
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (cors_kraker + s + url);
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";
    s += "|" + (webm ? "audio/webm" : "audio/mp4") + "|" + (webm ? "opus" : "mp4a.40.2");
    s += "|" + (webm ? "video/webm" : "video/mp4") + "|" + (webm ? "vp9" : "avc1.4d401e");
    s += "|" + v + "|" + tag + "|" + sub + "|" + url + "|";

    await fetch (cors_kraker + w, { method: 'POST', body: s } );
    url = cors_kraker + "_" + w + "_" + tag; tag = "yt-dash"; //stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  if (!busy) { msg.innerHTML = "Error"; return; }
  busy = 0; startvideo (url, msg, vidobj, win, fmt, tag == "yt-dash");
}
////////////////////

var new_yt_split = function (data)
{
  var d, i = r = s = "", u = data.url;

  if (!u) if (!(u = data.signatureCipher)) u = ""; else
  {
    u = u.replace (/%25/g, "%"); u = decodeURIComponent (u);
    s = pullstring (u, "s=", "&"); u = pullstring (u, "url=", "");
  }

  i = (d = data.initRange)  ? d.start + "-" + d.end : "";
  r = (d = data.indexRange) ? d.start + "-" + d.end : "";

  if (!(d = data.approxDurationMs)) d = 0;

  return ([u, s, d / 1000, i + "," + r]);
}
////////////////////

var yt_algo = function (data)
{
  var i, j, n, s, v;

  for (i = 0; i < 3; i++)
  {
    j = data.indexOf ('a=a.split("")'); if (j < 0) return "";
    s = data.substr (j + 14, 300); if ((n = s.indexOf ("a.join")) > 0) break;
    if (i > 1) return ""; data = data.substr (j + 1);
  }
  s = s.substr (0, n - 7);
  v = "var " + s.substr (0, 2) + "={";
  if ((n = data.indexOf (v)) < 0) return "";

  v = data.substr (n, 300); v = v.substr (0, v.indexOf ("};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

var yt_nsig = function (url, nkey)
{
  var sig = pullstring (url, "&n=", "&"); if (!nkey || !sig) return url;
  var s = "&n=" + sig + "&"; eval (nkey); sig = "&n=" + sig + "&";
  return (url.replace (s, sig));
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}
////////////////////

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}
////////////////////

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixformat = function (f, frame)
{
}
////////////////////

var no_format = function (frame)
{
}
////////////////////

</script>

</html>
